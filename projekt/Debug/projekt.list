
projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbf4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fdc  0800bda8  0800bda8  0000cda8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd84  0800dd84  0000f220  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd84  0800dd84  0000ed84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd8c  0800dd8c  0000f220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd8c  0800dd8c  0000ed8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dd90  0800dd90  0000ed90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000220  20000000  0800dd94  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f220  2**0
                  CONTENTS
 10 .bss          00000790  20000220  20000220  0000f220  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009b0  200009b0  0000f220  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f220  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001539c  00000000  00000000  0000f250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003397  00000000  00000000  000245ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d8  00000000  00000000  00027988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f37  00000000  00000000  00028d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000269f1  00000000  00000000  00029c97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001726f  00000000  00000000  00050688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e03f8  00000000  00000000  000678f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00147cef  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006820  00000000  00000000  00147d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0014e554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000220 	.word	0x20000220
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bd8c 	.word	0x0800bd8c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000224 	.word	0x20000224
 80001ec:	0800bd8c 	.word	0x0800bd8c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <ObjectInit>:
	int x;
	int y;
	int width;
	int height;
};
static struct Object ObjectInit(int x, int y, int width, int height){
 8001004:	b490      	push	{r4, r7}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	603b      	str	r3, [r7, #0]
	struct Object obj;
	obj.x = x;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	613b      	str	r3, [r7, #16]
	obj.y = y;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	617b      	str	r3, [r7, #20]
	obj.width = width;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	61bb      	str	r3, [r7, #24]
	obj.height = height;
 800101e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001020:	61fb      	str	r3, [r7, #28]
	return obj;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	461c      	mov	r4, r3
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800102c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bc90      	pop	{r4, r7}
 8001038:	4770      	bx	lr

0800103a <ClearObjectFromDisplay>:
void ClearObjectFromDisplay(struct Object object) {
 800103a:	b590      	push	{r4, r7, lr}
 800103c:	b085      	sub	sp, #20
 800103e:	af00      	add	r7, sp, #0
 8001040:	463c      	mov	r4, r7
 8001042:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001046:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800104a:	f002 f991 	bl	8003370 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(object.x, object.y, object.width, object.height);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	b298      	uxth	r0, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	b299      	uxth	r1, r3
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	b29a      	uxth	r2, r3
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	b29b      	uxth	r3, r3
 800105e:	f002 fb11 	bl	8003684 <BSP_LCD_FillRect>
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	bd90      	pop	{r4, r7, pc}

0800106a <checkIfObjectOnArea>:
int checkIfObjectOnArea(struct Object object, int minX, int maxX, int minY, int maxY){
 800106a:	b490      	push	{r4, r7}
 800106c:	b084      	sub	sp, #16
 800106e:	af00      	add	r7, sp, #0
 8001070:	463c      	mov	r4, r7
 8001072:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (object.x <= maxX && object.x + object.width >=minX && object.y <= maxY && object.y + object.height>= minY){
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	69fa      	ldr	r2, [r7, #28]
 800107a:	429a      	cmp	r2, r3
 800107c:	db11      	blt.n	80010a2 <checkIfObjectOnArea+0x38>
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	4413      	add	r3, r2
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	429a      	cmp	r2, r3
 8001088:	dc0b      	bgt.n	80010a2 <checkIfObjectOnArea+0x38>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800108e:	429a      	cmp	r2, r3
 8001090:	db07      	blt.n	80010a2 <checkIfObjectOnArea+0x38>
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	6a3a      	ldr	r2, [r7, #32]
 800109a:	429a      	cmp	r2, r3
 800109c:	dc01      	bgt.n	80010a2 <checkIfObjectOnArea+0x38>
			return 1;
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <checkIfObjectOnArea+0x3a>
		}
		return 0;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc90      	pop	{r4, r7}
 80010ac:	4770      	bx	lr

080010ae <checkIfObjectOnScreen>:
int checkIfObjectOnScreen(struct Object object){
 80010ae:	b590      	push	{r4, r7, lr}
 80010b0:	b089      	sub	sp, #36	@ 0x24
 80010b2:	af04      	add	r7, sp, #16
 80010b4:	463c      	mov	r4, r7
 80010b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (checkIfObjectOnArea(object, 0, 240 , 0, 320)){
 80010ba:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80010be:	9303      	str	r3, [sp, #12]
 80010c0:	2300      	movs	r3, #0
 80010c2:	9302      	str	r3, [sp, #8]
 80010c4:	23f0      	movs	r3, #240	@ 0xf0
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	2300      	movs	r3, #0
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	463b      	mov	r3, r7
 80010ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010d0:	f7ff ffcb 	bl	800106a <checkIfObjectOnArea>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <checkIfObjectOnScreen+0x30>
		return 1;
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <checkIfObjectOnScreen+0x32>
	}
	return 0;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd90      	pop	{r4, r7, pc}

080010e8 <updatePosition>:
void updatePosition(struct Object* object,int inx, int iny) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
	if (iny != object->y || inx != object->x) {
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d104      	bne.n	8001108 <updatePosition+0x20>
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	429a      	cmp	r2, r3
 8001106:	d029      	beq.n	800115c <updatePosition+0x74>
		if (checkIfObjectOnScreen(*object)) {
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800110c:	f7ff ffcf 	bl	80010ae <checkIfObjectOnScreen>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <updatePosition+0x36>
			ClearObjectFromDisplay(*object);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800111a:	f7ff ff8e 	bl	800103a <ClearObjectFromDisplay>
		}
		object->y = iny;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	605a      	str	r2, [r3, #4]
		object->x = inx;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	601a      	str	r2, [r3, #0]
		if(checkIfObjectOnScreen(*object)) {
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800112e:	f7ff ffbe 	bl	80010ae <checkIfObjectOnScreen>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d011      	beq.n	800115c <updatePosition+0x74>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f002 f918 	bl	8003370 <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(object->x, object->y, object->width, object->height);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	b298      	uxth	r0, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	b299      	uxth	r1, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	b29a      	uxth	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	b29b      	uxth	r3, r3
 8001158:	f002 fa94 	bl	8003684 <BSP_LCD_FillRect>
		}
	}
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <DrawFloor>:

struct Object FloorObjects[5];
void DrawFloor(int scroll) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]


	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f002 f8fe 	bl	8003370 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(120, 270, 240, 5);
 8001174:	2305      	movs	r3, #5
 8001176:	22f0      	movs	r2, #240	@ 0xf0
 8001178:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800117c:	2078      	movs	r0, #120	@ 0x78
 800117e:	f002 fa81 	bl	8003684 <BSP_LCD_FillRect>
	// grudki
	for (int i = 0; i < 5; i++) {
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	e042      	b.n	800120e <DrawFloor+0xaa>
		if (FloorObjects[i].x + scroll + FloorObjects[i].width / 2 < 0) {
 8001188:	4a25      	ldr	r2, [pc, #148]	@ (8001220 <DrawFloor+0xbc>)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	011b      	lsls	r3, r3, #4
 800118e:	4413      	add	r3, r2
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	441a      	add	r2, r3
 8001196:	4922      	ldr	r1, [pc, #136]	@ (8001220 <DrawFloor+0xbc>)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	011b      	lsls	r3, r3, #4
 800119c:	440b      	add	r3, r1
 800119e:	3308      	adds	r3, #8
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	0fd9      	lsrs	r1, r3, #31
 80011a4:	440b      	add	r3, r1
 80011a6:	105b      	asrs	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	da18      	bge.n	80011e0 <DrawFloor+0x7c>
			updatePosition(&FloorObjects[i], 240 + FloorObjects[i].width / 2 , FloorObjects[i].y);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001220 <DrawFloor+0xbc>)
 80011b4:	1898      	adds	r0, r3, r2
 80011b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001220 <DrawFloor+0xbc>)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	011b      	lsls	r3, r3, #4
 80011bc:	4413      	add	r3, r2
 80011be:	3308      	adds	r3, #8
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	0fda      	lsrs	r2, r3, #31
 80011c4:	4413      	add	r3, r2
 80011c6:	105b      	asrs	r3, r3, #1
 80011c8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80011cc:	4a14      	ldr	r2, [pc, #80]	@ (8001220 <DrawFloor+0xbc>)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	011b      	lsls	r3, r3, #4
 80011d2:	4413      	add	r3, r2
 80011d4:	3304      	adds	r3, #4
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	f7ff ff85 	bl	80010e8 <updatePosition>
 80011de:	e013      	b.n	8001208 <DrawFloor+0xa4>
		}
		else {
			updatePosition(&FloorObjects[i], FloorObjects[i].x + scroll, FloorObjects[i].y);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001220 <DrawFloor+0xbc>)
 80011e6:	1898      	adds	r0, r3, r2
 80011e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001220 <DrawFloor+0xbc>)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	011b      	lsls	r3, r3, #4
 80011ee:	4413      	add	r3, r2
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	18d1      	adds	r1, r2, r3
 80011f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001220 <DrawFloor+0xbc>)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	4413      	add	r3, r2
 80011fe:	3304      	adds	r3, #4
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	f7ff ff70 	bl	80010e8 <updatePosition>
	for (int i = 0; i < 5; i++) {
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	3301      	adds	r3, #1
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2b04      	cmp	r3, #4
 8001212:	ddb9      	ble.n	8001188 <DrawFloor+0x24>
		}

	}
	//--------
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000404 	.word	0x20000404

08001224 <CreateObstacle>:
int minObstacleDistance;
int maxObstacleDistance;
int minObstacleHeight;
int maxObstacleHeight;
int obstacleWidth;
int CreateObstacle(int x, int y, int width , int height) {
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b08b      	sub	sp, #44	@ 0x2c
 8001228:	af02      	add	r7, sp, #8
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	603b      	str	r3, [r7, #0]
		if (obstaclesCount < obstaclesSize) {
 8001232:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <CreateObstacle+0x5c>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <CreateObstacle+0x60>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	429a      	cmp	r2, r3
 800123c:	da1a      	bge.n	8001274 <CreateObstacle+0x50>
			struct Object newObstacle = ObjectInit(x, y, width, height);
 800123e:	f107 0010 	add.w	r0, r7, #16
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68ba      	ldr	r2, [r7, #8]
 800124a:	68f9      	ldr	r1, [r7, #12]
 800124c:	f7ff feda 	bl	8001004 <ObjectInit>
			Obstacles[obstaclesCount] = newObstacle;
 8001250:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <CreateObstacle+0x5c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0c      	ldr	r2, [pc, #48]	@ (8001288 <CreateObstacle+0x64>)
 8001256:	011b      	lsls	r3, r3, #4
 8001258:	4413      	add	r3, r2
 800125a:	461c      	mov	r4, r3
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001262:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			obstaclesCount++;
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <CreateObstacle+0x5c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <CreateObstacle+0x5c>)
 800126e:	6013      	str	r3, [r2, #0]
			return 1;
 8001270:	2301      	movs	r3, #1
 8001272:	e000      	b.n	8001276 <CreateObstacle+0x52>
		}
	return 0;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	@ 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd90      	pop	{r4, r7, pc}
 800127e:	bf00      	nop
 8001280:	200004a4 	.word	0x200004a4
 8001284:	20000000 	.word	0x20000000
 8001288:	20000454 	.word	0x20000454

0800128c <DeleteObstacle>:
void DeleteObstacle(int index) {
 800128c:	b490      	push	{r4, r7}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	if (index <= obstaclesCount - 1) {
 8001294:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <DeleteObstacle+0x60>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	429a      	cmp	r2, r3
 800129c:	da1b      	bge.n	80012d6 <DeleteObstacle+0x4a>
		if (index < obstaclesSize) {
 800129e:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <DeleteObstacle+0x64>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	da16      	bge.n	80012d6 <DeleteObstacle+0x4a>
			for (int i = index + 1; i < 5; i++) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3301      	adds	r3, #1
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e00f      	b.n	80012d0 <DeleteObstacle+0x44>
				Obstacles[i - 1] = Obstacles[i];
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	4a0f      	ldr	r2, [pc, #60]	@ (80012f4 <DeleteObstacle+0x68>)
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	18d1      	adds	r1, r2, r3
 80012ba:	4a0e      	ldr	r2, [pc, #56]	@ (80012f4 <DeleteObstacle+0x68>)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	4413      	add	r3, r2
 80012c2:	460c      	mov	r4, r1
 80012c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			for (int i = index + 1; i < 5; i++) {
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3301      	adds	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	ddec      	ble.n	80012b0 <DeleteObstacle+0x24>
			}
		}
	}
	obstaclesCount--;
 80012d6:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <DeleteObstacle+0x60>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	3b01      	subs	r3, #1
 80012dc:	4a03      	ldr	r2, [pc, #12]	@ (80012ec <DeleteObstacle+0x60>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc90      	pop	{r4, r7}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	200004a4 	.word	0x200004a4
 80012f0:	20000000 	.word	0x20000000
 80012f4:	20000454 	.word	0x20000454

080012f8 <CreateRandomObstacle>:
void CreateRandomObstacle() {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
	//podmienić funkcją z stm32
	int randomX = rand() % (maxObstacleDistance - minObstacleDistance + 1) + minObstacleDistance;
 80012fe:	f006 f99f 	bl	8007640 <rand>
 8001302:	4602      	mov	r2, r0
 8001304:	4b21      	ldr	r3, [pc, #132]	@ (800138c <CreateRandomObstacle+0x94>)
 8001306:	6819      	ldr	r1, [r3, #0]
 8001308:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <CreateRandomObstacle+0x98>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	1acb      	subs	r3, r1, r3
 800130e:	3301      	adds	r3, #1
 8001310:	fb92 f1f3 	sdiv	r1, r2, r3
 8001314:	fb01 f303 	mul.w	r3, r1, r3
 8001318:	1ad2      	subs	r2, r2, r3
 800131a:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <CreateRandomObstacle+0x98>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4413      	add	r3, r2
 8001320:	607b      	str	r3, [r7, #4]
	int randomHeight = rand() % (maxObstacleHeight - minObstacleHeight + 1) + minObstacleHeight;
 8001322:	f006 f98d 	bl	8007640 <rand>
 8001326:	4602      	mov	r2, r0
 8001328:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <CreateRandomObstacle+0x9c>)
 800132a:	6819      	ldr	r1, [r3, #0]
 800132c:	4b1a      	ldr	r3, [pc, #104]	@ (8001398 <CreateRandomObstacle+0xa0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	1acb      	subs	r3, r1, r3
 8001332:	3301      	adds	r3, #1
 8001334:	fb92 f1f3 	sdiv	r1, r2, r3
 8001338:	fb01 f303 	mul.w	r3, r1, r3
 800133c:	1ad2      	subs	r2, r2, r3
 800133e:	4b16      	ldr	r3, [pc, #88]	@ (8001398 <CreateRandomObstacle+0xa0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4413      	add	r3, r2
 8001344:	603b      	str	r3, [r7, #0]
	//-------------------------
	if (obstaclesCount > 0) {
 8001346:	4b15      	ldr	r3, [pc, #84]	@ (800139c <CreateRandomObstacle+0xa4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	dd11      	ble.n	8001372 <CreateRandomObstacle+0x7a>
		//CreateObstacle(Obstacles[obstaclesCount - 1].x + randomX, (270 - (randomHeight / 2)), obstacleWidth, randomHeight);
		CreateObstacle(Obstacles[obstaclesCount - 1].x + randomX, (270 - randomHeight ), obstacleWidth, randomHeight);
 800134e:	4b13      	ldr	r3, [pc, #76]	@ (800139c <CreateRandomObstacle+0xa4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	3b01      	subs	r3, #1
 8001354:	4a12      	ldr	r2, [pc, #72]	@ (80013a0 <CreateRandomObstacle+0xa8>)
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	4413      	add	r3, r2
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	18d0      	adds	r0, r2, r3
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	f5c3 7187 	rsb	r1, r3, #270	@ 0x10e
 8001366:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <CreateRandomObstacle+0xac>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	f7ff ff5a 	bl	8001224 <CreateObstacle>
	else {
		//CreateObstacle(250, (270 - (randomHeight / 2)), obstacleWidth, randomHeight);
		CreateObstacle(250, (270 - randomHeight ), obstacleWidth, randomHeight);

	}
}
 8001370:	e008      	b.n	8001384 <CreateRandomObstacle+0x8c>
		CreateObstacle(250, (270 - randomHeight ), obstacleWidth, randomHeight);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	f5c3 7187 	rsb	r1, r3, #270	@ 0x10e
 8001378:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <CreateRandomObstacle+0xac>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	20fa      	movs	r0, #250	@ 0xfa
 8001380:	f7ff ff50 	bl	8001224 <CreateObstacle>
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200004ac 	.word	0x200004ac
 8001390:	200004a8 	.word	0x200004a8
 8001394:	200004b4 	.word	0x200004b4
 8001398:	200004b0 	.word	0x200004b0
 800139c:	200004a4 	.word	0x200004a4
 80013a0:	20000454 	.word	0x20000454
 80013a4:	200004b8 	.word	0x200004b8

080013a8 <DrawObstacles>:
void DrawObstacles(int scroll) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < obstaclesSize; i++) {
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	e036      	b.n	8001424 <DrawObstacles+0x7c>
		if (Obstacles[i].x + scroll + Obstacles[i].width / 2 < 0) {
 80013b6:	4a20      	ldr	r2, [pc, #128]	@ (8001438 <DrawObstacles+0x90>)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	4413      	add	r3, r2
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	441a      	add	r2, r3
 80013c4:	491c      	ldr	r1, [pc, #112]	@ (8001438 <DrawObstacles+0x90>)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	440b      	add	r3, r1
 80013cc:	3308      	adds	r3, #8
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	0fd9      	lsrs	r1, r3, #31
 80013d2:	440b      	add	r3, r1
 80013d4:	105b      	asrs	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	da0c      	bge.n	80013f6 <DrawObstacles+0x4e>
			ClearObjectFromDisplay(Obstacles[i]);
 80013dc:	4a16      	ldr	r2, [pc, #88]	@ (8001438 <DrawObstacles+0x90>)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	011b      	lsls	r3, r3, #4
 80013e2:	4413      	add	r3, r2
 80013e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013e6:	f7ff fe28 	bl	800103a <ClearObjectFromDisplay>
			DeleteObstacle(i);
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f7ff ff4e 	bl	800128c <DeleteObstacle>
			CreateRandomObstacle();
 80013f0:	f7ff ff82 	bl	80012f8 <CreateRandomObstacle>
 80013f4:	e013      	b.n	800141e <DrawObstacles+0x76>
		}
		else {
			updatePosition(&Obstacles[i], Obstacles[i].x + scroll, Obstacles[i].y);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001438 <DrawObstacles+0x90>)
 80013fc:	1898      	adds	r0, r3, r2
 80013fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001438 <DrawObstacles+0x90>)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	4413      	add	r3, r2
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	18d1      	adds	r1, r2, r3
 800140c:	4a0a      	ldr	r2, [pc, #40]	@ (8001438 <DrawObstacles+0x90>)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	011b      	lsls	r3, r3, #4
 8001412:	4413      	add	r3, r2
 8001414:	3304      	adds	r3, #4
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	f7ff fe65 	bl	80010e8 <updatePosition>
	for (int i = 0; i < obstaclesSize; i++) {
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	3301      	adds	r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	4b05      	ldr	r3, [pc, #20]	@ (800143c <DrawObstacles+0x94>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	429a      	cmp	r2, r3
 800142c:	dbc3      	blt.n	80013b6 <DrawObstacles+0xe>
		}
	}
}
 800142e:	bf00      	nop
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000454 	.word	0x20000454
 800143c:	20000000 	.word	0x20000000

08001440 <PlayerInit>:
	struct Object parts[9];
	struct Object useableParts[9];

};

struct Player PlayerInit(int x, int y,int height, int colWidth, int colHeight, int countOfParts ,struct Object parts[]){
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b0d7      	sub	sp, #348	@ 0x15c
 8001444:	af00      	add	r7, sp, #0
 8001446:	f507 74ac 	add.w	r4, r7, #344	@ 0x158
 800144a:	f5a4 74a6 	sub.w	r4, r4, #332	@ 0x14c
 800144e:	6020      	str	r0, [r4, #0]
 8001450:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8001454:	f5a0 70a8 	sub.w	r0, r0, #336	@ 0x150
 8001458:	6001      	str	r1, [r0, #0]
 800145a:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 800145e:	f5a1 71aa 	sub.w	r1, r1, #340	@ 0x154
 8001462:	600a      	str	r2, [r1, #0]
 8001464:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8001468:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800146c:	6013      	str	r3, [r2, #0]
	struct Player player;
	player.x = x;
 800146e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001472:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001476:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800147a:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	601a      	str	r2, [r3, #0]
	player.y = y;
 8001482:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001486:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800148a:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800148e:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	605a      	str	r2, [r3, #4]
	player.jumpY = 0.0;
 8001496:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800149a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
	player.state = 0;
 80014a4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80014a8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
	player.height = height;
 80014b0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80014b4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80014b8:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 80014bc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	611a      	str	r2, [r3, #16]
	player.colWidth = colWidth;
 80014c4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80014c8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80014cc:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 80014d0:	615a      	str	r2, [r3, #20]
	player.colHeight = colHeight;
 80014d2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80014d6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80014da:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80014de:	619a      	str	r2, [r3, #24]
	player.countOfParts = countOfParts;
 80014e0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80014e4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80014e8:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80014ec:	61da      	str	r2, [r3, #28]
	for(int i =0; i<countOfParts; i++){
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80014f4:	e018      	b.n	8001528 <PlayerInit+0xe8>
		player.parts[i] = parts[i];
 80014f6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001500:	18d1      	adds	r1, r2, r3
 8001502:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001506:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 800150a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800150e:	3302      	adds	r3, #2
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	4413      	add	r3, r2
 8001514:	461c      	mov	r4, r3
 8001516:	460b      	mov	r3, r1
 8001518:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800151a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(int i =0; i<countOfParts; i++){
 800151e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001522:	3301      	adds	r3, #1
 8001524:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001528:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 800152c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001530:	429a      	cmp	r2, r3
 8001532:	dbe0      	blt.n	80014f6 <PlayerInit+0xb6>
	}
	for(int i =0; i<countOfParts; i++){
 8001534:	2300      	movs	r3, #0
 8001536:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800153a:	e018      	b.n	800156e <PlayerInit+0x12e>
			player.useableParts[i] = parts[i];
 800153c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001540:	011b      	lsls	r3, r3, #4
 8001542:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001546:	18d1      	adds	r1, r2, r3
 8001548:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800154c:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 8001550:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001554:	330b      	adds	r3, #11
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	4413      	add	r3, r2
 800155a:	461c      	mov	r4, r3
 800155c:	460b      	mov	r3, r1
 800155e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001560:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(int i =0; i<countOfParts; i++){
 8001564:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001568:	3301      	adds	r3, #1
 800156a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800156e:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8001572:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001576:	429a      	cmp	r2, r3
 8001578:	dbe0      	blt.n	800153c <PlayerInit+0xfc>
		}
	return player;
 800157a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800157e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001588:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001594:	461a      	mov	r2, r3
 8001596:	f007 f8a2 	bl	80086de <memcpy>
}
 800159a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800159e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd90      	pop	{r4, r7, pc}

080015ac <updatePlayerPosition>:
struct Player player;
void updatePlayerPosition(int index) {
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

	ClearObjectFromDisplay(player.useableParts[index]);
 80015b4:	4a27      	ldr	r2, [pc, #156]	@ (8001654 <updatePlayerPosition+0xa8>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	330b      	adds	r3, #11
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	4413      	add	r3, r2
 80015be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015c0:	f7ff fd3b 	bl	800103a <ClearObjectFromDisplay>
	player.useableParts[index].x = player.parts[index].x + player.x;
 80015c4:	4a23      	ldr	r2, [pc, #140]	@ (8001654 <updatePlayerPosition+0xa8>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3302      	adds	r3, #2
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	4413      	add	r3, r2
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b20      	ldr	r3, [pc, #128]	@ (8001654 <updatePlayerPosition+0xa8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	441a      	add	r2, r3
 80015d6:	491f      	ldr	r1, [pc, #124]	@ (8001654 <updatePlayerPosition+0xa8>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	330b      	adds	r3, #11
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	440b      	add	r3, r1
 80015e0:	601a      	str	r2, [r3, #0]
	player.useableParts[index].y = player.parts[index].y + player.y;
 80015e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001654 <updatePlayerPosition+0xa8>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3302      	adds	r3, #2
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	4413      	add	r3, r2
 80015ec:	3304      	adds	r3, #4
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b18      	ldr	r3, [pc, #96]	@ (8001654 <updatePlayerPosition+0xa8>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	441a      	add	r2, r3
 80015f6:	4917      	ldr	r1, [pc, #92]	@ (8001654 <updatePlayerPosition+0xa8>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	330b      	adds	r3, #11
 80015fc:	011b      	lsls	r3, r3, #4
 80015fe:	440b      	add	r3, r1
 8001600:	3304      	adds	r3, #4
 8001602:	601a      	str	r2, [r3, #0]
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f001 feb2 	bl	8003370 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(player.useableParts[index].x, player.useableParts[index].y, player.useableParts[index].width, player.useableParts[index].height);
 800160c:	4a11      	ldr	r2, [pc, #68]	@ (8001654 <updatePlayerPosition+0xa8>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	330b      	adds	r3, #11
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	4413      	add	r3, r2
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	b298      	uxth	r0, r3
 800161a:	4a0e      	ldr	r2, [pc, #56]	@ (8001654 <updatePlayerPosition+0xa8>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	330b      	adds	r3, #11
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	4413      	add	r3, r2
 8001624:	3304      	adds	r3, #4
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	b299      	uxth	r1, r3
 800162a:	4a0a      	ldr	r2, [pc, #40]	@ (8001654 <updatePlayerPosition+0xa8>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	4413      	add	r3, r2
 8001632:	33b8      	adds	r3, #184	@ 0xb8
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	b29a      	uxth	r2, r3
 8001638:	4c06      	ldr	r4, [pc, #24]	@ (8001654 <updatePlayerPosition+0xa8>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	011b      	lsls	r3, r3, #4
 800163e:	4423      	add	r3, r4
 8001640:	33bc      	adds	r3, #188	@ 0xbc
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	b29b      	uxth	r3, r3
 8001646:	f002 f81d 	bl	8003684 <BSP_LCD_FillRect>

}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bd90      	pop	{r4, r7, pc}
 8001652:	bf00      	nop
 8001654:	200004bc 	.word	0x200004bc

08001658 <DrawPlayer>:
void DrawPlayer(int inY){
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	player.y = inY;
 8001660:	4a0a      	ldr	r2, [pc, #40]	@ (800168c <DrawPlayer+0x34>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6053      	str	r3, [r2, #4]
	for(int i =0;i<player.countOfParts; i++){
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	e005      	b.n	8001678 <DrawPlayer+0x20>
		updatePlayerPosition(i);
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f7ff ff9d 	bl	80015ac <updatePlayerPosition>
	for(int i =0;i<player.countOfParts; i++){
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3301      	adds	r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	4b04      	ldr	r3, [pc, #16]	@ (800168c <DrawPlayer+0x34>)
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	429a      	cmp	r2, r3
 8001680:	dbf4      	blt.n	800166c <DrawPlayer+0x14>
	}
}
 8001682:	bf00      	nop
 8001684:	bf00      	nop
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200004bc 	.word	0x200004bc

08001690 <PlayerJump>:
void startPlayerJump(){
	player.state = 1;
}
void PlayerJump(int minY, int maxY, float Ystep){
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(player.state == 1){
 800169e:	4b28      	ldr	r3, [pc, #160]	@ (8001740 <PlayerJump+0xb0>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d122      	bne.n	80016ec <PlayerJump+0x5c>
		//unoszenie

		if(player.y  <= maxY){
 80016a6:	4b26      	ldr	r3, [pc, #152]	@ (8001740 <PlayerJump+0xb0>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	db10      	blt.n	80016d2 <PlayerJump+0x42>
			player.state = -1; // zaczyna spadać
 80016b0:	4b23      	ldr	r3, [pc, #140]	@ (8001740 <PlayerJump+0xb0>)
 80016b2:	f04f 32ff 	mov.w	r2, #4294967295
 80016b6:	60da      	str	r2, [r3, #12]
			DrawPlayer(player.y + (int)(Ystep));
 80016b8:	4b21      	ldr	r3, [pc, #132]	@ (8001740 <PlayerJump+0xb0>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80016c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016c4:	ee17 2a90 	vmov	r2, s15
 80016c8:	4413      	add	r3, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ffc4 	bl	8001658 <DrawPlayer>
			DrawPlayer(player.y + (int)(Ystep));
		}
	} else{
		DrawPlayer(minY);
	}
}
 80016d0:	e032      	b.n	8001738 <PlayerJump+0xa8>
			DrawPlayer(player.y - (int)(Ystep));
 80016d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <PlayerJump+0xb0>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016de:	ee17 2a90 	vmov	r2, s15
 80016e2:	1a9b      	subs	r3, r3, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ffb7 	bl	8001658 <DrawPlayer>
}
 80016ea:	e025      	b.n	8001738 <PlayerJump+0xa8>
	}else if(player.state == -1){
 80016ec:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <PlayerJump+0xb0>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f4:	d11d      	bne.n	8001732 <PlayerJump+0xa2>
		if(player.y >= minY-5){
 80016f6:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <PlayerJump+0xb0>)
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3b05      	subs	r3, #5
 80016fe:	429a      	cmp	r2, r3
 8001700:	db0a      	blt.n	8001718 <PlayerJump+0x88>
			player.state = 0; // koniec skoku
 8001702:	4b0f      	ldr	r3, [pc, #60]	@ (8001740 <PlayerJump+0xb0>)
 8001704:	2200      	movs	r2, #0
 8001706:	60da      	str	r2, [r3, #12]
			DrawPlayer(minY);
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f7ff ffa5 	bl	8001658 <DrawPlayer>
			player.jumpY = 0.0;
 800170e:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <PlayerJump+0xb0>)
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
}
 8001716:	e00f      	b.n	8001738 <PlayerJump+0xa8>
			DrawPlayer(player.y + (int)(Ystep));
 8001718:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <PlayerJump+0xb0>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001724:	ee17 2a90 	vmov	r2, s15
 8001728:	4413      	add	r3, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ff94 	bl	8001658 <DrawPlayer>
}
 8001730:	e002      	b.n	8001738 <PlayerJump+0xa8>
		DrawPlayer(minY);
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f7ff ff90 	bl	8001658 <DrawPlayer>
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200004bc 	.word	0x200004bc

08001744 <GameInit>:
float yStep;
int maxJumpHeight;
void GameInit() {
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	f5ad 7d33 	sub.w	sp, sp, #716	@ 0x2cc
 800174a:	af04      	add	r7, sp, #16
	//podłoga
	struct Object F0 = ObjectInit(220, 290, 10, 10);
 800174c:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8001750:	230a      	movs	r3, #10
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	230a      	movs	r3, #10
 8001756:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800175a:	21dc      	movs	r1, #220	@ 0xdc
 800175c:	f7ff fc52 	bl	8001004 <ObjectInit>
	struct Object F1 = ObjectInit(160, 300, 8, 12);
 8001760:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8001764:	230c      	movs	r3, #12
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2308      	movs	r3, #8
 800176a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800176e:	21a0      	movs	r1, #160	@ 0xa0
 8001770:	f7ff fc48 	bl	8001004 <ObjectInit>
	struct Object F2 = ObjectInit(130, 280, 20, 5);
 8001774:	f507 7021 	add.w	r0, r7, #644	@ 0x284
 8001778:	2305      	movs	r3, #5
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2314      	movs	r3, #20
 800177e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8001782:	2182      	movs	r1, #130	@ 0x82
 8001784:	f7ff fc3e 	bl	8001004 <ObjectInit>
	struct Object F3 = ObjectInit(80, 310, 10, 15);
 8001788:	f507 701d 	add.w	r0, r7, #628	@ 0x274
 800178c:	230f      	movs	r3, #15
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	230a      	movs	r3, #10
 8001792:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8001796:	2150      	movs	r1, #80	@ 0x50
 8001798:	f7ff fc34 	bl	8001004 <ObjectInit>
	struct Object F4 = ObjectInit(20, 285, 8, 6);
 800179c:	f507 7019 	add.w	r0, r7, #612	@ 0x264
 80017a0:	2306      	movs	r3, #6
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	2308      	movs	r3, #8
 80017a6:	f240 121d 	movw	r2, #285	@ 0x11d
 80017aa:	2114      	movs	r1, #20
 80017ac:	f7ff fc2a 	bl	8001004 <ObjectInit>
	FloorObjects[0] = F0;
 80017b0:	4b98      	ldr	r3, [pc, #608]	@ (8001a14 <GameInit+0x2d0>)
 80017b2:	461c      	mov	r4, r3
 80017b4:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 80017b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	FloorObjects[1] = F1;
 80017be:	4b95      	ldr	r3, [pc, #596]	@ (8001a14 <GameInit+0x2d0>)
 80017c0:	f103 0410 	add.w	r4, r3, #16
 80017c4:	f507 7325 	add.w	r3, r7, #660	@ 0x294
 80017c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	FloorObjects[2] = F2;
 80017ce:	4b91      	ldr	r3, [pc, #580]	@ (8001a14 <GameInit+0x2d0>)
 80017d0:	f103 0420 	add.w	r4, r3, #32
 80017d4:	f507 7321 	add.w	r3, r7, #644	@ 0x284
 80017d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	FloorObjects[3] = F3;
 80017de:	4b8d      	ldr	r3, [pc, #564]	@ (8001a14 <GameInit+0x2d0>)
 80017e0:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 80017e4:	f507 731d 	add.w	r3, r7, #628	@ 0x274
 80017e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	FloorObjects[4] = F4;
 80017ee:	4b89      	ldr	r3, [pc, #548]	@ (8001a14 <GameInit+0x2d0>)
 80017f0:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80017f4:	f507 7319 	add.w	r3, r7, #612	@ 0x264
 80017f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//end podłoga

	//przeszkody
	minObstacleDistance = 70;
 80017fe:	4b86      	ldr	r3, [pc, #536]	@ (8001a18 <GameInit+0x2d4>)
 8001800:	2246      	movs	r2, #70	@ 0x46
 8001802:	601a      	str	r2, [r3, #0]
	maxObstacleDistance = 240;
 8001804:	4b85      	ldr	r3, [pc, #532]	@ (8001a1c <GameInit+0x2d8>)
 8001806:	22f0      	movs	r2, #240	@ 0xf0
 8001808:	601a      	str	r2, [r3, #0]
	obstacleWidth = 5;
 800180a:	4b85      	ldr	r3, [pc, #532]	@ (8001a20 <GameInit+0x2dc>)
 800180c:	2205      	movs	r2, #5
 800180e:	601a      	str	r2, [r3, #0]
	minObstacleHeight = 30;
 8001810:	4b84      	ldr	r3, [pc, #528]	@ (8001a24 <GameInit+0x2e0>)
 8001812:	221e      	movs	r2, #30
 8001814:	601a      	str	r2, [r3, #0]
	maxObstacleHeight = 70;
 8001816:	4b84      	ldr	r3, [pc, #528]	@ (8001a28 <GameInit+0x2e4>)
 8001818:	2246      	movs	r2, #70	@ 0x46
 800181a:	601a      	str	r2, [r3, #0]
	obstaclesCount = 0;
 800181c:	4b83      	ldr	r3, [pc, #524]	@ (8001a2c <GameInit+0x2e8>)
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < obstaclesSize; i++) {
 8001822:	2300      	movs	r3, #0
 8001824:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8001828:	e006      	b.n	8001838 <GameInit+0xf4>
		CreateRandomObstacle();
 800182a:	f7ff fd65 	bl	80012f8 <CreateRandomObstacle>
	for (int i = 0; i < obstaclesSize; i++) {
 800182e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8001832:	3301      	adds	r3, #1
 8001834:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8001838:	4b7d      	ldr	r3, [pc, #500]	@ (8001a30 <GameInit+0x2ec>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8001840:	429a      	cmp	r2, r3
 8001842:	dbf2      	blt.n	800182a <GameInit+0xe6>
	//end przeszkody

	//gracz:
	struct Object playerParts[9];

	struct Object P1 = ObjectInit(2,0,20,20);
 8001844:	f507 70e2 	add.w	r0, r7, #452	@ 0x1c4
 8001848:	2314      	movs	r3, #20
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2314      	movs	r3, #20
 800184e:	2200      	movs	r2, #0
 8001850:	2102      	movs	r1, #2
 8001852:	f7ff fbd7 	bl	8001004 <ObjectInit>
	struct Object P2 = ObjectInit(8,20,8,6);
 8001856:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800185a:	f5a3 7082 	sub.w	r0, r3, #260	@ 0x104
 800185e:	2306      	movs	r3, #6
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	2308      	movs	r3, #8
 8001864:	2214      	movs	r2, #20
 8001866:	2108      	movs	r1, #8
 8001868:	f7ff fbcc 	bl	8001004 <ObjectInit>
	struct Object P3 = ObjectInit(0,26,24,35);
 800186c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001870:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8001874:	2323      	movs	r3, #35	@ 0x23
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2318      	movs	r3, #24
 800187a:	221a      	movs	r2, #26
 800187c:	2100      	movs	r1, #0
 800187e:	f7ff fbc1 	bl	8001004 <ObjectInit>
	struct Object P4 = ObjectInit(0,61,8,30);
 8001882:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001886:	f5a3 7092 	sub.w	r0, r3, #292	@ 0x124
 800188a:	231e      	movs	r3, #30
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	2308      	movs	r3, #8
 8001890:	223d      	movs	r2, #61	@ 0x3d
 8001892:	2100      	movs	r1, #0
 8001894:	f7ff fbb6 	bl	8001004 <ObjectInit>
	struct Object P5 = ObjectInit(16,61,8,30);
 8001898:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800189c:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 80018a0:	231e      	movs	r3, #30
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2308      	movs	r3, #8
 80018a6:	223d      	movs	r2, #61	@ 0x3d
 80018a8:	2110      	movs	r1, #16
 80018aa:	f7ff fbab 	bl	8001004 <ObjectInit>
	struct Object P6 = ObjectInit(-8,26,8,6);
 80018ae:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80018b2:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 80018b6:	2306      	movs	r3, #6
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2308      	movs	r3, #8
 80018bc:	221a      	movs	r2, #26
 80018be:	f06f 0107 	mvn.w	r1, #7
 80018c2:	f7ff fb9f 	bl	8001004 <ObjectInit>
	struct Object P7 = ObjectInit(24,26,8,6);
 80018c6:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80018ca:	f5a3 70aa 	sub.w	r0, r3, #340	@ 0x154
 80018ce:	2306      	movs	r3, #6
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	2308      	movs	r3, #8
 80018d4:	221a      	movs	r2, #26
 80018d6:	2118      	movs	r1, #24
 80018d8:	f7ff fb94 	bl	8001004 <ObjectInit>
	struct Object P8 = ObjectInit(-8,32,6,29);
 80018dc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80018e0:	f5a3 70b2 	sub.w	r0, r3, #356	@ 0x164
 80018e4:	231d      	movs	r3, #29
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2306      	movs	r3, #6
 80018ea:	2220      	movs	r2, #32
 80018ec:	f06f 0107 	mvn.w	r1, #7
 80018f0:	f7ff fb88 	bl	8001004 <ObjectInit>
	struct Object P9 = ObjectInit(26,32,6,29);
 80018f4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80018f8:	f5a3 70ba 	sub.w	r0, r3, #372	@ 0x174
 80018fc:	231d      	movs	r3, #29
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2306      	movs	r3, #6
 8001902:	2220      	movs	r2, #32
 8001904:	211a      	movs	r1, #26
 8001906:	f7ff fb7d 	bl	8001004 <ObjectInit>
	playerParts[0] = P1;
 800190a:	f507 74ea 	add.w	r4, r7, #468	@ 0x1d4
 800190e:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 8001912:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001914:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	playerParts[1] = P2;
 8001918:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800191c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001920:	f507 74f2 	add.w	r4, r7, #484	@ 0x1e4
 8001924:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001926:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	playerParts[2] = P3;
 800192a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800192e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001932:	f507 74fa 	add.w	r4, r7, #500	@ 0x1f4
 8001936:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001938:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	playerParts[3] = P4;
 800193c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001940:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001944:	f507 7401 	add.w	r4, r7, #516	@ 0x204
 8001948:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800194a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	playerParts[4] = P5;
 800194e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001952:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001956:	f507 7405 	add.w	r4, r7, #532	@ 0x214
 800195a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800195c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	playerParts[5] = P6;
 8001960:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001964:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001968:	f507 7409 	add.w	r4, r7, #548	@ 0x224
 800196c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800196e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	playerParts[6] = P7;
 8001972:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001976:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800197a:	f507 740d 	add.w	r4, r7, #564	@ 0x234
 800197e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001980:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	playerParts[7] = P8;
 8001984:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001988:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800198c:	f507 7411 	add.w	r4, r7, #580	@ 0x244
 8001990:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001992:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	playerParts[8] = P9;
 8001996:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800199a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800199e:	f507 7415 	add.w	r4, r7, #596	@ 0x254
 80019a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	//player = PlayerInit(80,179, 91, 24, 76, 9,playerParts);

	player = PlayerInit(80,179, 91, 24, 76, 9,playerParts);
 80019a8:	4c22      	ldr	r4, [pc, #136]	@ (8001a34 <GameInit+0x2f0>)
 80019aa:	4638      	mov	r0, r7
 80019ac:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 80019b0:	9303      	str	r3, [sp, #12]
 80019b2:	2309      	movs	r3, #9
 80019b4:	9302      	str	r3, [sp, #8]
 80019b6:	234c      	movs	r3, #76	@ 0x4c
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	2318      	movs	r3, #24
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	235b      	movs	r3, #91	@ 0x5b
 80019c0:	22b3      	movs	r2, #179	@ 0xb3
 80019c2:	2150      	movs	r1, #80	@ 0x50
 80019c4:	f7ff fd3c 	bl	8001440 <PlayerInit>
 80019c8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80019cc:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 80019d0:	4620      	mov	r0, r4
 80019d2:	4619      	mov	r1, r3
 80019d4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80019d8:	461a      	mov	r2, r3
 80019da:	f006 fe80 	bl	80086de <memcpy>
	maxJumpHeight = maxObstacleHeight + 30;
 80019de:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <GameInit+0x2e4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	331e      	adds	r3, #30
 80019e4:	4a14      	ldr	r2, [pc, #80]	@ (8001a38 <GameInit+0x2f4>)
 80019e6:	6013      	str	r3, [r2, #0]
	yStep = maxJumpHeight/(minObstacleDistance/2); // maxJumpHeight / minimum distance to jump carefully;
 80019e8:	4b13      	ldr	r3, [pc, #76]	@ (8001a38 <GameInit+0x2f4>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001a18 <GameInit+0x2d4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	0fd9      	lsrs	r1, r3, #31
 80019f2:	440b      	add	r3, r1
 80019f4:	105b      	asrs	r3, r3, #1
 80019f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80019fa:	ee07 3a90 	vmov	s15, r3
 80019fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a02:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <GameInit+0x2f8>)
 8001a04:	edc3 7a00 	vstr	s15, [r3]
}
 8001a08:	bf00      	nop
 8001a0a:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd90      	pop	{r4, r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000404 	.word	0x20000404
 8001a18:	200004a8 	.word	0x200004a8
 8001a1c:	200004ac 	.word	0x200004ac
 8001a20:	200004b8 	.word	0x200004b8
 8001a24:	200004b0 	.word	0x200004b0
 8001a28:	200004b4 	.word	0x200004b4
 8001a2c:	200004a4 	.word	0x200004a4
 8001a30:	20000000 	.word	0x20000000
 8001a34:	200004bc 	.word	0x200004bc
 8001a38:	20000600 	.word	0x20000600
 8001a3c:	200005fc 	.word	0x200005fc

08001a40 <checkCollision>:

int checkCollision(){
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af04      	add	r7, sp, #16
	for(int i = 0; i<obstaclesCount; i++){
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	e02f      	b.n	8001aac <checkCollision+0x6c>
		if(Obstacles[i].x > player.x + player.colWidth+1){
 8001a4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac0 <checkCollision+0x80>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	4413      	add	r3, r2
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <checkCollision+0x84>)
 8001a58:	6819      	ldr	r1, [r3, #0]
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac4 <checkCollision+0x84>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	440b      	add	r3, r1
 8001a60:	3301      	adds	r3, #1
 8001a62:	429a      	cmp	r2, r3
 8001a64:	dd01      	ble.n	8001a6a <checkCollision+0x2a>
			return 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e026      	b.n	8001ab8 <checkCollision+0x78>
		} else{
			if(checkIfObjectOnArea(Obstacles[i], player.x, player.x+player.colWidth, player.y, player.y + player.colHeight)){
 8001a6a:	4b16      	ldr	r3, [pc, #88]	@ (8001ac4 <checkCollision+0x84>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ac4 <checkCollision+0x84>)
 8001a70:	6819      	ldr	r1, [r3, #0]
 8001a72:	4b14      	ldr	r3, [pc, #80]	@ (8001ac4 <checkCollision+0x84>)
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	4419      	add	r1, r3
 8001a78:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <checkCollision+0x84>)
 8001a7a:	6858      	ldr	r0, [r3, #4]
 8001a7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <checkCollision+0x84>)
 8001a7e:	685c      	ldr	r4, [r3, #4]
 8001a80:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <checkCollision+0x84>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	441c      	add	r4, r3
 8001a86:	4d0e      	ldr	r5, [pc, #56]	@ (8001ac0 <checkCollision+0x80>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	442b      	add	r3, r5
 8001a8e:	9403      	str	r4, [sp, #12]
 8001a90:	9002      	str	r0, [sp, #8]
 8001a92:	9101      	str	r1, [sp, #4]
 8001a94:	9200      	str	r2, [sp, #0]
 8001a96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a98:	f7ff fae7 	bl	800106a <checkIfObjectOnArea>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <checkCollision+0x66>
				return 1;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e008      	b.n	8001ab8 <checkCollision+0x78>
	for(int i = 0; i<obstaclesCount; i++){
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <checkCollision+0x88>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	dbca      	blt.n	8001a4c <checkCollision+0xc>
			}
		}
	}
	return 0;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bdb0      	pop	{r4, r5, r7, pc}
 8001ac0:	20000454 	.word	0x20000454
 8001ac4:	200004bc 	.word	0x200004bc
 8001ac8:	200004a4 	.word	0x200004a4

08001acc <DrawScore>:
void DrawScore(int score){
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b09c      	sub	sp, #112	@ 0x70
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001ad4:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001ad8:	f001 fc4a 	bl	8003370 <BSP_LCD_SetTextColor>
	char str[100];
	sprintf(str, "score: %d", score);
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	4907      	ldr	r1, [pc, #28]	@ (8001b00 <DrawScore+0x34>)
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f006 fd17 	bl	8008518 <siprintf>
	BSP_LCD_DisplayStringAtLine(0, (uint8_t*)&str);
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	4619      	mov	r1, r3
 8001af0:	2000      	movs	r0, #0
 8001af2:	f001 fdaf 	bl	8003654 <BSP_LCD_DisplayStringAtLine>
}
 8001af6:	bf00      	nop
 8001af8:	3770      	adds	r7, #112	@ 0x70
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	0800bda8 	.word	0x0800bda8

08001b04 <DrawEndScreen>:
void DrawEndScreen(int score, int* HighScore){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b0e6      	sub	sp, #408	@ 0x198
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8001b0e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001b12:	6018      	str	r0, [r3, #0]
 8001b14:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8001b18:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001b1c:	6019      	str	r1, [r3, #0]
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001b1e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001b22:	f001 fc25 	bl	8003370 <BSP_LCD_SetTextColor>
	char str0[100];
	sprintf(str0, "Congratulations!");
 8001b26:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001b2a:	4931      	ldr	r1, [pc, #196]	@ (8001bf0 <DrawEndScreen+0xec>)
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f006 fcf3 	bl	8008518 <siprintf>
	BSP_LCD_DisplayStringAtLine(4,(uint8_t*)&str0);
 8001b32:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001b36:	4619      	mov	r1, r3
 8001b38:	2004      	movs	r0, #4
 8001b3a:	f001 fd8b 	bl	8003654 <BSP_LCD_DisplayStringAtLine>
	char str1[100];
	sprintf(str1, "Your score: %d", score);
 8001b3e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8001b42:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001b46:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4929      	ldr	r1, [pc, #164]	@ (8001bf4 <DrawEndScreen+0xf0>)
 8001b4e:	f006 fce3 	bl	8008518 <siprintf>
	BSP_LCD_DisplayStringAtLine(4, (uint8_t*)&str1);
 8001b52:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001b56:	4619      	mov	r1, r3
 8001b58:	2004      	movs	r0, #4
 8001b5a:	f001 fd7b 	bl	8003654 <BSP_LCD_DisplayStringAtLine>
	if(score > *HighScore){
 8001b5e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8001b62:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 8001b6e:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	dd17      	ble.n	8001ba8 <DrawEndScreen+0xa4>
		char str2[100];
		sprintf(str2,"You've just set new High Score!");
 8001b78:	f107 0308 	add.w	r3, r7, #8
 8001b7c:	491e      	ldr	r1, [pc, #120]	@ (8001bf8 <DrawEndScreen+0xf4>)
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f006 fcca 	bl	8008518 <siprintf>
		BSP_LCD_DisplayStringAtLine( 6, (uint8_t*)&str2);
 8001b84:	f107 0308 	add.w	r3, r7, #8
 8001b88:	4619      	mov	r1, r3
 8001b8a:	2006      	movs	r0, #6
 8001b8c:	f001 fd62 	bl	8003654 <BSP_LCD_DisplayStringAtLine>
		*HighScore = score;
 8001b90:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8001b94:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 8001b9e:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	e011      	b.n	8001bcc <DrawEndScreen+0xc8>
	} else{
		char str2[100];
		sprintf(str2,"High Score!:%d", *HighScore);
 8001ba8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8001bac:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	f107 0308 	add.w	r3, r7, #8
 8001bb8:	4910      	ldr	r1, [pc, #64]	@ (8001bfc <DrawEndScreen+0xf8>)
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f006 fcac 	bl	8008518 <siprintf>
		BSP_LCD_DisplayStringAtLine(6, (uint8_t*)&str2);
 8001bc0:	f107 0308 	add.w	r3, r7, #8
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	2006      	movs	r0, #6
 8001bc8:	f001 fd44 	bl	8003654 <BSP_LCD_DisplayStringAtLine>
	}
	char str3[100];
	sprintf(str3,"Click the button to play again.");
 8001bcc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001bd0:	490b      	ldr	r1, [pc, #44]	@ (8001c00 <DrawEndScreen+0xfc>)
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f006 fca0 	bl	8008518 <siprintf>
	BSP_LCD_DisplayStringAtLine(8, (uint8_t*)&str3);
 8001bd8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001bdc:	4619      	mov	r1, r3
 8001bde:	2008      	movs	r0, #8
 8001be0:	f001 fd38 	bl	8003654 <BSP_LCD_DisplayStringAtLine>
}
 8001be4:	bf00      	nop
 8001be6:	f507 77cc 	add.w	r7, r7, #408	@ 0x198
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	0800bdb4 	.word	0x0800bdb4
 8001bf4:	0800bdc8 	.word	0x0800bdc8
 8001bf8:	0800bdd8 	.word	0x0800bdd8
 8001bfc:	0800bdf8 	.word	0x0800bdf8
 8001c00:	0800be08 	.word	0x0800be08

08001c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c0a:	f002 f94d 	bl	8003ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c0e:	f000 f89b 	bl	8001d48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c12:	f000 fab1 	bl	8002178 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8001c16:	f000 f907 	bl	8001e28 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001c1a:	f000 fa5f 	bl	80020dc <MX_FMC_Init>
  MX_I2C3_Init();
 8001c1e:	f000 f935 	bl	8001e8c <MX_I2C3_Init>
  MX_LTDC_Init();
 8001c22:	f000 f973 	bl	8001f0c <MX_LTDC_Init>
  MX_SPI5_Init();
 8001c26:	f000 fa23 	bl	8002070 <MX_SPI5_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  BSP_LCD_Init();
 8001c2a:	f001 fabb 	bl	80031a4 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 8001c2e:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8001c32:	2000      	movs	r0, #0
 8001c34:	f001 fb38 	bl	80032a8 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001c38:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001c3c:	f001 fbe0 	bl	8003400 <BSP_LCD_Clear>
    GameInit();
 8001c40:	f7ff fd80 	bl	8001744 <GameInit>
      int maxScore = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	607b      	str	r3, [r7, #4]
      int score = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
      int scroll = -1;
 8001c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c50:	60fb      	str	r3, [r7, #12]
      int delay = 50;
 8001c52:	2332      	movs	r3, #50	@ 0x32
 8001c54:	60bb      	str	r3, [r7, #8]
      int gameOn = 1;
 8001c56:	2301      	movs	r3, #1
 8001c58:	613b      	str	r3, [r7, #16]
      player.state = 0;
 8001c5a:	4b36      	ldr	r3, [pc, #216]	@ (8001d34 <main+0x130>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	60da      	str	r2, [r3, #12]
  while (1)
  {
	  if(gameOn){
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d042      	beq.n	8001cec <main+0xe8>
	  		  DrawFloor(scroll);
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f7ff fa7c 	bl	8001164 <DrawFloor>
	  		  DrawObstacles(scroll);
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f7ff fb9b 	bl	80013a8 <DrawObstacles>
	  		  // when button is clicked
	  		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET  ){
 8001c72:	2101      	movs	r1, #1
 8001c74:	4830      	ldr	r0, [pc, #192]	@ (8001d38 <main+0x134>)
 8001c76:	f003 f9c1 	bl	8004ffc <HAL_GPIO_ReadPin>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d10b      	bne.n	8001c98 <main+0x94>
	  			  if(player.state == 0){
 8001c80:	4b2c      	ldr	r3, [pc, #176]	@ (8001d34 <main+0x130>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d107      	bne.n	8001c98 <main+0x94>
	  				  player.state = 1;
 8001c88:	4b2a      	ldr	r3, [pc, #168]	@ (8001d34 <main+0x130>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	60da      	str	r2, [r3, #12]
	  				HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8001c8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c92:	482a      	ldr	r0, [pc, #168]	@ (8001d3c <main+0x138>)
 8001c94:	f003 f9e3 	bl	800505e <HAL_GPIO_TogglePin>
	  			  }
	  			  // zgaszenie diody
	  		  }
	  		  //--------------
	  		  PlayerJump(270-player.height, 270-(maxJumpHeight+player.height), yStep);
 8001c98:	4b26      	ldr	r3, [pc, #152]	@ (8001d34 <main+0x130>)
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	f5c3 7087 	rsb	r0, r3, #270	@ 0x10e
 8001ca0:	4b24      	ldr	r3, [pc, #144]	@ (8001d34 <main+0x130>)
 8001ca2:	691a      	ldr	r2, [r3, #16]
 8001ca4:	4b26      	ldr	r3, [pc, #152]	@ (8001d40 <main+0x13c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4413      	add	r3, r2
 8001caa:	f5c3 7387 	rsb	r3, r3, #270	@ 0x10e
 8001cae:	4a25      	ldr	r2, [pc, #148]	@ (8001d44 <main+0x140>)
 8001cb0:	edd2 7a00 	vldr	s15, [r2]
 8001cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f7ff fce9 	bl	8001690 <PlayerJump>
	  		  //PlayerJump(270, 270-(maxJumpHeight+player.height), 50);
	  		  if(checkCollision()){
 8001cbe:	f7ff febf 	bl	8001a40 <checkCollision>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d006      	beq.n	8001cd6 <main+0xd2>
	  			  gameOn = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	613b      	str	r3, [r7, #16]
	  			  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd0:	f001 fb96 	bl	8003400 <BSP_LCD_Clear>
 8001cd4:	e002      	b.n	8001cdc <main+0xd8>
	  		  }else{
	  			  score = score + 1;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
	  		  }
	  		  //----------------
	  		  DrawScore(score);
 8001cdc:	6978      	ldr	r0, [r7, #20]
 8001cde:	f7ff fef5 	bl	8001acc <DrawScore>
	  		  HAL_Delay(delay);
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f002 f951 	bl	8003f8c <HAL_Delay>
 8001cea:	e7b9      	b.n	8001c60 <main+0x5c>
	  	  } else {
	  		  DrawEndScreen(score, &maxScore);
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	4619      	mov	r1, r3
 8001cf0:	6978      	ldr	r0, [r7, #20]
 8001cf2:	f7ff ff07 	bl	8001b04 <DrawEndScreen>
	  		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){}
 8001cf6:	bf00      	nop
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	480f      	ldr	r0, [pc, #60]	@ (8001d38 <main+0x134>)
 8001cfc:	f003 f97e 	bl	8004ffc <HAL_GPIO_ReadPin>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f8      	beq.n	8001cf8 <main+0xf4>
	  		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8001d06:	2101      	movs	r1, #1
 8001d08:	480b      	ldr	r0, [pc, #44]	@ (8001d38 <main+0x134>)
 8001d0a:	f003 f977 	bl	8004ffc <HAL_GPIO_ReadPin>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d1a5      	bne.n	8001c60 <main+0x5c>
	  			  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001d14:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001d18:	f001 fb72 	bl	8003400 <BSP_LCD_Clear>
	  			  gameOn = 1;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	613b      	str	r3, [r7, #16]
	  			  GameInit();
 8001d20:	f7ff fd10 	bl	8001744 <GameInit>
	  			  score = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
	  			  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);// zgaszenie diody
 8001d28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d2c:	4803      	ldr	r0, [pc, #12]	@ (8001d3c <main+0x138>)
 8001d2e:	f003 f996 	bl	800505e <HAL_GPIO_TogglePin>
	  if(gameOn){
 8001d32:	e795      	b.n	8001c60 <main+0x5c>
 8001d34:	200004bc 	.word	0x200004bc
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	40021800 	.word	0x40021800
 8001d40:	20000600 	.word	0x20000600
 8001d44:	200005fc 	.word	0x200005fc

08001d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b094      	sub	sp, #80	@ 0x50
 8001d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d4e:	f107 0320 	add.w	r3, r7, #32
 8001d52:	2230      	movs	r2, #48	@ 0x30
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f006 fc41 	bl	80085de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d5c:	f107 030c 	add.w	r3, r7, #12
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	4b2b      	ldr	r3, [pc, #172]	@ (8001e20 <SystemClock_Config+0xd8>)
 8001d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d74:	4a2a      	ldr	r2, [pc, #168]	@ (8001e20 <SystemClock_Config+0xd8>)
 8001d76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d7c:	4b28      	ldr	r3, [pc, #160]	@ (8001e20 <SystemClock_Config+0xd8>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d88:	2300      	movs	r3, #0
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	4b25      	ldr	r3, [pc, #148]	@ (8001e24 <SystemClock_Config+0xdc>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a24      	ldr	r2, [pc, #144]	@ (8001e24 <SystemClock_Config+0xdc>)
 8001d92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	4b22      	ldr	r3, [pc, #136]	@ (8001e24 <SystemClock_Config+0xdc>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001da4:	2301      	movs	r3, #1
 8001da6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001da8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001dac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dae:	2302      	movs	r3, #2
 8001db0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001db2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001db8:	2310      	movs	r3, #16
 8001dba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001dbc:	23b4      	movs	r3, #180	@ 0xb4
 8001dbe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc8:	f107 0320 	add.w	r3, r7, #32
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 fe41 	bl	8005a54 <HAL_RCC_OscConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001dd8:	f000 fa74 	bl	80022c4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ddc:	f003 fdea 	bl	80059b4 <HAL_PWREx_EnableOverDrive>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001de6:	f000 fa6d 	bl	80022c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dea:	230f      	movs	r3, #15
 8001dec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dee:	2302      	movs	r3, #2
 8001df0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001df6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001dfa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e02:	f107 030c 	add.w	r3, r7, #12
 8001e06:	2105      	movs	r1, #5
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f004 f89b 	bl	8005f44 <HAL_RCC_ClockConfig>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001e14:	f000 fa56 	bl	80022c4 <Error_Handler>
  }
}
 8001e18:	bf00      	nop
 8001e1a:	3750      	adds	r7, #80	@ 0x50
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40007000 	.word	0x40007000

08001e28 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001e2c:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <MX_DMA2D_Init+0x5c>)
 8001e2e:	4a16      	ldr	r2, [pc, #88]	@ (8001e88 <MX_DMA2D_Init+0x60>)
 8001e30:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001e32:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <MX_DMA2D_Init+0x5c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001e38:	4b12      	ldr	r3, [pc, #72]	@ (8001e84 <MX_DMA2D_Init+0x5c>)
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001e3e:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <MX_DMA2D_Init+0x5c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001e44:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <MX_DMA2D_Init+0x5c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <MX_DMA2D_Init+0x5c>)
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001e50:	4b0c      	ldr	r3, [pc, #48]	@ (8001e84 <MX_DMA2D_Init+0x5c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001e56:	4b0b      	ldr	r3, [pc, #44]	@ (8001e84 <MX_DMA2D_Init+0x5c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001e5c:	4809      	ldr	r0, [pc, #36]	@ (8001e84 <MX_DMA2D_Init+0x5c>)
 8001e5e:	f002 fb89 	bl	8004574 <HAL_DMA2D_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001e68:	f000 fa2c 	bl	80022c4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	4805      	ldr	r0, [pc, #20]	@ (8001e84 <MX_DMA2D_Init+0x5c>)
 8001e70:	f002 fcde 	bl	8004830 <HAL_DMA2D_ConfigLayer>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001e7a:	f000 fa23 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2000023c 	.word	0x2000023c
 8001e88:	4002b000 	.word	0x4002b000

08001e8c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001e90:	4b1b      	ldr	r3, [pc, #108]	@ (8001f00 <MX_I2C3_Init+0x74>)
 8001e92:	4a1c      	ldr	r2, [pc, #112]	@ (8001f04 <MX_I2C3_Init+0x78>)
 8001e94:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001e96:	4b1a      	ldr	r3, [pc, #104]	@ (8001f00 <MX_I2C3_Init+0x74>)
 8001e98:	4a1b      	ldr	r2, [pc, #108]	@ (8001f08 <MX_I2C3_Init+0x7c>)
 8001e9a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e9c:	4b18      	ldr	r3, [pc, #96]	@ (8001f00 <MX_I2C3_Init+0x74>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001ea2:	4b17      	ldr	r3, [pc, #92]	@ (8001f00 <MX_I2C3_Init+0x74>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ea8:	4b15      	ldr	r3, [pc, #84]	@ (8001f00 <MX_I2C3_Init+0x74>)
 8001eaa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001eae:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001eb0:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <MX_I2C3_Init+0x74>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001eb6:	4b12      	ldr	r3, [pc, #72]	@ (8001f00 <MX_I2C3_Init+0x74>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ebc:	4b10      	ldr	r3, [pc, #64]	@ (8001f00 <MX_I2C3_Init+0x74>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f00 <MX_I2C3_Init+0x74>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001ec8:	480d      	ldr	r0, [pc, #52]	@ (8001f00 <MX_I2C3_Init+0x74>)
 8001eca:	f003 f8e3 	bl	8005094 <HAL_I2C_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001ed4:	f000 f9f6 	bl	80022c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4809      	ldr	r0, [pc, #36]	@ (8001f00 <MX_I2C3_Init+0x74>)
 8001edc:	f003 fa1e 	bl	800531c <HAL_I2CEx_ConfigAnalogFilter>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001ee6:	f000 f9ed 	bl	80022c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001eea:	2100      	movs	r1, #0
 8001eec:	4804      	ldr	r0, [pc, #16]	@ (8001f00 <MX_I2C3_Init+0x74>)
 8001eee:	f003 fa51 	bl	8005394 <HAL_I2CEx_ConfigDigitalFilter>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001ef8:	f000 f9e4 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	2000027c 	.word	0x2000027c
 8001f04:	40005c00 	.word	0x40005c00
 8001f08:	000186a0 	.word	0x000186a0

08001f0c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b09a      	sub	sp, #104	@ 0x68
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001f12:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f16:	2234      	movs	r2, #52	@ 0x34
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f006 fb5f 	bl	80085de <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001f20:	463b      	mov	r3, r7
 8001f22:	2234      	movs	r2, #52	@ 0x34
 8001f24:	2100      	movs	r1, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f006 fb59 	bl	80085de <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001f2c:	4b4e      	ldr	r3, [pc, #312]	@ (8002068 <MX_LTDC_Init+0x15c>)
 8001f2e:	4a4f      	ldr	r2, [pc, #316]	@ (800206c <MX_LTDC_Init+0x160>)
 8001f30:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001f32:	4b4d      	ldr	r3, [pc, #308]	@ (8002068 <MX_LTDC_Init+0x15c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001f38:	4b4b      	ldr	r3, [pc, #300]	@ (8002068 <MX_LTDC_Init+0x15c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001f3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002068 <MX_LTDC_Init+0x15c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001f44:	4b48      	ldr	r3, [pc, #288]	@ (8002068 <MX_LTDC_Init+0x15c>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001f4a:	4b47      	ldr	r3, [pc, #284]	@ (8002068 <MX_LTDC_Init+0x15c>)
 8001f4c:	2207      	movs	r2, #7
 8001f4e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001f50:	4b45      	ldr	r3, [pc, #276]	@ (8002068 <MX_LTDC_Init+0x15c>)
 8001f52:	2203      	movs	r2, #3
 8001f54:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001f56:	4b44      	ldr	r3, [pc, #272]	@ (8002068 <MX_LTDC_Init+0x15c>)
 8001f58:	220e      	movs	r2, #14
 8001f5a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001f5c:	4b42      	ldr	r3, [pc, #264]	@ (8002068 <MX_LTDC_Init+0x15c>)
 8001f5e:	2205      	movs	r2, #5
 8001f60:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 254;
 8001f62:	4b41      	ldr	r3, [pc, #260]	@ (8002068 <MX_LTDC_Init+0x15c>)
 8001f64:	22fe      	movs	r2, #254	@ 0xfe
 8001f66:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 325;
 8001f68:	4b3f      	ldr	r3, [pc, #252]	@ (8002068 <MX_LTDC_Init+0x15c>)
 8001f6a:	f240 1245 	movw	r2, #325	@ 0x145
 8001f6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 260;
 8001f70:	4b3d      	ldr	r3, [pc, #244]	@ (8002068 <MX_LTDC_Init+0x15c>)
 8001f72:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001f78:	4b3b      	ldr	r3, [pc, #236]	@ (8002068 <MX_LTDC_Init+0x15c>)
 8001f7a:	f240 1247 	movw	r2, #327	@ 0x147
 8001f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001f80:	4b39      	ldr	r3, [pc, #228]	@ (8002068 <MX_LTDC_Init+0x15c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001f88:	4b37      	ldr	r3, [pc, #220]	@ (8002068 <MX_LTDC_Init+0x15c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001f90:	4b35      	ldr	r3, [pc, #212]	@ (8002068 <MX_LTDC_Init+0x15c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001f98:	4833      	ldr	r0, [pc, #204]	@ (8002068 <MX_LTDC_Init+0x15c>)
 8001f9a:	f003 fa3b 	bl	8005414 <HAL_LTDC_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_LTDC_Init+0x9c>
  {
    Error_Handler();
 8001fa4:	f000 f98e 	bl	80022c4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001fc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fc8:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001fca:	2305      	movs	r3, #5
 8001fcc:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001fec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	481c      	ldr	r0, [pc, #112]	@ (8002068 <MX_LTDC_Init+0x15c>)
 8001ff6:	f003 fadd 	bl	80055b4 <HAL_LTDC_ConfigLayer>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8002000:	f000 f960 	bl	80022c4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002014:	2300      	movs	r3, #0
 8002016:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002020:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002024:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002026:	2305      	movs	r3, #5
 8002028:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002048:	463b      	mov	r3, r7
 800204a:	2201      	movs	r2, #1
 800204c:	4619      	mov	r1, r3
 800204e:	4806      	ldr	r0, [pc, #24]	@ (8002068 <MX_LTDC_Init+0x15c>)
 8002050:	f003 fab0 	bl	80055b4 <HAL_LTDC_ConfigLayer>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_LTDC_Init+0x152>
  {
    Error_Handler();
 800205a:	f000 f933 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800205e:	bf00      	nop
 8002060:	3768      	adds	r7, #104	@ 0x68
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200002d0 	.word	0x200002d0
 800206c:	40016800 	.word	0x40016800

08002070 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002074:	4b17      	ldr	r3, [pc, #92]	@ (80020d4 <MX_SPI5_Init+0x64>)
 8002076:	4a18      	ldr	r2, [pc, #96]	@ (80020d8 <MX_SPI5_Init+0x68>)
 8002078:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800207a:	4b16      	ldr	r3, [pc, #88]	@ (80020d4 <MX_SPI5_Init+0x64>)
 800207c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002080:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002082:	4b14      	ldr	r3, [pc, #80]	@ (80020d4 <MX_SPI5_Init+0x64>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002088:	4b12      	ldr	r3, [pc, #72]	@ (80020d4 <MX_SPI5_Init+0x64>)
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800208e:	4b11      	ldr	r3, [pc, #68]	@ (80020d4 <MX_SPI5_Init+0x64>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002094:	4b0f      	ldr	r3, [pc, #60]	@ (80020d4 <MX_SPI5_Init+0x64>)
 8002096:	2200      	movs	r2, #0
 8002098:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800209a:	4b0e      	ldr	r3, [pc, #56]	@ (80020d4 <MX_SPI5_Init+0x64>)
 800209c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020a0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020a2:	4b0c      	ldr	r3, [pc, #48]	@ (80020d4 <MX_SPI5_Init+0x64>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020a8:	4b0a      	ldr	r3, [pc, #40]	@ (80020d4 <MX_SPI5_Init+0x64>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80020ae:	4b09      	ldr	r3, [pc, #36]	@ (80020d4 <MX_SPI5_Init+0x64>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020b4:	4b07      	ldr	r3, [pc, #28]	@ (80020d4 <MX_SPI5_Init+0x64>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80020ba:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <MX_SPI5_Init+0x64>)
 80020bc:	220a      	movs	r2, #10
 80020be:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80020c0:	4804      	ldr	r0, [pc, #16]	@ (80020d4 <MX_SPI5_Init+0x64>)
 80020c2:	f004 fb9c 	bl	80067fe <HAL_SPI_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80020cc:	f000 f8fa 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000378 	.word	0x20000378
 80020d8:	40015000 	.word	0x40015000

080020dc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
 80020f0:	615a      	str	r2, [r3, #20]
 80020f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80020f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002170 <MX_FMC_Init+0x94>)
 80020f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002174 <MX_FMC_Init+0x98>)
 80020f8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80020fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002170 <MX_FMC_Init+0x94>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002100:	4b1b      	ldr	r3, [pc, #108]	@ (8002170 <MX_FMC_Init+0x94>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002106:	4b1a      	ldr	r3, [pc, #104]	@ (8002170 <MX_FMC_Init+0x94>)
 8002108:	2204      	movs	r2, #4
 800210a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800210c:	4b18      	ldr	r3, [pc, #96]	@ (8002170 <MX_FMC_Init+0x94>)
 800210e:	2210      	movs	r2, #16
 8002110:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002112:	4b17      	ldr	r3, [pc, #92]	@ (8002170 <MX_FMC_Init+0x94>)
 8002114:	2240      	movs	r2, #64	@ 0x40
 8002116:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8002118:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <MX_FMC_Init+0x94>)
 800211a:	2280      	movs	r2, #128	@ 0x80
 800211c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800211e:	4b14      	ldr	r3, [pc, #80]	@ (8002170 <MX_FMC_Init+0x94>)
 8002120:	2200      	movs	r2, #0
 8002122:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8002124:	4b12      	ldr	r3, [pc, #72]	@ (8002170 <MX_FMC_Init+0x94>)
 8002126:	2200      	movs	r2, #0
 8002128:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800212a:	4b11      	ldr	r3, [pc, #68]	@ (8002170 <MX_FMC_Init+0x94>)
 800212c:	2200      	movs	r2, #0
 800212e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002130:	4b0f      	ldr	r3, [pc, #60]	@ (8002170 <MX_FMC_Init+0x94>)
 8002132:	2200      	movs	r2, #0
 8002134:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8002136:	2310      	movs	r3, #16
 8002138:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800213a:	2310      	movs	r3, #16
 800213c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800213e:	2310      	movs	r3, #16
 8002140:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8002142:	2310      	movs	r3, #16
 8002144:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8002146:	2310      	movs	r3, #16
 8002148:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800214a:	2310      	movs	r3, #16
 800214c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800214e:	2310      	movs	r3, #16
 8002150:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	4619      	mov	r1, r3
 8002156:	4806      	ldr	r0, [pc, #24]	@ (8002170 <MX_FMC_Init+0x94>)
 8002158:	f004 fac0 	bl	80066dc <HAL_SDRAM_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8002162:	f000 f8af 	bl	80022c4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002166:	bf00      	nop
 8002168:	3720      	adds	r7, #32
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200003d0 	.word	0x200003d0
 8002174:	a0000140 	.word	0xa0000140

08002178 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08e      	sub	sp, #56	@ 0x38
 800217c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	60da      	str	r2, [r3, #12]
 800218c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
 8002192:	4b49      	ldr	r3, [pc, #292]	@ (80022b8 <MX_GPIO_Init+0x140>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	4a48      	ldr	r2, [pc, #288]	@ (80022b8 <MX_GPIO_Init+0x140>)
 8002198:	f043 0320 	orr.w	r3, r3, #32
 800219c:	6313      	str	r3, [r2, #48]	@ 0x30
 800219e:	4b46      	ldr	r3, [pc, #280]	@ (80022b8 <MX_GPIO_Init+0x140>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a2:	f003 0320 	and.w	r3, r3, #32
 80021a6:	623b      	str	r3, [r7, #32]
 80021a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	4b42      	ldr	r3, [pc, #264]	@ (80022b8 <MX_GPIO_Init+0x140>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	4a41      	ldr	r2, [pc, #260]	@ (80022b8 <MX_GPIO_Init+0x140>)
 80021b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ba:	4b3f      	ldr	r3, [pc, #252]	@ (80022b8 <MX_GPIO_Init+0x140>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021c2:	61fb      	str	r3, [r7, #28]
 80021c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
 80021ca:	4b3b      	ldr	r3, [pc, #236]	@ (80022b8 <MX_GPIO_Init+0x140>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ce:	4a3a      	ldr	r2, [pc, #232]	@ (80022b8 <MX_GPIO_Init+0x140>)
 80021d0:	f043 0304 	orr.w	r3, r3, #4
 80021d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d6:	4b38      	ldr	r3, [pc, #224]	@ (80022b8 <MX_GPIO_Init+0x140>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	61bb      	str	r3, [r7, #24]
 80021e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	4b34      	ldr	r3, [pc, #208]	@ (80022b8 <MX_GPIO_Init+0x140>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	4a33      	ldr	r2, [pc, #204]	@ (80022b8 <MX_GPIO_Init+0x140>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f2:	4b31      	ldr	r3, [pc, #196]	@ (80022b8 <MX_GPIO_Init+0x140>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	4b2d      	ldr	r3, [pc, #180]	@ (80022b8 <MX_GPIO_Init+0x140>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	4a2c      	ldr	r2, [pc, #176]	@ (80022b8 <MX_GPIO_Init+0x140>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	6313      	str	r3, [r2, #48]	@ 0x30
 800220e:	4b2a      	ldr	r3, [pc, #168]	@ (80022b8 <MX_GPIO_Init+0x140>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b26      	ldr	r3, [pc, #152]	@ (80022b8 <MX_GPIO_Init+0x140>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	4a25      	ldr	r2, [pc, #148]	@ (80022b8 <MX_GPIO_Init+0x140>)
 8002224:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002228:	6313      	str	r3, [r2, #48]	@ 0x30
 800222a:	4b23      	ldr	r3, [pc, #140]	@ (80022b8 <MX_GPIO_Init+0x140>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	4b1f      	ldr	r3, [pc, #124]	@ (80022b8 <MX_GPIO_Init+0x140>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	4a1e      	ldr	r2, [pc, #120]	@ (80022b8 <MX_GPIO_Init+0x140>)
 8002240:	f043 0310 	orr.w	r3, r3, #16
 8002244:	6313      	str	r3, [r2, #48]	@ 0x30
 8002246:	4b1c      	ldr	r3, [pc, #112]	@ (80022b8 <MX_GPIO_Init+0x140>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	f003 0310 	and.w	r3, r3, #16
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]
 8002256:	4b18      	ldr	r3, [pc, #96]	@ (80022b8 <MX_GPIO_Init+0x140>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	4a17      	ldr	r2, [pc, #92]	@ (80022b8 <MX_GPIO_Init+0x140>)
 800225c:	f043 0308 	orr.w	r3, r3, #8
 8002260:	6313      	str	r3, [r2, #48]	@ 0x30
 8002262:	4b15      	ldr	r3, [pc, #84]	@ (80022b8 <MX_GPIO_Init+0x140>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 800226e:	2200      	movs	r2, #0
 8002270:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002274:	4811      	ldr	r0, [pc, #68]	@ (80022bc <MX_GPIO_Init+0x144>)
 8002276:	f002 fed9 	bl	800502c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800227a:	2304      	movs	r3, #4
 800227c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227e:	2300      	movs	r3, #0
 8002280:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002286:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800228a:	4619      	mov	r1, r3
 800228c:	480c      	ldr	r0, [pc, #48]	@ (80022c0 <MX_GPIO_Init+0x148>)
 800228e:	f002 fbfd 	bl	8004a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002292:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002296:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002298:	2301      	movs	r3, #1
 800229a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2300      	movs	r3, #0
 80022a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022a8:	4619      	mov	r1, r3
 80022aa:	4804      	ldr	r0, [pc, #16]	@ (80022bc <MX_GPIO_Init+0x144>)
 80022ac:	f002 fbee 	bl	8004a8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022b0:	bf00      	nop
 80022b2:	3738      	adds	r7, #56	@ 0x38
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40021800 	.word	0x40021800
 80022c0:	40020000 	.word	0x40020000

080022c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022c8:	b672      	cpsid	i
}
 80022ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022cc:	bf00      	nop
 80022ce:	e7fd      	b.n	80022cc <Error_Handler+0x8>

080022d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	4b10      	ldr	r3, [pc, #64]	@ (800231c <HAL_MspInit+0x4c>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022de:	4a0f      	ldr	r2, [pc, #60]	@ (800231c <HAL_MspInit+0x4c>)
 80022e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022e6:	4b0d      	ldr	r3, [pc, #52]	@ (800231c <HAL_MspInit+0x4c>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ee:	607b      	str	r3, [r7, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	603b      	str	r3, [r7, #0]
 80022f6:	4b09      	ldr	r3, [pc, #36]	@ (800231c <HAL_MspInit+0x4c>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	4a08      	ldr	r2, [pc, #32]	@ (800231c <HAL_MspInit+0x4c>)
 80022fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002300:	6413      	str	r3, [r2, #64]	@ 0x40
 8002302:	4b06      	ldr	r3, [pc, #24]	@ (800231c <HAL_MspInit+0x4c>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800

08002320 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0b      	ldr	r2, [pc, #44]	@ (800235c <HAL_DMA2D_MspInit+0x3c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d10d      	bne.n	800234e <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	4b0a      	ldr	r3, [pc, #40]	@ (8002360 <HAL_DMA2D_MspInit+0x40>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	4a09      	ldr	r2, [pc, #36]	@ (8002360 <HAL_DMA2D_MspInit+0x40>)
 800233c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002340:	6313      	str	r3, [r2, #48]	@ 0x30
 8002342:	4b07      	ldr	r3, [pc, #28]	@ (8002360 <HAL_DMA2D_MspInit+0x40>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	4002b000 	.word	0x4002b000
 8002360:	40023800 	.word	0x40023800

08002364 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08a      	sub	sp, #40	@ 0x28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a29      	ldr	r2, [pc, #164]	@ (8002428 <HAL_I2C_MspInit+0xc4>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d14b      	bne.n	800241e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	4b28      	ldr	r3, [pc, #160]	@ (800242c <HAL_I2C_MspInit+0xc8>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	4a27      	ldr	r2, [pc, #156]	@ (800242c <HAL_I2C_MspInit+0xc8>)
 8002390:	f043 0304 	orr.w	r3, r3, #4
 8002394:	6313      	str	r3, [r2, #48]	@ 0x30
 8002396:	4b25      	ldr	r3, [pc, #148]	@ (800242c <HAL_I2C_MspInit+0xc8>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	4b21      	ldr	r3, [pc, #132]	@ (800242c <HAL_I2C_MspInit+0xc8>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	4a20      	ldr	r2, [pc, #128]	@ (800242c <HAL_I2C_MspInit+0xc8>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023b2:	4b1e      	ldr	r3, [pc, #120]	@ (800242c <HAL_I2C_MspInit+0xc8>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023c4:	2312      	movs	r3, #18
 80023c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023cc:	2303      	movs	r3, #3
 80023ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023d0:	2304      	movs	r3, #4
 80023d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	4619      	mov	r1, r3
 80023da:	4815      	ldr	r0, [pc, #84]	@ (8002430 <HAL_I2C_MspInit+0xcc>)
 80023dc:	f002 fb56 	bl	8004a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023e6:	2312      	movs	r3, #18
 80023e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ee:	2303      	movs	r3, #3
 80023f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023f2:	2304      	movs	r3, #4
 80023f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f6:	f107 0314 	add.w	r3, r7, #20
 80023fa:	4619      	mov	r1, r3
 80023fc:	480d      	ldr	r0, [pc, #52]	@ (8002434 <HAL_I2C_MspInit+0xd0>)
 80023fe:	f002 fb45 	bl	8004a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	4b09      	ldr	r3, [pc, #36]	@ (800242c <HAL_I2C_MspInit+0xc8>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	4a08      	ldr	r2, [pc, #32]	@ (800242c <HAL_I2C_MspInit+0xc8>)
 800240c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002410:	6413      	str	r3, [r2, #64]	@ 0x40
 8002412:	4b06      	ldr	r3, [pc, #24]	@ (800242c <HAL_I2C_MspInit+0xc8>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800241e:	bf00      	nop
 8002420:	3728      	adds	r7, #40	@ 0x28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40005c00 	.word	0x40005c00
 800242c:	40023800 	.word	0x40023800
 8002430:	40020800 	.word	0x40020800
 8002434:	40020000 	.word	0x40020000

08002438 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b09a      	sub	sp, #104	@ 0x68
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002450:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002454:	2230      	movs	r2, #48	@ 0x30
 8002456:	2100      	movs	r1, #0
 8002458:	4618      	mov	r0, r3
 800245a:	f006 f8c0 	bl	80085de <memset>
  if(hltdc->Instance==LTDC)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a81      	ldr	r2, [pc, #516]	@ (8002668 <HAL_LTDC_MspInit+0x230>)
 8002464:	4293      	cmp	r3, r2
 8002466:	f040 80fa 	bne.w	800265e <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800246a:	2308      	movs	r3, #8
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 800246e:	2331      	movs	r3, #49	@ 0x31
 8002470:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2.0;
 8002472:	2302      	movs	r3, #2
 8002474:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002476:	2300      	movs	r3, #0
 8002478:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800247a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800247e:	4618      	mov	r0, r3
 8002480:	f003 ff6c 	bl	800635c <HAL_RCCEx_PeriphCLKConfig>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800248a:	f7ff ff1b 	bl	80022c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	623b      	str	r3, [r7, #32]
 8002492:	4b76      	ldr	r3, [pc, #472]	@ (800266c <HAL_LTDC_MspInit+0x234>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002496:	4a75      	ldr	r2, [pc, #468]	@ (800266c <HAL_LTDC_MspInit+0x234>)
 8002498:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800249c:	6453      	str	r3, [r2, #68]	@ 0x44
 800249e:	4b73      	ldr	r3, [pc, #460]	@ (800266c <HAL_LTDC_MspInit+0x234>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024a6:	623b      	str	r3, [r7, #32]
 80024a8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	4b6f      	ldr	r3, [pc, #444]	@ (800266c <HAL_LTDC_MspInit+0x234>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	4a6e      	ldr	r2, [pc, #440]	@ (800266c <HAL_LTDC_MspInit+0x234>)
 80024b4:	f043 0320 	orr.w	r3, r3, #32
 80024b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ba:	4b6c      	ldr	r3, [pc, #432]	@ (800266c <HAL_LTDC_MspInit+0x234>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	f003 0320 	and.w	r3, r3, #32
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	61bb      	str	r3, [r7, #24]
 80024ca:	4b68      	ldr	r3, [pc, #416]	@ (800266c <HAL_LTDC_MspInit+0x234>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	4a67      	ldr	r2, [pc, #412]	@ (800266c <HAL_LTDC_MspInit+0x234>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d6:	4b65      	ldr	r3, [pc, #404]	@ (800266c <HAL_LTDC_MspInit+0x234>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	61bb      	str	r3, [r7, #24]
 80024e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	4b61      	ldr	r3, [pc, #388]	@ (800266c <HAL_LTDC_MspInit+0x234>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	4a60      	ldr	r2, [pc, #384]	@ (800266c <HAL_LTDC_MspInit+0x234>)
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024f2:	4b5e      	ldr	r3, [pc, #376]	@ (800266c <HAL_LTDC_MspInit+0x234>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	4b5a      	ldr	r3, [pc, #360]	@ (800266c <HAL_LTDC_MspInit+0x234>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	4a59      	ldr	r2, [pc, #356]	@ (800266c <HAL_LTDC_MspInit+0x234>)
 8002508:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800250c:	6313      	str	r3, [r2, #48]	@ 0x30
 800250e:	4b57      	ldr	r3, [pc, #348]	@ (800266c <HAL_LTDC_MspInit+0x234>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	4b53      	ldr	r3, [pc, #332]	@ (800266c <HAL_LTDC_MspInit+0x234>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	4a52      	ldr	r2, [pc, #328]	@ (800266c <HAL_LTDC_MspInit+0x234>)
 8002524:	f043 0304 	orr.w	r3, r3, #4
 8002528:	6313      	str	r3, [r2, #48]	@ 0x30
 800252a:	4b50      	ldr	r3, [pc, #320]	@ (800266c <HAL_LTDC_MspInit+0x234>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	4b4c      	ldr	r3, [pc, #304]	@ (800266c <HAL_LTDC_MspInit+0x234>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	4a4b      	ldr	r2, [pc, #300]	@ (800266c <HAL_LTDC_MspInit+0x234>)
 8002540:	f043 0308 	orr.w	r3, r3, #8
 8002544:	6313      	str	r3, [r2, #48]	@ 0x30
 8002546:	4b49      	ldr	r3, [pc, #292]	@ (800266c <HAL_LTDC_MspInit+0x234>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002552:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002556:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002558:	2302      	movs	r3, #2
 800255a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	2300      	movs	r3, #0
 800255e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002560:	2300      	movs	r3, #0
 8002562:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002564:	230e      	movs	r3, #14
 8002566:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002568:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800256c:	4619      	mov	r1, r3
 800256e:	4840      	ldr	r0, [pc, #256]	@ (8002670 <HAL_LTDC_MspInit+0x238>)
 8002570:	f002 fa8c 	bl	8004a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8002574:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002578:	657b      	str	r3, [r7, #84]	@ 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257a:	2302      	movs	r3, #2
 800257c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002582:	2300      	movs	r3, #0
 8002584:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002586:	230e      	movs	r3, #14
 8002588:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800258e:	4619      	mov	r1, r3
 8002590:	4838      	ldr	r0, [pc, #224]	@ (8002674 <HAL_LTDC_MspInit+0x23c>)
 8002592:	f002 fa7b 	bl	8004a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002596:	2303      	movs	r3, #3
 8002598:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259a:	2302      	movs	r3, #2
 800259c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a2:	2300      	movs	r3, #0
 80025a4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80025a6:	2309      	movs	r3, #9
 80025a8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025aa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025ae:	4619      	mov	r1, r3
 80025b0:	4831      	ldr	r0, [pc, #196]	@ (8002678 <HAL_LTDC_MspInit+0x240>)
 80025b2:	f002 fa6b 	bl	8004a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 80025b6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80025ba:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025bc:	2302      	movs	r3, #2
 80025be:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c4:	2300      	movs	r3, #0
 80025c6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025c8:	230e      	movs	r3, #14
 80025ca:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025d0:	4619      	mov	r1, r3
 80025d2:	4829      	ldr	r0, [pc, #164]	@ (8002678 <HAL_LTDC_MspInit+0x240>)
 80025d4:	f002 fa5a 	bl	8004a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 80025d8:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80025dc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	2302      	movs	r3, #2
 80025e0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e6:	2300      	movs	r3, #0
 80025e8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025ea:	230e      	movs	r3, #14
 80025ec:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025f2:	4619      	mov	r1, r3
 80025f4:	4821      	ldr	r0, [pc, #132]	@ (800267c <HAL_LTDC_MspInit+0x244>)
 80025f6:	f002 fa49 	bl	8004a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80025fa:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80025fe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	2302      	movs	r3, #2
 8002602:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002608:	2300      	movs	r3, #0
 800260a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800260c:	230e      	movs	r3, #14
 800260e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002610:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002614:	4619      	mov	r1, r3
 8002616:	481a      	ldr	r0, [pc, #104]	@ (8002680 <HAL_LTDC_MspInit+0x248>)
 8002618:	f002 fa38 	bl	8004a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800261c:	2348      	movs	r3, #72	@ 0x48
 800261e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002620:	2302      	movs	r3, #2
 8002622:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002628:	2300      	movs	r3, #0
 800262a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800262c:	230e      	movs	r3, #14
 800262e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002630:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002634:	4619      	mov	r1, r3
 8002636:	4813      	ldr	r0, [pc, #76]	@ (8002684 <HAL_LTDC_MspInit+0x24c>)
 8002638:	f002 fa28 	bl	8004a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800263c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002640:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002642:	2302      	movs	r3, #2
 8002644:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264a:	2300      	movs	r3, #0
 800264c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800264e:	2309      	movs	r3, #9
 8002650:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002652:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002656:	4619      	mov	r1, r3
 8002658:	4808      	ldr	r0, [pc, #32]	@ (800267c <HAL_LTDC_MspInit+0x244>)
 800265a:	f002 fa17 	bl	8004a8c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800265e:	bf00      	nop
 8002660:	3768      	adds	r7, #104	@ 0x68
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40016800 	.word	0x40016800
 800266c:	40023800 	.word	0x40023800
 8002670:	40021400 	.word	0x40021400
 8002674:	40020000 	.word	0x40020000
 8002678:	40020400 	.word	0x40020400
 800267c:	40021800 	.word	0x40021800
 8002680:	40020800 	.word	0x40020800
 8002684:	40020c00 	.word	0x40020c00

08002688 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08a      	sub	sp, #40	@ 0x28
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a19      	ldr	r2, [pc, #100]	@ (800270c <HAL_SPI_MspInit+0x84>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d12c      	bne.n	8002704 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	4b18      	ldr	r3, [pc, #96]	@ (8002710 <HAL_SPI_MspInit+0x88>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b2:	4a17      	ldr	r2, [pc, #92]	@ (8002710 <HAL_SPI_MspInit+0x88>)
 80026b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ba:	4b15      	ldr	r3, [pc, #84]	@ (8002710 <HAL_SPI_MspInit+0x88>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	4b11      	ldr	r3, [pc, #68]	@ (8002710 <HAL_SPI_MspInit+0x88>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	4a10      	ldr	r2, [pc, #64]	@ (8002710 <HAL_SPI_MspInit+0x88>)
 80026d0:	f043 0320 	orr.w	r3, r3, #32
 80026d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002710 <HAL_SPI_MspInit+0x88>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026da:	f003 0320 	and.w	r3, r3, #32
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80026e2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80026e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e8:	2302      	movs	r3, #2
 80026ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f0:	2303      	movs	r3, #3
 80026f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80026f4:	2305      	movs	r3, #5
 80026f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	4619      	mov	r1, r3
 80026fe:	4805      	ldr	r0, [pc, #20]	@ (8002714 <HAL_SPI_MspInit+0x8c>)
 8002700:	f002 f9c4 	bl	8004a8c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002704:	bf00      	nop
 8002706:	3728      	adds	r7, #40	@ 0x28
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40015000 	.word	0x40015000
 8002710:	40023800 	.word	0x40023800
 8002714:	40021400 	.word	0x40021400

08002718 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a08      	ldr	r2, [pc, #32]	@ (8002748 <HAL_SPI_MspDeInit+0x30>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d10a      	bne.n	8002740 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800272a:	4b08      	ldr	r3, [pc, #32]	@ (800274c <HAL_SPI_MspDeInit+0x34>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272e:	4a07      	ldr	r2, [pc, #28]	@ (800274c <HAL_SPI_MspDeInit+0x34>)
 8002730:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002734:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8002736:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800273a:	4805      	ldr	r0, [pc, #20]	@ (8002750 <HAL_SPI_MspDeInit+0x38>)
 800273c:	f002 fb52 	bl	8004de4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40015000 	.word	0x40015000
 800274c:	40023800 	.word	0x40023800
 8002750:	40021400 	.word	0x40021400

08002754 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002768:	4b3b      	ldr	r3, [pc, #236]	@ (8002858 <HAL_FMC_MspInit+0x104>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d16f      	bne.n	8002850 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002770:	4b39      	ldr	r3, [pc, #228]	@ (8002858 <HAL_FMC_MspInit+0x104>)
 8002772:	2201      	movs	r2, #1
 8002774:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	603b      	str	r3, [r7, #0]
 800277a:	4b38      	ldr	r3, [pc, #224]	@ (800285c <HAL_FMC_MspInit+0x108>)
 800277c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800277e:	4a37      	ldr	r2, [pc, #220]	@ (800285c <HAL_FMC_MspInit+0x108>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6393      	str	r3, [r2, #56]	@ 0x38
 8002786:	4b35      	ldr	r3, [pc, #212]	@ (800285c <HAL_FMC_MspInit+0x108>)
 8002788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002792:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002796:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002798:	2302      	movs	r3, #2
 800279a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a0:	2303      	movs	r3, #3
 80027a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027a4:	230c      	movs	r3, #12
 80027a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027a8:	1d3b      	adds	r3, r7, #4
 80027aa:	4619      	mov	r1, r3
 80027ac:	482c      	ldr	r0, [pc, #176]	@ (8002860 <HAL_FMC_MspInit+0x10c>)
 80027ae:	f002 f96d 	bl	8004a8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027b2:	2301      	movs	r3, #1
 80027b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027be:	2303      	movs	r3, #3
 80027c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027c2:	230c      	movs	r3, #12
 80027c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c6:	1d3b      	adds	r3, r7, #4
 80027c8:	4619      	mov	r1, r3
 80027ca:	4826      	ldr	r0, [pc, #152]	@ (8002864 <HAL_FMC_MspInit+0x110>)
 80027cc:	f002 f95e 	bl	8004a8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80027d0:	f248 1333 	movw	r3, #33075	@ 0x8133
 80027d4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027de:	2303      	movs	r3, #3
 80027e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027e2:	230c      	movs	r3, #12
 80027e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	4619      	mov	r1, r3
 80027ea:	481f      	ldr	r0, [pc, #124]	@ (8002868 <HAL_FMC_MspInit+0x114>)
 80027ec:	f002 f94e 	bl	8004a8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80027f0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80027f4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f6:	2302      	movs	r3, #2
 80027f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fe:	2303      	movs	r3, #3
 8002800:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002802:	230c      	movs	r3, #12
 8002804:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002806:	1d3b      	adds	r3, r7, #4
 8002808:	4619      	mov	r1, r3
 800280a:	4818      	ldr	r0, [pc, #96]	@ (800286c <HAL_FMC_MspInit+0x118>)
 800280c:	f002 f93e 	bl	8004a8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002810:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002814:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002816:	2302      	movs	r3, #2
 8002818:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281e:	2303      	movs	r3, #3
 8002820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002822:	230c      	movs	r3, #12
 8002824:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002826:	1d3b      	adds	r3, r7, #4
 8002828:	4619      	mov	r1, r3
 800282a:	4811      	ldr	r0, [pc, #68]	@ (8002870 <HAL_FMC_MspInit+0x11c>)
 800282c:	f002 f92e 	bl	8004a8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002830:	2360      	movs	r3, #96	@ 0x60
 8002832:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
 8002836:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283c:	2303      	movs	r3, #3
 800283e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002840:	230c      	movs	r3, #12
 8002842:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	4619      	mov	r1, r3
 8002848:	480a      	ldr	r0, [pc, #40]	@ (8002874 <HAL_FMC_MspInit+0x120>)
 800284a:	f002 f91f 	bl	8004a8c <HAL_GPIO_Init>
 800284e:	e000      	b.n	8002852 <HAL_FMC_MspInit+0xfe>
    return;
 8002850:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20000604 	.word	0x20000604
 800285c:	40023800 	.word	0x40023800
 8002860:	40021400 	.word	0x40021400
 8002864:	40020800 	.word	0x40020800
 8002868:	40021800 	.word	0x40021800
 800286c:	40021000 	.word	0x40021000
 8002870:	40020c00 	.word	0x40020c00
 8002874:	40020400 	.word	0x40020400

08002878 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002880:	f7ff ff68 	bl	8002754 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002884:	bf00      	nop
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002890:	bf00      	nop
 8002892:	e7fd      	b.n	8002890 <NMI_Handler+0x4>

08002894 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002898:	bf00      	nop
 800289a:	e7fd      	b.n	8002898 <HardFault_Handler+0x4>

0800289c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028a0:	bf00      	nop
 80028a2:	e7fd      	b.n	80028a0 <MemManage_Handler+0x4>

080028a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028a8:	bf00      	nop
 80028aa:	e7fd      	b.n	80028a8 <BusFault_Handler+0x4>

080028ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028b0:	bf00      	nop
 80028b2:	e7fd      	b.n	80028b0 <UsageFault_Handler+0x4>

080028b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028e2:	f001 fb33 	bl	8003f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}

080028ea <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0
  return 1;
 80028ee:	2301      	movs	r3, #1
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <_kill>:

int _kill(int pid, int sig)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002904:	f005 febe 	bl	8008684 <__errno>
 8002908:	4603      	mov	r3, r0
 800290a:	2216      	movs	r2, #22
 800290c:	601a      	str	r2, [r3, #0]
  return -1;
 800290e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <_exit>:

void _exit (int status)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002922:	f04f 31ff 	mov.w	r1, #4294967295
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff ffe7 	bl	80028fa <_kill>
  while (1) {}    /* Make sure we hang here */
 800292c:	bf00      	nop
 800292e:	e7fd      	b.n	800292c <_exit+0x12>

08002930 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	e00a      	b.n	8002958 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002942:	f3af 8000 	nop.w
 8002946:	4601      	mov	r1, r0
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	60ba      	str	r2, [r7, #8]
 800294e:	b2ca      	uxtb	r2, r1
 8002950:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	3301      	adds	r3, #1
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	429a      	cmp	r2, r3
 800295e:	dbf0      	blt.n	8002942 <_read+0x12>
  }

  return len;
 8002960:	687b      	ldr	r3, [r7, #4]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b086      	sub	sp, #24
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	e009      	b.n	8002990 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	60ba      	str	r2, [r7, #8]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	3301      	adds	r3, #1
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	429a      	cmp	r2, r3
 8002996:	dbf1      	blt.n	800297c <_write+0x12>
  }
  return len;
 8002998:	687b      	ldr	r3, [r7, #4]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <_close>:

int _close(int file)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029ca:	605a      	str	r2, [r3, #4]
  return 0;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <_isatty>:

int _isatty(int file)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029e2:	2301      	movs	r3, #1
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a14:	4a14      	ldr	r2, [pc, #80]	@ (8002a68 <_sbrk+0x5c>)
 8002a16:	4b15      	ldr	r3, [pc, #84]	@ (8002a6c <_sbrk+0x60>)
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a20:	4b13      	ldr	r3, [pc, #76]	@ (8002a70 <_sbrk+0x64>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d102      	bne.n	8002a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a28:	4b11      	ldr	r3, [pc, #68]	@ (8002a70 <_sbrk+0x64>)
 8002a2a:	4a12      	ldr	r2, [pc, #72]	@ (8002a74 <_sbrk+0x68>)
 8002a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a2e:	4b10      	ldr	r3, [pc, #64]	@ (8002a70 <_sbrk+0x64>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d207      	bcs.n	8002a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a3c:	f005 fe22 	bl	8008684 <__errno>
 8002a40:	4603      	mov	r3, r0
 8002a42:	220c      	movs	r2, #12
 8002a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a46:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4a:	e009      	b.n	8002a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a4c:	4b08      	ldr	r3, [pc, #32]	@ (8002a70 <_sbrk+0x64>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a52:	4b07      	ldr	r3, [pc, #28]	@ (8002a70 <_sbrk+0x64>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	4a05      	ldr	r2, [pc, #20]	@ (8002a70 <_sbrk+0x64>)
 8002a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20030000 	.word	0x20030000
 8002a6c:	00000400 	.word	0x00000400
 8002a70:	20000608 	.word	0x20000608
 8002a74:	200009b0 	.word	0x200009b0

08002a78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a7c:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <SystemInit+0x20>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a82:	4a05      	ldr	r2, [pc, #20]	@ (8002a98 <SystemInit+0x20>)
 8002a84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	e000ed00 	.word	0xe000ed00

08002a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002a9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ad4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002aa0:	f7ff ffea 	bl	8002a78 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002aa4:	480c      	ldr	r0, [pc, #48]	@ (8002ad8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002aa6:	490d      	ldr	r1, [pc, #52]	@ (8002adc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ae0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aac:	e002      	b.n	8002ab4 <LoopCopyDataInit>

08002aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ab2:	3304      	adds	r3, #4

08002ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ab8:	d3f9      	bcc.n	8002aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002abc:	4c0a      	ldr	r4, [pc, #40]	@ (8002ae8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ac0:	e001      	b.n	8002ac6 <LoopFillZerobss>

08002ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ac4:	3204      	adds	r2, #4

08002ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ac8:	d3fb      	bcc.n	8002ac2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002aca:	f005 fde1 	bl	8008690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ace:	f7ff f899 	bl	8001c04 <main>
  bx  lr    
 8002ad2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002ad4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002adc:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8002ae0:	0800dd94 	.word	0x0800dd94
  ldr r2, =_sbss
 8002ae4:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8002ae8:	200009b0 	.word	0x200009b0

08002aec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aec:	e7fe      	b.n	8002aec <ADC_IRQHandler>

08002aee <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002af2:	f000 fa5d 	bl	8002fb0 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002af6:	20ca      	movs	r0, #202	@ 0xca
 8002af8:	f000 f95d 	bl	8002db6 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002afc:	20c3      	movs	r0, #195	@ 0xc3
 8002afe:	f000 f967 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002b02:	2008      	movs	r0, #8
 8002b04:	f000 f964 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002b08:	2050      	movs	r0, #80	@ 0x50
 8002b0a:	f000 f961 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002b0e:	20cf      	movs	r0, #207	@ 0xcf
 8002b10:	f000 f951 	bl	8002db6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002b14:	2000      	movs	r0, #0
 8002b16:	f000 f95b 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002b1a:	20c1      	movs	r0, #193	@ 0xc1
 8002b1c:	f000 f958 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002b20:	2030      	movs	r0, #48	@ 0x30
 8002b22:	f000 f955 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002b26:	20ed      	movs	r0, #237	@ 0xed
 8002b28:	f000 f945 	bl	8002db6 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002b2c:	2064      	movs	r0, #100	@ 0x64
 8002b2e:	f000 f94f 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002b32:	2003      	movs	r0, #3
 8002b34:	f000 f94c 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002b38:	2012      	movs	r0, #18
 8002b3a:	f000 f949 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002b3e:	2081      	movs	r0, #129	@ 0x81
 8002b40:	f000 f946 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002b44:	20e8      	movs	r0, #232	@ 0xe8
 8002b46:	f000 f936 	bl	8002db6 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002b4a:	2085      	movs	r0, #133	@ 0x85
 8002b4c:	f000 f940 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002b50:	2000      	movs	r0, #0
 8002b52:	f000 f93d 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002b56:	2078      	movs	r0, #120	@ 0x78
 8002b58:	f000 f93a 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002b5c:	20cb      	movs	r0, #203	@ 0xcb
 8002b5e:	f000 f92a 	bl	8002db6 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002b62:	2039      	movs	r0, #57	@ 0x39
 8002b64:	f000 f934 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002b68:	202c      	movs	r0, #44	@ 0x2c
 8002b6a:	f000 f931 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f000 f92e 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002b74:	2034      	movs	r0, #52	@ 0x34
 8002b76:	f000 f92b 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002b7a:	2002      	movs	r0, #2
 8002b7c:	f000 f928 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002b80:	20f7      	movs	r0, #247	@ 0xf7
 8002b82:	f000 f918 	bl	8002db6 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002b86:	2020      	movs	r0, #32
 8002b88:	f000 f922 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002b8c:	20ea      	movs	r0, #234	@ 0xea
 8002b8e:	f000 f912 	bl	8002db6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002b92:	2000      	movs	r0, #0
 8002b94:	f000 f91c 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002b98:	2000      	movs	r0, #0
 8002b9a:	f000 f919 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002b9e:	20b1      	movs	r0, #177	@ 0xb1
 8002ba0:	f000 f909 	bl	8002db6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f000 f913 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002baa:	201b      	movs	r0, #27
 8002bac:	f000 f910 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002bb0:	20b6      	movs	r0, #182	@ 0xb6
 8002bb2:	f000 f900 	bl	8002db6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002bb6:	200a      	movs	r0, #10
 8002bb8:	f000 f90a 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002bbc:	20a2      	movs	r0, #162	@ 0xa2
 8002bbe:	f000 f907 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002bc2:	20c0      	movs	r0, #192	@ 0xc0
 8002bc4:	f000 f8f7 	bl	8002db6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002bc8:	2010      	movs	r0, #16
 8002bca:	f000 f901 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002bce:	20c1      	movs	r0, #193	@ 0xc1
 8002bd0:	f000 f8f1 	bl	8002db6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002bd4:	2010      	movs	r0, #16
 8002bd6:	f000 f8fb 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002bda:	20c5      	movs	r0, #197	@ 0xc5
 8002bdc:	f000 f8eb 	bl	8002db6 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002be0:	2045      	movs	r0, #69	@ 0x45
 8002be2:	f000 f8f5 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002be6:	2015      	movs	r0, #21
 8002be8:	f000 f8f2 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002bec:	20c7      	movs	r0, #199	@ 0xc7
 8002bee:	f000 f8e2 	bl	8002db6 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002bf2:	2090      	movs	r0, #144	@ 0x90
 8002bf4:	f000 f8ec 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002bf8:	2036      	movs	r0, #54	@ 0x36
 8002bfa:	f000 f8dc 	bl	8002db6 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002bfe:	20c8      	movs	r0, #200	@ 0xc8
 8002c00:	f000 f8e6 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002c04:	20f2      	movs	r0, #242	@ 0xf2
 8002c06:	f000 f8d6 	bl	8002db6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f000 f8e0 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002c10:	20b0      	movs	r0, #176	@ 0xb0
 8002c12:	f000 f8d0 	bl	8002db6 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002c16:	20c2      	movs	r0, #194	@ 0xc2
 8002c18:	f000 f8da 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002c1c:	20b6      	movs	r0, #182	@ 0xb6
 8002c1e:	f000 f8ca 	bl	8002db6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002c22:	200a      	movs	r0, #10
 8002c24:	f000 f8d4 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002c28:	20a7      	movs	r0, #167	@ 0xa7
 8002c2a:	f000 f8d1 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002c2e:	2027      	movs	r0, #39	@ 0x27
 8002c30:	f000 f8ce 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002c34:	2004      	movs	r0, #4
 8002c36:	f000 f8cb 	bl	8002dd0 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002c3a:	202a      	movs	r0, #42	@ 0x2a
 8002c3c:	f000 f8bb 	bl	8002db6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002c40:	2000      	movs	r0, #0
 8002c42:	f000 f8c5 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002c46:	2000      	movs	r0, #0
 8002c48:	f000 f8c2 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f000 f8bf 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002c52:	20ef      	movs	r0, #239	@ 0xef
 8002c54:	f000 f8bc 	bl	8002dd0 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002c58:	202b      	movs	r0, #43	@ 0x2b
 8002c5a:	f000 f8ac 	bl	8002db6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002c5e:	2000      	movs	r0, #0
 8002c60:	f000 f8b6 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002c64:	2000      	movs	r0, #0
 8002c66:	f000 f8b3 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002c6a:	2001      	movs	r0, #1
 8002c6c:	f000 f8b0 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002c70:	203f      	movs	r0, #63	@ 0x3f
 8002c72:	f000 f8ad 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002c76:	20f6      	movs	r0, #246	@ 0xf6
 8002c78:	f000 f89d 	bl	8002db6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	f000 f8a7 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002c82:	2000      	movs	r0, #0
 8002c84:	f000 f8a4 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002c88:	2006      	movs	r0, #6
 8002c8a:	f000 f8a1 	bl	8002dd0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002c8e:	202c      	movs	r0, #44	@ 0x2c
 8002c90:	f000 f891 	bl	8002db6 <ili9341_WriteReg>
  LCD_Delay(200);
 8002c94:	20c8      	movs	r0, #200	@ 0xc8
 8002c96:	f000 fa79 	bl	800318c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002c9a:	2026      	movs	r0, #38	@ 0x26
 8002c9c:	f000 f88b 	bl	8002db6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	f000 f895 	bl	8002dd0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8002ca6:	20e0      	movs	r0, #224	@ 0xe0
 8002ca8:	f000 f885 	bl	8002db6 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002cac:	200f      	movs	r0, #15
 8002cae:	f000 f88f 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002cb2:	2029      	movs	r0, #41	@ 0x29
 8002cb4:	f000 f88c 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002cb8:	2024      	movs	r0, #36	@ 0x24
 8002cba:	f000 f889 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002cbe:	200c      	movs	r0, #12
 8002cc0:	f000 f886 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002cc4:	200e      	movs	r0, #14
 8002cc6:	f000 f883 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002cca:	2009      	movs	r0, #9
 8002ccc:	f000 f880 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002cd0:	204e      	movs	r0, #78	@ 0x4e
 8002cd2:	f000 f87d 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002cd6:	2078      	movs	r0, #120	@ 0x78
 8002cd8:	f000 f87a 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002cdc:	203c      	movs	r0, #60	@ 0x3c
 8002cde:	f000 f877 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002ce2:	2009      	movs	r0, #9
 8002ce4:	f000 f874 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002ce8:	2013      	movs	r0, #19
 8002cea:	f000 f871 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002cee:	2005      	movs	r0, #5
 8002cf0:	f000 f86e 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002cf4:	2017      	movs	r0, #23
 8002cf6:	f000 f86b 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002cfa:	2011      	movs	r0, #17
 8002cfc:	f000 f868 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002d00:	2000      	movs	r0, #0
 8002d02:	f000 f865 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002d06:	20e1      	movs	r0, #225	@ 0xe1
 8002d08:	f000 f855 	bl	8002db6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f000 f85f 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002d12:	2016      	movs	r0, #22
 8002d14:	f000 f85c 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002d18:	201b      	movs	r0, #27
 8002d1a:	f000 f859 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002d1e:	2004      	movs	r0, #4
 8002d20:	f000 f856 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002d24:	2011      	movs	r0, #17
 8002d26:	f000 f853 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002d2a:	2007      	movs	r0, #7
 8002d2c:	f000 f850 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002d30:	2031      	movs	r0, #49	@ 0x31
 8002d32:	f000 f84d 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8002d36:	2033      	movs	r0, #51	@ 0x33
 8002d38:	f000 f84a 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002d3c:	2042      	movs	r0, #66	@ 0x42
 8002d3e:	f000 f847 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002d42:	2005      	movs	r0, #5
 8002d44:	f000 f844 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002d48:	200c      	movs	r0, #12
 8002d4a:	f000 f841 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002d4e:	200a      	movs	r0, #10
 8002d50:	f000 f83e 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002d54:	2028      	movs	r0, #40	@ 0x28
 8002d56:	f000 f83b 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002d5a:	202f      	movs	r0, #47	@ 0x2f
 8002d5c:	f000 f838 	bl	8002dd0 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002d60:	200f      	movs	r0, #15
 8002d62:	f000 f835 	bl	8002dd0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002d66:	2011      	movs	r0, #17
 8002d68:	f000 f825 	bl	8002db6 <ili9341_WriteReg>
  LCD_Delay(200);
 8002d6c:	20c8      	movs	r0, #200	@ 0xc8
 8002d6e:	f000 fa0d 	bl	800318c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002d72:	2029      	movs	r0, #41	@ 0x29
 8002d74:	f000 f81f 	bl	8002db6 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002d78:	202c      	movs	r0, #44	@ 0x2c
 8002d7a:	f000 f81c 	bl	8002db6 <ili9341_WriteReg>
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002d86:	f000 f913 	bl	8002fb0 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002d8a:	2103      	movs	r1, #3
 8002d8c:	20d3      	movs	r0, #211	@ 0xd3
 8002d8e:	f000 f82c 	bl	8002dea <ili9341_ReadData>
 8002d92:	4603      	mov	r3, r0
 8002d94:	b29b      	uxth	r3, r3
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002d9e:	2029      	movs	r0, #41	@ 0x29
 8002da0:	f000 f809 	bl	8002db6 <ili9341_WriteReg>
}
 8002da4:	bf00      	nop
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002dac:	2028      	movs	r0, #40	@ 0x28
 8002dae:	f000 f802 	bl	8002db6 <ili9341_WriteReg>
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 f98e 	bl	80030e4 <LCD_IO_WriteReg>
}
 8002dc8:	bf00      	nop
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002dda:	88fb      	ldrh	r3, [r7, #6]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 f95f 	bl	80030a0 <LCD_IO_WriteData>
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	4603      	mov	r3, r0
 8002df2:	460a      	mov	r2, r1
 8002df4:	80fb      	strh	r3, [r7, #6]
 8002df6:	4613      	mov	r3, r2
 8002df8:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002dfa:	797a      	ldrb	r2, [r7, #5]
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 f991 	bl	8003128 <LCD_IO_ReadData>
 8002e06:	4603      	mov	r3, r0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002e14:	23f0      	movs	r3, #240	@ 0xf0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002e24:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002e38:	4819      	ldr	r0, [pc, #100]	@ (8002ea0 <SPIx_Init+0x6c>)
 8002e3a:	f004 f997 	bl	800716c <HAL_SPI_GetState>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d12b      	bne.n	8002e9c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002e44:	4b16      	ldr	r3, [pc, #88]	@ (8002ea0 <SPIx_Init+0x6c>)
 8002e46:	4a17      	ldr	r2, [pc, #92]	@ (8002ea4 <SPIx_Init+0x70>)
 8002e48:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002e4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ea0 <SPIx_Init+0x6c>)
 8002e4c:	2218      	movs	r2, #24
 8002e4e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002e50:	4b13      	ldr	r3, [pc, #76]	@ (8002ea0 <SPIx_Init+0x6c>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002e56:	4b12      	ldr	r3, [pc, #72]	@ (8002ea0 <SPIx_Init+0x6c>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002e5c:	4b10      	ldr	r3, [pc, #64]	@ (8002ea0 <SPIx_Init+0x6c>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002e62:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea0 <SPIx_Init+0x6c>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002e68:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea0 <SPIx_Init+0x6c>)
 8002e6a:	2207      	movs	r2, #7
 8002e6c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea0 <SPIx_Init+0x6c>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002e74:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea0 <SPIx_Init+0x6c>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002e7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ea0 <SPIx_Init+0x6c>)
 8002e7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e80:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002e82:	4b07      	ldr	r3, [pc, #28]	@ (8002ea0 <SPIx_Init+0x6c>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002e88:	4b05      	ldr	r3, [pc, #20]	@ (8002ea0 <SPIx_Init+0x6c>)
 8002e8a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002e8e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002e90:	4803      	ldr	r0, [pc, #12]	@ (8002ea0 <SPIx_Init+0x6c>)
 8002e92:	f000 f853 	bl	8002f3c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002e96:	4802      	ldr	r0, [pc, #8]	@ (8002ea0 <SPIx_Init+0x6c>)
 8002e98:	f003 fcb1 	bl	80067fe <HAL_SPI_Init>
  } 
}
 8002e9c:	bf00      	nop
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	2000060c 	.word	0x2000060c
 8002ea4:	40015000 	.word	0x40015000

08002ea8 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002eb6:	79fb      	ldrb	r3, [r7, #7]
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	4b09      	ldr	r3, [pc, #36]	@ (8002ee0 <SPIx_Read+0x38>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f107 0108 	add.w	r1, r7, #8
 8002ec2:	4808      	ldr	r0, [pc, #32]	@ (8002ee4 <SPIx_Read+0x3c>)
 8002ec4:	f003 fe90 	bl	8006be8 <HAL_SPI_Receive>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002ed2:	f000 f827 	bl	8002f24 <SPIx_Error>
  }
  
  return readvalue;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20000040 	.word	0x20000040
 8002ee4:	2000060c 	.word	0x2000060c

08002ee8 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002ef6:	4b09      	ldr	r3, [pc, #36]	@ (8002f1c <SPIx_Write+0x34>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	1db9      	adds	r1, r7, #6
 8002efc:	2201      	movs	r2, #1
 8002efe:	4808      	ldr	r0, [pc, #32]	@ (8002f20 <SPIx_Write+0x38>)
 8002f00:	f003 fd2e 	bl	8006960 <HAL_SPI_Transmit>
 8002f04:	4603      	mov	r3, r0
 8002f06:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002f0e:	f000 f809 	bl	8002f24 <SPIx_Error>
  }
}
 8002f12:	bf00      	nop
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20000040 	.word	0x20000040
 8002f20:	2000060c 	.word	0x2000060c

08002f24 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002f28:	4803      	ldr	r0, [pc, #12]	@ (8002f38 <SPIx_Error+0x14>)
 8002f2a:	f003 fcf1 	bl	8006910 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002f2e:	f7ff ff81 	bl	8002e34 <SPIx_Init>
}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	2000060c 	.word	0x2000060c

08002f3c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08a      	sub	sp, #40	@ 0x28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002f44:	2300      	movs	r3, #0
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	4b17      	ldr	r3, [pc, #92]	@ (8002fa8 <SPIx_MspInit+0x6c>)
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4c:	4a16      	ldr	r2, [pc, #88]	@ (8002fa8 <SPIx_MspInit+0x6c>)
 8002f4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f52:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f54:	4b14      	ldr	r3, [pc, #80]	@ (8002fa8 <SPIx_MspInit+0x6c>)
 8002f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	4b10      	ldr	r3, [pc, #64]	@ (8002fa8 <SPIx_MspInit+0x6c>)
 8002f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f68:	4a0f      	ldr	r2, [pc, #60]	@ (8002fa8 <SPIx_MspInit+0x6c>)
 8002f6a:	f043 0320 	orr.w	r3, r3, #32
 8002f6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f70:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa8 <SPIx_MspInit+0x6c>)
 8002f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002f7c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002f80:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002f82:	2302      	movs	r3, #2
 8002f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002f86:	2302      	movs	r3, #2
 8002f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002f8e:	2305      	movs	r3, #5
 8002f90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002f92:	f107 0314 	add.w	r3, r7, #20
 8002f96:	4619      	mov	r1, r3
 8002f98:	4804      	ldr	r0, [pc, #16]	@ (8002fac <SPIx_MspInit+0x70>)
 8002f9a:	f001 fd77 	bl	8004a8c <HAL_GPIO_Init>
}
 8002f9e:	bf00      	nop
 8002fa0:	3728      	adds	r7, #40	@ 0x28
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40021400 	.word	0x40021400

08002fb0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002fb6:	4b36      	ldr	r3, [pc, #216]	@ (8003090 <LCD_IO_Init+0xe0>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d164      	bne.n	8003088 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002fbe:	4b34      	ldr	r3, [pc, #208]	@ (8003090 <LCD_IO_Init+0xe0>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	4b32      	ldr	r3, [pc, #200]	@ (8003094 <LCD_IO_Init+0xe4>)
 8002fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fcc:	4a31      	ldr	r2, [pc, #196]	@ (8003094 <LCD_IO_Init+0xe4>)
 8002fce:	f043 0308 	orr.w	r3, r3, #8
 8002fd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8003094 <LCD_IO_Init+0xe4>)
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002fe0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fe4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002ff2:	f107 030c 	add.w	r3, r7, #12
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4827      	ldr	r0, [pc, #156]	@ (8003098 <LCD_IO_Init+0xe8>)
 8002ffa:	f001 fd47 	bl	8004a8c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	607b      	str	r3, [r7, #4]
 8003002:	4b24      	ldr	r3, [pc, #144]	@ (8003094 <LCD_IO_Init+0xe4>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003006:	4a23      	ldr	r2, [pc, #140]	@ (8003094 <LCD_IO_Init+0xe4>)
 8003008:	f043 0308 	orr.w	r3, r3, #8
 800300c:	6313      	str	r3, [r2, #48]	@ 0x30
 800300e:	4b21      	ldr	r3, [pc, #132]	@ (8003094 <LCD_IO_Init+0xe4>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	607b      	str	r3, [r7, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800301a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800301e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003020:	2301      	movs	r3, #1
 8003022:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003028:	2302      	movs	r3, #2
 800302a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800302c:	f107 030c 	add.w	r3, r7, #12
 8003030:	4619      	mov	r1, r3
 8003032:	4819      	ldr	r0, [pc, #100]	@ (8003098 <LCD_IO_Init+0xe8>)
 8003034:	f001 fd2a 	bl	8004a8c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003038:	2300      	movs	r3, #0
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	4b15      	ldr	r3, [pc, #84]	@ (8003094 <LCD_IO_Init+0xe4>)
 800303e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003040:	4a14      	ldr	r2, [pc, #80]	@ (8003094 <LCD_IO_Init+0xe4>)
 8003042:	f043 0304 	orr.w	r3, r3, #4
 8003046:	6313      	str	r3, [r2, #48]	@ 0x30
 8003048:	4b12      	ldr	r3, [pc, #72]	@ (8003094 <LCD_IO_Init+0xe4>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	603b      	str	r3, [r7, #0]
 8003052:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003054:	2304      	movs	r3, #4
 8003056:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003058:	2301      	movs	r3, #1
 800305a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003060:	2302      	movs	r3, #2
 8003062:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003064:	f107 030c 	add.w	r3, r7, #12
 8003068:	4619      	mov	r1, r3
 800306a:	480c      	ldr	r0, [pc, #48]	@ (800309c <LCD_IO_Init+0xec>)
 800306c:	f001 fd0e 	bl	8004a8c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003070:	2200      	movs	r2, #0
 8003072:	2104      	movs	r1, #4
 8003074:	4809      	ldr	r0, [pc, #36]	@ (800309c <LCD_IO_Init+0xec>)
 8003076:	f001 ffd9 	bl	800502c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800307a:	2201      	movs	r2, #1
 800307c:	2104      	movs	r1, #4
 800307e:	4807      	ldr	r0, [pc, #28]	@ (800309c <LCD_IO_Init+0xec>)
 8003080:	f001 ffd4 	bl	800502c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8003084:	f7ff fed6 	bl	8002e34 <SPIx_Init>
  }
}
 8003088:	bf00      	nop
 800308a:	3720      	adds	r7, #32
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20000664 	.word	0x20000664
 8003094:	40023800 	.word	0x40023800
 8003098:	40020c00 	.word	0x40020c00
 800309c:	40020800 	.word	0x40020800

080030a0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80030aa:	2201      	movs	r2, #1
 80030ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030b0:	480a      	ldr	r0, [pc, #40]	@ (80030dc <LCD_IO_WriteData+0x3c>)
 80030b2:	f001 ffbb 	bl	800502c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80030b6:	2200      	movs	r2, #0
 80030b8:	2104      	movs	r1, #4
 80030ba:	4809      	ldr	r0, [pc, #36]	@ (80030e0 <LCD_IO_WriteData+0x40>)
 80030bc:	f001 ffb6 	bl	800502c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80030c0:	88fb      	ldrh	r3, [r7, #6]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff ff10 	bl	8002ee8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80030c8:	2201      	movs	r2, #1
 80030ca:	2104      	movs	r1, #4
 80030cc:	4804      	ldr	r0, [pc, #16]	@ (80030e0 <LCD_IO_WriteData+0x40>)
 80030ce:	f001 ffad 	bl	800502c <HAL_GPIO_WritePin>
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40020c00 	.word	0x40020c00
 80030e0:	40020800 	.word	0x40020800

080030e4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80030ee:	2200      	movs	r2, #0
 80030f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030f4:	480a      	ldr	r0, [pc, #40]	@ (8003120 <LCD_IO_WriteReg+0x3c>)
 80030f6:	f001 ff99 	bl	800502c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80030fa:	2200      	movs	r2, #0
 80030fc:	2104      	movs	r1, #4
 80030fe:	4809      	ldr	r0, [pc, #36]	@ (8003124 <LCD_IO_WriteReg+0x40>)
 8003100:	f001 ff94 	bl	800502c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	b29b      	uxth	r3, r3
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff feed 	bl	8002ee8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800310e:	2201      	movs	r2, #1
 8003110:	2104      	movs	r1, #4
 8003112:	4804      	ldr	r0, [pc, #16]	@ (8003124 <LCD_IO_WriteReg+0x40>)
 8003114:	f001 ff8a 	bl	800502c <HAL_GPIO_WritePin>
}
 8003118:	bf00      	nop
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40020c00 	.word	0x40020c00
 8003124:	40020800 	.word	0x40020800

08003128 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	460a      	mov	r2, r1
 8003132:	80fb      	strh	r3, [r7, #6]
 8003134:	4613      	mov	r3, r2
 8003136:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800313c:	2200      	movs	r2, #0
 800313e:	2104      	movs	r1, #4
 8003140:	4810      	ldr	r0, [pc, #64]	@ (8003184 <LCD_IO_ReadData+0x5c>)
 8003142:	f001 ff73 	bl	800502c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003146:	2200      	movs	r2, #0
 8003148:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800314c:	480e      	ldr	r0, [pc, #56]	@ (8003188 <LCD_IO_ReadData+0x60>)
 800314e:	f001 ff6d 	bl	800502c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff fec7 	bl	8002ee8 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800315a:	797b      	ldrb	r3, [r7, #5]
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff fea3 	bl	8002ea8 <SPIx_Read>
 8003162:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003164:	2201      	movs	r2, #1
 8003166:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800316a:	4807      	ldr	r0, [pc, #28]	@ (8003188 <LCD_IO_ReadData+0x60>)
 800316c:	f001 ff5e 	bl	800502c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003170:	2201      	movs	r2, #1
 8003172:	2104      	movs	r1, #4
 8003174:	4803      	ldr	r0, [pc, #12]	@ (8003184 <LCD_IO_ReadData+0x5c>)
 8003176:	f001 ff59 	bl	800502c <HAL_GPIO_WritePin>
  
  return readvalue;
 800317a:	68fb      	ldr	r3, [r7, #12]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40020800 	.word	0x40020800
 8003188:	40020c00 	.word	0x40020c00

0800318c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fef9 	bl	8003f8c <HAL_Delay>
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80031a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003260 <BSP_LCD_Init+0xbc>)
 80031aa:	4a2e      	ldr	r2, [pc, #184]	@ (8003264 <BSP_LCD_Init+0xc0>)
 80031ac:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80031ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003260 <BSP_LCD_Init+0xbc>)
 80031b0:	2209      	movs	r2, #9
 80031b2:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80031b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003260 <BSP_LCD_Init+0xbc>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80031ba:	4b29      	ldr	r3, [pc, #164]	@ (8003260 <BSP_LCD_Init+0xbc>)
 80031bc:	221d      	movs	r2, #29
 80031be:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80031c0:	4b27      	ldr	r3, [pc, #156]	@ (8003260 <BSP_LCD_Init+0xbc>)
 80031c2:	2203      	movs	r2, #3
 80031c4:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80031c6:	4b26      	ldr	r3, [pc, #152]	@ (8003260 <BSP_LCD_Init+0xbc>)
 80031c8:	f240 120d 	movw	r2, #269	@ 0x10d
 80031cc:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80031ce:	4b24      	ldr	r3, [pc, #144]	@ (8003260 <BSP_LCD_Init+0xbc>)
 80031d0:	f240 1243 	movw	r2, #323	@ 0x143
 80031d4:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80031d6:	4b22      	ldr	r3, [pc, #136]	@ (8003260 <BSP_LCD_Init+0xbc>)
 80031d8:	f240 1217 	movw	r2, #279	@ 0x117
 80031dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80031de:	4b20      	ldr	r3, [pc, #128]	@ (8003260 <BSP_LCD_Init+0xbc>)
 80031e0:	f240 1247 	movw	r2, #327	@ 0x147
 80031e4:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80031e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003260 <BSP_LCD_Init+0xbc>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80031ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003260 <BSP_LCD_Init+0xbc>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80031f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003260 <BSP_LCD_Init+0xbc>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80031fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003268 <BSP_LCD_Init+0xc4>)
 8003200:	2208      	movs	r2, #8
 8003202:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003204:	4b18      	ldr	r3, [pc, #96]	@ (8003268 <BSP_LCD_Init+0xc4>)
 8003206:	22c0      	movs	r2, #192	@ 0xc0
 8003208:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800320a:	4b17      	ldr	r3, [pc, #92]	@ (8003268 <BSP_LCD_Init+0xc4>)
 800320c:	2204      	movs	r2, #4
 800320e:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003210:	4b15      	ldr	r3, [pc, #84]	@ (8003268 <BSP_LCD_Init+0xc4>)
 8003212:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003216:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8003218:	4813      	ldr	r0, [pc, #76]	@ (8003268 <BSP_LCD_Init+0xc4>)
 800321a:	f003 f89f 	bl	800635c <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800321e:	4b10      	ldr	r3, [pc, #64]	@ (8003260 <BSP_LCD_Init+0xbc>)
 8003220:	2200      	movs	r2, #0
 8003222:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003224:	4b0e      	ldr	r3, [pc, #56]	@ (8003260 <BSP_LCD_Init+0xbc>)
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800322a:	4b0d      	ldr	r3, [pc, #52]	@ (8003260 <BSP_LCD_Init+0xbc>)
 800322c:	2200      	movs	r2, #0
 800322e:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003230:	4b0b      	ldr	r3, [pc, #44]	@ (8003260 <BSP_LCD_Init+0xbc>)
 8003232:	2200      	movs	r2, #0
 8003234:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8003236:	f000 fa7f 	bl	8003738 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800323a:	4809      	ldr	r0, [pc, #36]	@ (8003260 <BSP_LCD_Init+0xbc>)
 800323c:	f002 f8ea 	bl	8005414 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8003240:	4b0a      	ldr	r3, [pc, #40]	@ (800326c <BSP_LCD_Init+0xc8>)
 8003242:	4a0b      	ldr	r2, [pc, #44]	@ (8003270 <BSP_LCD_Init+0xcc>)
 8003244:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8003246:	4b09      	ldr	r3, [pc, #36]	@ (800326c <BSP_LCD_Init+0xc8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800324e:	f000 fc61 	bl	8003b14 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003252:	4808      	ldr	r0, [pc, #32]	@ (8003274 <BSP_LCD_Init+0xd0>)
 8003254:	f000 f8a4 	bl	80033a0 <BSP_LCD_SetFont>

  return LCD_OK;
 8003258:	2300      	movs	r3, #0
}  
 800325a:	4618      	mov	r0, r3
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20000668 	.word	0x20000668
 8003264:	40016800 	.word	0x40016800
 8003268:	20000750 	.word	0x20000750
 800326c:	2000079c 	.word	0x2000079c
 8003270:	20000008 	.word	0x20000008
 8003274:	20000044 	.word	0x20000044

08003278 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 800327c:	4b03      	ldr	r3, [pc, #12]	@ (800328c <BSP_LCD_GetXSize+0x14>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003282:	4798      	blx	r3
 8003284:	4603      	mov	r3, r0
}
 8003286:	4618      	mov	r0, r3
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	2000079c 	.word	0x2000079c

08003290 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8003294:	4b03      	ldr	r3, [pc, #12]	@ (80032a4 <BSP_LCD_GetYSize+0x14>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329a:	4798      	blx	r3
 800329c:	4603      	mov	r3, r0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	2000079c 	.word	0x2000079c

080032a8 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b090      	sub	sp, #64	@ 0x40
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	6039      	str	r1, [r7, #0]
 80032b2:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80032b8:	f7ff ffde 	bl	8003278 <BSP_LCD_GetXSize>
 80032bc:	4603      	mov	r3, r0
 80032be:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80032c4:	f7ff ffe4 	bl	8003290 <BSP_LCD_GetYSize>
 80032c8:	4603      	mov	r3, r0
 80032ca:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80032cc:	2300      	movs	r3, #0
 80032ce:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 80032d4:	23ff      	movs	r3, #255	@ 0xff
 80032d6:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 80032dc:	2300      	movs	r3, #0
 80032de:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80032ee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80032f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80032f4:	2307      	movs	r3, #7
 80032f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80032f8:	f7ff ffbe 	bl	8003278 <BSP_LCD_GetXSize>
 80032fc:	4603      	mov	r3, r0
 80032fe:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003300:	f7ff ffc6 	bl	8003290 <BSP_LCD_GetYSize>
 8003304:	4603      	mov	r3, r0
 8003306:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003308:	88fa      	ldrh	r2, [r7, #6]
 800330a:	f107 030c 	add.w	r3, r7, #12
 800330e:	4619      	mov	r1, r3
 8003310:	4814      	ldr	r0, [pc, #80]	@ (8003364 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003312:	f002 f94f 	bl	80055b4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003316:	88fa      	ldrh	r2, [r7, #6]
 8003318:	4913      	ldr	r1, [pc, #76]	@ (8003368 <BSP_LCD_LayerDefaultInit+0xc0>)
 800331a:	4613      	mov	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	3304      	adds	r3, #4
 8003326:	f04f 32ff 	mov.w	r2, #4294967295
 800332a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800332c:	88fa      	ldrh	r2, [r7, #6]
 800332e:	490e      	ldr	r1, [pc, #56]	@ (8003368 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	3308      	adds	r3, #8
 800333c:	4a0b      	ldr	r2, [pc, #44]	@ (800336c <BSP_LCD_LayerDefaultInit+0xc4>)
 800333e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003340:	88fa      	ldrh	r2, [r7, #6]
 8003342:	4909      	ldr	r1, [pc, #36]	@ (8003368 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003344:	4613      	mov	r3, r2
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8003352:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8003354:	4803      	ldr	r0, [pc, #12]	@ (8003364 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003356:	f002 f96b 	bl	8005630 <HAL_LTDC_EnableDither>
}
 800335a:	bf00      	nop
 800335c:	3740      	adds	r7, #64	@ 0x40
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000668 	.word	0x20000668
 8003368:	20000784 	.word	0x20000784
 800336c:	20000044 	.word	0x20000044

08003370 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003378:	4b07      	ldr	r3, [pc, #28]	@ (8003398 <BSP_LCD_SetTextColor+0x28>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	4907      	ldr	r1, [pc, #28]	@ (800339c <BSP_LCD_SetTextColor+0x2c>)
 800337e:	4613      	mov	r3, r2
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	601a      	str	r2, [r3, #0]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	20000780 	.word	0x20000780
 800339c:	20000784 	.word	0x20000784

080033a0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80033a8:	4b08      	ldr	r3, [pc, #32]	@ (80033cc <BSP_LCD_SetFont+0x2c>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4908      	ldr	r1, [pc, #32]	@ (80033d0 <BSP_LCD_SetFont+0x30>)
 80033ae:	4613      	mov	r3, r2
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	3308      	adds	r3, #8
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	601a      	str	r2, [r3, #0]
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20000780 	.word	0x20000780
 80033d0:	20000784 	.word	0x20000784

080033d4 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80033d8:	4b07      	ldr	r3, [pc, #28]	@ (80033f8 <BSP_LCD_GetFont+0x24>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4907      	ldr	r1, [pc, #28]	@ (80033fc <BSP_LCD_GetFont+0x28>)
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	3308      	adds	r3, #8
 80033ea:	681b      	ldr	r3, [r3, #0]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	20000780 	.word	0x20000780
 80033fc:	20000784 	.word	0x20000784

08003400 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003402:	b085      	sub	sp, #20
 8003404:	af02      	add	r7, sp, #8
 8003406:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003408:	4b0f      	ldr	r3, [pc, #60]	@ (8003448 <BSP_LCD_Clear+0x48>)
 800340a:	681c      	ldr	r4, [r3, #0]
 800340c:	4b0e      	ldr	r3, [pc, #56]	@ (8003448 <BSP_LCD_Clear+0x48>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a0e      	ldr	r2, [pc, #56]	@ (800344c <BSP_LCD_Clear+0x4c>)
 8003412:	2134      	movs	r1, #52	@ 0x34
 8003414:	fb01 f303 	mul.w	r3, r1, r3
 8003418:	4413      	add	r3, r2
 800341a:	335c      	adds	r3, #92	@ 0x5c
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	461e      	mov	r6, r3
 8003420:	f7ff ff2a 	bl	8003278 <BSP_LCD_GetXSize>
 8003424:	4605      	mov	r5, r0
 8003426:	f7ff ff33 	bl	8003290 <BSP_LCD_GetYSize>
 800342a:	4602      	mov	r2, r0
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	2300      	movs	r3, #0
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	4613      	mov	r3, r2
 8003436:	462a      	mov	r2, r5
 8003438:	4631      	mov	r1, r6
 800343a:	4620      	mov	r0, r4
 800343c:	f000 fb32 	bl	8003aa4 <FillBuffer>
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003448:	20000780 	.word	0x20000780
 800344c:	20000668 	.word	0x20000668

08003450 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003450:	b590      	push	{r4, r7, lr}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	80fb      	strh	r3, [r7, #6]
 800345a:	460b      	mov	r3, r1
 800345c:	80bb      	strh	r3, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003462:	4b1b      	ldr	r3, [pc, #108]	@ (80034d0 <BSP_LCD_DisplayChar+0x80>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	491b      	ldr	r1, [pc, #108]	@ (80034d4 <BSP_LCD_DisplayChar+0x84>)
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	3308      	adds	r3, #8
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6819      	ldr	r1, [r3, #0]
 8003478:	78fb      	ldrb	r3, [r7, #3]
 800347a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800347e:	4b14      	ldr	r3, [pc, #80]	@ (80034d0 <BSP_LCD_DisplayChar+0x80>)
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	4c14      	ldr	r4, [pc, #80]	@ (80034d4 <BSP_LCD_DisplayChar+0x84>)
 8003484:	4613      	mov	r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4423      	add	r3, r4
 800348e:	3308      	adds	r3, #8
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003494:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003498:	4b0d      	ldr	r3, [pc, #52]	@ (80034d0 <BSP_LCD_DisplayChar+0x80>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4c0d      	ldr	r4, [pc, #52]	@ (80034d4 <BSP_LCD_DisplayChar+0x84>)
 800349e:	4613      	mov	r3, r2
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4423      	add	r3, r4
 80034a8:	3308      	adds	r3, #8
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	889b      	ldrh	r3, [r3, #4]
 80034ae:	3307      	adds	r3, #7
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	da00      	bge.n	80034b6 <BSP_LCD_DisplayChar+0x66>
 80034b4:	3307      	adds	r3, #7
 80034b6:	10db      	asrs	r3, r3, #3
 80034b8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80034bc:	18ca      	adds	r2, r1, r3
 80034be:	88b9      	ldrh	r1, [r7, #4]
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fa34 	bl	8003930 <DrawChar>
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd90      	pop	{r4, r7, pc}
 80034d0:	20000780 	.word	0x20000780
 80034d4:	20000784 	.word	0x20000784

080034d8 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80034d8:	b5b0      	push	{r4, r5, r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60ba      	str	r2, [r7, #8]
 80034e0:	461a      	mov	r2, r3
 80034e2:	4603      	mov	r3, r0
 80034e4:	81fb      	strh	r3, [r7, #14]
 80034e6:	460b      	mov	r3, r1
 80034e8:	81bb      	strh	r3, [r7, #12]
 80034ea:	4613      	mov	r3, r2
 80034ec:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80034ee:	2301      	movs	r3, #1
 80034f0:	83fb      	strh	r3, [r7, #30]
 80034f2:	2300      	movs	r3, #0
 80034f4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80034f6:	2300      	movs	r3, #0
 80034f8:	61bb      	str	r3, [r7, #24]
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003502:	e002      	b.n	800350a <BSP_LCD_DisplayStringAt+0x32>
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	3301      	adds	r3, #1
 8003508:	61bb      	str	r3, [r7, #24]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	617a      	str	r2, [r7, #20]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f6      	bne.n	8003504 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003516:	f7ff feaf 	bl	8003278 <BSP_LCD_GetXSize>
 800351a:	4601      	mov	r1, r0
 800351c:	4b4b      	ldr	r3, [pc, #300]	@ (800364c <BSP_LCD_DisplayStringAt+0x174>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	484b      	ldr	r0, [pc, #300]	@ (8003650 <BSP_LCD_DisplayStringAt+0x178>)
 8003522:	4613      	mov	r3, r2
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4403      	add	r3, r0
 800352c:	3308      	adds	r3, #8
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	889b      	ldrh	r3, [r3, #4]
 8003532:	fbb1 f3f3 	udiv	r3, r1, r3
 8003536:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8003538:	79fb      	ldrb	r3, [r7, #7]
 800353a:	2b03      	cmp	r3, #3
 800353c:	d01c      	beq.n	8003578 <BSP_LCD_DisplayStringAt+0xa0>
 800353e:	2b03      	cmp	r3, #3
 8003540:	dc33      	bgt.n	80035aa <BSP_LCD_DisplayStringAt+0xd2>
 8003542:	2b01      	cmp	r3, #1
 8003544:	d002      	beq.n	800354c <BSP_LCD_DisplayStringAt+0x74>
 8003546:	2b02      	cmp	r3, #2
 8003548:	d019      	beq.n	800357e <BSP_LCD_DisplayStringAt+0xa6>
 800354a:	e02e      	b.n	80035aa <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	1ad1      	subs	r1, r2, r3
 8003552:	4b3e      	ldr	r3, [pc, #248]	@ (800364c <BSP_LCD_DisplayStringAt+0x174>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	483e      	ldr	r0, [pc, #248]	@ (8003650 <BSP_LCD_DisplayStringAt+0x178>)
 8003558:	4613      	mov	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4403      	add	r3, r0
 8003562:	3308      	adds	r3, #8
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	889b      	ldrh	r3, [r3, #4]
 8003568:	fb01 f303 	mul.w	r3, r1, r3
 800356c:	085b      	lsrs	r3, r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	89fb      	ldrh	r3, [r7, #14]
 8003572:	4413      	add	r3, r2
 8003574:	83fb      	strh	r3, [r7, #30]
      break;
 8003576:	e01b      	b.n	80035b0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003578:	89fb      	ldrh	r3, [r7, #14]
 800357a:	83fb      	strh	r3, [r7, #30]
      break;
 800357c:	e018      	b.n	80035b0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	b299      	uxth	r1, r3
 8003586:	4b31      	ldr	r3, [pc, #196]	@ (800364c <BSP_LCD_DisplayStringAt+0x174>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4831      	ldr	r0, [pc, #196]	@ (8003650 <BSP_LCD_DisplayStringAt+0x178>)
 800358c:	4613      	mov	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4403      	add	r3, r0
 8003596:	3308      	adds	r3, #8
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	889b      	ldrh	r3, [r3, #4]
 800359c:	fb11 f303 	smulbb	r3, r1, r3
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	89fb      	ldrh	r3, [r7, #14]
 80035a4:	4413      	add	r3, r2
 80035a6:	83fb      	strh	r3, [r7, #30]
      break;
 80035a8:	e002      	b.n	80035b0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80035aa:	89fb      	ldrh	r3, [r7, #14]
 80035ac:	83fb      	strh	r3, [r7, #30]
      break;
 80035ae:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80035b0:	e01a      	b.n	80035e8 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	781a      	ldrb	r2, [r3, #0]
 80035b6:	89b9      	ldrh	r1, [r7, #12]
 80035b8:	8bfb      	ldrh	r3, [r7, #30]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff ff48 	bl	8003450 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80035c0:	4b22      	ldr	r3, [pc, #136]	@ (800364c <BSP_LCD_DisplayStringAt+0x174>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4922      	ldr	r1, [pc, #136]	@ (8003650 <BSP_LCD_DisplayStringAt+0x178>)
 80035c6:	4613      	mov	r3, r2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	3308      	adds	r3, #8
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	889a      	ldrh	r2, [r3, #4]
 80035d6:	8bfb      	ldrh	r3, [r7, #30]
 80035d8:	4413      	add	r3, r2
 80035da:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	3301      	adds	r3, #1
 80035e0:	60bb      	str	r3, [r7, #8]
    i++;
 80035e2:	8bbb      	ldrh	r3, [r7, #28]
 80035e4:	3301      	adds	r3, #1
 80035e6:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf14      	ite	ne
 80035f0:	2301      	movne	r3, #1
 80035f2:	2300      	moveq	r3, #0
 80035f4:	b2dc      	uxtb	r4, r3
 80035f6:	f7ff fe3f 	bl	8003278 <BSP_LCD_GetXSize>
 80035fa:	8bb9      	ldrh	r1, [r7, #28]
 80035fc:	4b13      	ldr	r3, [pc, #76]	@ (800364c <BSP_LCD_DisplayStringAt+0x174>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4d13      	ldr	r5, [pc, #76]	@ (8003650 <BSP_LCD_DisplayStringAt+0x178>)
 8003602:	4613      	mov	r3, r2
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	442b      	add	r3, r5
 800360c:	3308      	adds	r3, #8
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	889b      	ldrh	r3, [r3, #4]
 8003612:	fb01 f303 	mul.w	r3, r1, r3
 8003616:	1ac3      	subs	r3, r0, r3
 8003618:	b299      	uxth	r1, r3
 800361a:	4b0c      	ldr	r3, [pc, #48]	@ (800364c <BSP_LCD_DisplayStringAt+0x174>)
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	480c      	ldr	r0, [pc, #48]	@ (8003650 <BSP_LCD_DisplayStringAt+0x178>)
 8003620:	4613      	mov	r3, r2
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4403      	add	r3, r0
 800362a:	3308      	adds	r3, #8
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	889b      	ldrh	r3, [r3, #4]
 8003630:	4299      	cmp	r1, r3
 8003632:	bf2c      	ite	cs
 8003634:	2301      	movcs	r3, #1
 8003636:	2300      	movcc	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	4023      	ands	r3, r4
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1b7      	bne.n	80035b2 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8003642:	bf00      	nop
 8003644:	bf00      	nop
 8003646:	3720      	adds	r7, #32
 8003648:	46bd      	mov	sp, r7
 800364a:	bdb0      	pop	{r4, r5, r7, pc}
 800364c:	20000780 	.word	0x20000780
 8003650:	20000784 	.word	0x20000784

08003654 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	6039      	str	r1, [r7, #0]
 800365e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8003660:	f7ff feb8 	bl	80033d4 <BSP_LCD_GetFont>
 8003664:	4603      	mov	r3, r0
 8003666:	88db      	ldrh	r3, [r3, #6]
 8003668:	88fa      	ldrh	r2, [r7, #6]
 800366a:	fb12 f303 	smulbb	r3, r2, r3
 800366e:	b299      	uxth	r1, r3
 8003670:	2303      	movs	r3, #3
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	2000      	movs	r0, #0
 8003676:	f7ff ff2f 	bl	80034d8 <BSP_LCD_DisplayStringAt>
}
 800367a:	bf00      	nop
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003688:	b086      	sub	sp, #24
 800368a:	af02      	add	r7, sp, #8
 800368c:	4604      	mov	r4, r0
 800368e:	4608      	mov	r0, r1
 8003690:	4611      	mov	r1, r2
 8003692:	461a      	mov	r2, r3
 8003694:	4623      	mov	r3, r4
 8003696:	80fb      	strh	r3, [r7, #6]
 8003698:	4603      	mov	r3, r0
 800369a:	80bb      	strh	r3, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	807b      	strh	r3, [r7, #2]
 80036a0:	4613      	mov	r3, r2
 80036a2:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80036a8:	4b20      	ldr	r3, [pc, #128]	@ (800372c <BSP_LCD_FillRect+0xa8>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	4920      	ldr	r1, [pc, #128]	@ (8003730 <BSP_LCD_FillRect+0xac>)
 80036ae:	4613      	mov	r3, r2
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fe58 	bl	8003370 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80036c0:	4b1a      	ldr	r3, [pc, #104]	@ (800372c <BSP_LCD_FillRect+0xa8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003734 <BSP_LCD_FillRect+0xb0>)
 80036c6:	2134      	movs	r1, #52	@ 0x34
 80036c8:	fb01 f303 	mul.w	r3, r1, r3
 80036cc:	4413      	add	r3, r2
 80036ce:	335c      	adds	r3, #92	@ 0x5c
 80036d0:	681c      	ldr	r4, [r3, #0]
 80036d2:	f7ff fdd1 	bl	8003278 <BSP_LCD_GetXSize>
 80036d6:	4602      	mov	r2, r0
 80036d8:	88bb      	ldrh	r3, [r7, #4]
 80036da:	fb03 f202 	mul.w	r2, r3, r2
 80036de:	88fb      	ldrh	r3, [r7, #6]
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4423      	add	r3, r4
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80036e8:	4b10      	ldr	r3, [pc, #64]	@ (800372c <BSP_LCD_FillRect+0xa8>)
 80036ea:	681c      	ldr	r4, [r3, #0]
 80036ec:	68fd      	ldr	r5, [r7, #12]
 80036ee:	887e      	ldrh	r6, [r7, #2]
 80036f0:	f8b7 8000 	ldrh.w	r8, [r7]
 80036f4:	f7ff fdc0 	bl	8003278 <BSP_LCD_GetXSize>
 80036f8:	4602      	mov	r2, r0
 80036fa:	887b      	ldrh	r3, [r7, #2]
 80036fc:	1ad1      	subs	r1, r2, r3
 80036fe:	4b0b      	ldr	r3, [pc, #44]	@ (800372c <BSP_LCD_FillRect+0xa8>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	480b      	ldr	r0, [pc, #44]	@ (8003730 <BSP_LCD_FillRect+0xac>)
 8003704:	4613      	mov	r3, r2
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4403      	add	r3, r0
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	9301      	str	r3, [sp, #4]
 8003712:	9100      	str	r1, [sp, #0]
 8003714:	4643      	mov	r3, r8
 8003716:	4632      	mov	r2, r6
 8003718:	4629      	mov	r1, r5
 800371a:	4620      	mov	r0, r4
 800371c:	f000 f9c2 	bl	8003aa4 <FillBuffer>
}
 8003720:	bf00      	nop
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800372a:	bf00      	nop
 800372c:	20000780 	.word	0x20000780
 8003730:	20000784 	.word	0x20000784
 8003734:	20000668 	.word	0x20000668

08003738 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08e      	sub	sp, #56	@ 0x38
 800373c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	623b      	str	r3, [r7, #32]
 8003742:	4b61      	ldr	r3, [pc, #388]	@ (80038c8 <BSP_LCD_MspInit+0x190>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003746:	4a60      	ldr	r2, [pc, #384]	@ (80038c8 <BSP_LCD_MspInit+0x190>)
 8003748:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800374c:	6453      	str	r3, [r2, #68]	@ 0x44
 800374e:	4b5e      	ldr	r3, [pc, #376]	@ (80038c8 <BSP_LCD_MspInit+0x190>)
 8003750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003752:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003756:	623b      	str	r3, [r7, #32]
 8003758:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800375a:	2300      	movs	r3, #0
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	4b5a      	ldr	r3, [pc, #360]	@ (80038c8 <BSP_LCD_MspInit+0x190>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003762:	4a59      	ldr	r2, [pc, #356]	@ (80038c8 <BSP_LCD_MspInit+0x190>)
 8003764:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003768:	6313      	str	r3, [r2, #48]	@ 0x30
 800376a:	4b57      	ldr	r3, [pc, #348]	@ (80038c8 <BSP_LCD_MspInit+0x190>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003772:	61fb      	str	r3, [r7, #28]
 8003774:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	4b53      	ldr	r3, [pc, #332]	@ (80038c8 <BSP_LCD_MspInit+0x190>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377e:	4a52      	ldr	r2, [pc, #328]	@ (80038c8 <BSP_LCD_MspInit+0x190>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	6313      	str	r3, [r2, #48]	@ 0x30
 8003786:	4b50      	ldr	r3, [pc, #320]	@ (80038c8 <BSP_LCD_MspInit+0x190>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	61bb      	str	r3, [r7, #24]
 8003790:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	4b4c      	ldr	r3, [pc, #304]	@ (80038c8 <BSP_LCD_MspInit+0x190>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379a:	4a4b      	ldr	r2, [pc, #300]	@ (80038c8 <BSP_LCD_MspInit+0x190>)
 800379c:	f043 0302 	orr.w	r3, r3, #2
 80037a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037a2:	4b49      	ldr	r3, [pc, #292]	@ (80038c8 <BSP_LCD_MspInit+0x190>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	613b      	str	r3, [r7, #16]
 80037b2:	4b45      	ldr	r3, [pc, #276]	@ (80038c8 <BSP_LCD_MspInit+0x190>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b6:	4a44      	ldr	r2, [pc, #272]	@ (80038c8 <BSP_LCD_MspInit+0x190>)
 80037b8:	f043 0304 	orr.w	r3, r3, #4
 80037bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80037be:	4b42      	ldr	r3, [pc, #264]	@ (80038c8 <BSP_LCD_MspInit+0x190>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	613b      	str	r3, [r7, #16]
 80037c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	4b3e      	ldr	r3, [pc, #248]	@ (80038c8 <BSP_LCD_MspInit+0x190>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d2:	4a3d      	ldr	r2, [pc, #244]	@ (80038c8 <BSP_LCD_MspInit+0x190>)
 80037d4:	f043 0308 	orr.w	r3, r3, #8
 80037d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037da:	4b3b      	ldr	r3, [pc, #236]	@ (80038c8 <BSP_LCD_MspInit+0x190>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	4b37      	ldr	r3, [pc, #220]	@ (80038c8 <BSP_LCD_MspInit+0x190>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ee:	4a36      	ldr	r2, [pc, #216]	@ (80038c8 <BSP_LCD_MspInit+0x190>)
 80037f0:	f043 0320 	orr.w	r3, r3, #32
 80037f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037f6:	4b34      	ldr	r3, [pc, #208]	@ (80038c8 <BSP_LCD_MspInit+0x190>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fa:	f003 0320 	and.w	r3, r3, #32
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	607b      	str	r3, [r7, #4]
 8003806:	4b30      	ldr	r3, [pc, #192]	@ (80038c8 <BSP_LCD_MspInit+0x190>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380a:	4a2f      	ldr	r2, [pc, #188]	@ (80038c8 <BSP_LCD_MspInit+0x190>)
 800380c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003810:	6313      	str	r3, [r2, #48]	@ 0x30
 8003812:	4b2d      	ldr	r3, [pc, #180]	@ (80038c8 <BSP_LCD_MspInit+0x190>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800381a:	607b      	str	r3, [r7, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800381e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003822:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003824:	2302      	movs	r3, #2
 8003826:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003828:	2300      	movs	r3, #0
 800382a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800382c:	2302      	movs	r3, #2
 800382e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003830:	230e      	movs	r3, #14
 8003832:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003838:	4619      	mov	r1, r3
 800383a:	4824      	ldr	r0, [pc, #144]	@ (80038cc <BSP_LCD_MspInit+0x194>)
 800383c:	f001 f926 	bl	8004a8c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003840:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003844:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800384a:	4619      	mov	r1, r3
 800384c:	4820      	ldr	r0, [pc, #128]	@ (80038d0 <BSP_LCD_MspInit+0x198>)
 800384e:	f001 f91d 	bl	8004a8c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003852:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003856:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800385c:	4619      	mov	r1, r3
 800385e:	481d      	ldr	r0, [pc, #116]	@ (80038d4 <BSP_LCD_MspInit+0x19c>)
 8003860:	f001 f914 	bl	8004a8c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003864:	2348      	movs	r3, #72	@ 0x48
 8003866:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003868:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800386c:	4619      	mov	r1, r3
 800386e:	481a      	ldr	r0, [pc, #104]	@ (80038d8 <BSP_LCD_MspInit+0x1a0>)
 8003870:	f001 f90c 	bl	8004a8c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003874:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003878:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800387a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800387e:	4619      	mov	r1, r3
 8003880:	4816      	ldr	r0, [pc, #88]	@ (80038dc <BSP_LCD_MspInit+0x1a4>)
 8003882:	f001 f903 	bl	8004a8c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003886:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800388a:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800388c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003890:	4619      	mov	r1, r3
 8003892:	4813      	ldr	r0, [pc, #76]	@ (80038e0 <BSP_LCD_MspInit+0x1a8>)
 8003894:	f001 f8fa 	bl	8004a8c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003898:	2303      	movs	r3, #3
 800389a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800389c:	2309      	movs	r3, #9
 800389e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80038a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038a4:	4619      	mov	r1, r3
 80038a6:	480a      	ldr	r0, [pc, #40]	@ (80038d0 <BSP_LCD_MspInit+0x198>)
 80038a8:	f001 f8f0 	bl	8004a8c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80038ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80038b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80038b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038b6:	4619      	mov	r1, r3
 80038b8:	4809      	ldr	r0, [pc, #36]	@ (80038e0 <BSP_LCD_MspInit+0x1a8>)
 80038ba:	f001 f8e7 	bl	8004a8c <HAL_GPIO_Init>
}
 80038be:	bf00      	nop
 80038c0:	3738      	adds	r7, #56	@ 0x38
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40023800 	.word	0x40023800
 80038cc:	40020000 	.word	0x40020000
 80038d0:	40020400 	.word	0x40020400
 80038d4:	40020800 	.word	0x40020800
 80038d8:	40020c00 	.word	0x40020c00
 80038dc:	40021400 	.word	0x40021400
 80038e0:	40021800 	.word	0x40021800

080038e4 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80038e4:	b5b0      	push	{r4, r5, r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	603a      	str	r2, [r7, #0]
 80038ee:	80fb      	strh	r3, [r7, #6]
 80038f0:	460b      	mov	r3, r1
 80038f2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80038f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003928 <BSP_LCD_DrawPixel+0x44>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a0c      	ldr	r2, [pc, #48]	@ (800392c <BSP_LCD_DrawPixel+0x48>)
 80038fa:	2134      	movs	r1, #52	@ 0x34
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	4413      	add	r3, r2
 8003902:	335c      	adds	r3, #92	@ 0x5c
 8003904:	681c      	ldr	r4, [r3, #0]
 8003906:	88bd      	ldrh	r5, [r7, #4]
 8003908:	f7ff fcb6 	bl	8003278 <BSP_LCD_GetXSize>
 800390c:	4603      	mov	r3, r0
 800390e:	fb03 f205 	mul.w	r2, r3, r5
 8003912:	88fb      	ldrh	r3, [r7, #6]
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4423      	add	r3, r4
 800391a:	461a      	mov	r2, r3
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	6013      	str	r3, [r2, #0]
}
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bdb0      	pop	{r4, r5, r7, pc}
 8003928:	20000780 	.word	0x20000780
 800392c:	20000668 	.word	0x20000668

08003930 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	603a      	str	r2, [r7, #0]
 800393a:	80fb      	strh	r3, [r7, #6]
 800393c:	460b      	mov	r3, r1
 800393e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	61fb      	str	r3, [r7, #28]
 8003944:	2300      	movs	r3, #0
 8003946:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 800394c:	4b53      	ldr	r3, [pc, #332]	@ (8003a9c <DrawChar+0x16c>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	4953      	ldr	r1, [pc, #332]	@ (8003aa0 <DrawChar+0x170>)
 8003952:	4613      	mov	r3, r2
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	4413      	add	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	3308      	adds	r3, #8
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	88db      	ldrh	r3, [r3, #6]
 8003962:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003964:	4b4d      	ldr	r3, [pc, #308]	@ (8003a9c <DrawChar+0x16c>)
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	494d      	ldr	r1, [pc, #308]	@ (8003aa0 <DrawChar+0x170>)
 800396a:	4613      	mov	r3, r2
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	3308      	adds	r3, #8
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	889b      	ldrh	r3, [r3, #4]
 800397a:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 800397c:	8a3b      	ldrh	r3, [r7, #16]
 800397e:	3307      	adds	r3, #7
 8003980:	2b00      	cmp	r3, #0
 8003982:	da00      	bge.n	8003986 <DrawChar+0x56>
 8003984:	3307      	adds	r3, #7
 8003986:	10db      	asrs	r3, r3, #3
 8003988:	b2db      	uxtb	r3, r3
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	b2da      	uxtb	r2, r3
 800398e:	8a3b      	ldrh	r3, [r7, #16]
 8003990:	b2db      	uxtb	r3, r3
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	e076      	b.n	8003a8a <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800399c:	8a3b      	ldrh	r3, [r7, #16]
 800399e:	3307      	adds	r3, #7
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	da00      	bge.n	80039a6 <DrawChar+0x76>
 80039a4:	3307      	adds	r3, #7
 80039a6:	10db      	asrs	r3, r3, #3
 80039a8:	461a      	mov	r2, r3
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	fb02 f303 	mul.w	r3, r2, r3
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	4413      	add	r3, r2
 80039b4:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80039b6:	8a3b      	ldrh	r3, [r7, #16]
 80039b8:	3307      	adds	r3, #7
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	da00      	bge.n	80039c0 <DrawChar+0x90>
 80039be:	3307      	adds	r3, #7
 80039c0:	10db      	asrs	r3, r3, #3
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d002      	beq.n	80039cc <DrawChar+0x9c>
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d004      	beq.n	80039d4 <DrawChar+0xa4>
 80039ca:	e00c      	b.n	80039e6 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	617b      	str	r3, [r7, #20]
      break;
 80039d2:	e016      	b.n	8003a02 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	3201      	adds	r2, #1
 80039de:	7812      	ldrb	r2, [r2, #0]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]
      break;
 80039e4:	e00d      	b.n	8003a02 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	041a      	lsls	r2, r3, #16
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	3301      	adds	r3, #1
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	021b      	lsls	r3, r3, #8
 80039f4:	4313      	orrs	r3, r2
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	3202      	adds	r2, #2
 80039fa:	7812      	ldrb	r2, [r2, #0]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
      break;
 8003a00:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	61bb      	str	r3, [r7, #24]
 8003a06:	e036      	b.n	8003a76 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003a08:	8a3a      	ldrh	r2, [r7, #16]
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	1ad2      	subs	r2, r2, r3
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	4413      	add	r3, r2
 8003a12:	3b01      	subs	r3, #1
 8003a14:	2201      	movs	r2, #1
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d012      	beq.n	8003a4a <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	88fb      	ldrh	r3, [r7, #6]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	b298      	uxth	r0, r3
 8003a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a9c <DrawChar+0x16c>)
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	491b      	ldr	r1, [pc, #108]	@ (8003aa0 <DrawChar+0x170>)
 8003a34:	4613      	mov	r3, r2
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	4413      	add	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	88bb      	ldrh	r3, [r7, #4]
 8003a42:	4619      	mov	r1, r3
 8003a44:	f7ff ff4e 	bl	80038e4 <BSP_LCD_DrawPixel>
 8003a48:	e012      	b.n	8003a70 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	4413      	add	r3, r2
 8003a52:	b298      	uxth	r0, r3
 8003a54:	4b11      	ldr	r3, [pc, #68]	@ (8003a9c <DrawChar+0x16c>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	4911      	ldr	r1, [pc, #68]	@ (8003aa0 <DrawChar+0x170>)
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	4413      	add	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	3304      	adds	r3, #4
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	88bb      	ldrh	r3, [r7, #4]
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	f7ff ff3a 	bl	80038e4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	3301      	adds	r3, #1
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	8a3b      	ldrh	r3, [r7, #16]
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d3c4      	bcc.n	8003a08 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003a7e:	88bb      	ldrh	r3, [r7, #4]
 8003a80:	3301      	adds	r3, #1
 8003a82:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	3301      	adds	r3, #1
 8003a88:	61fb      	str	r3, [r7, #28]
 8003a8a:	8a7b      	ldrh	r3, [r7, #18]
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d384      	bcc.n	800399c <DrawChar+0x6c>
  }
}
 8003a92:	bf00      	nop
 8003a94:	bf00      	nop
 8003a96:	3720      	adds	r7, #32
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20000780 	.word	0x20000780
 8003aa0:	20000784 	.word	0x20000784

08003aa4 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003ab2:	4b16      	ldr	r3, [pc, #88]	@ (8003b0c <FillBuffer+0x68>)
 8003ab4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003ab8:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003aba:	4b14      	ldr	r3, [pc, #80]	@ (8003b0c <FillBuffer+0x68>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003ac0:	4a12      	ldr	r2, [pc, #72]	@ (8003b0c <FillBuffer+0x68>)
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003ac6:	4b11      	ldr	r3, [pc, #68]	@ (8003b0c <FillBuffer+0x68>)
 8003ac8:	4a11      	ldr	r2, [pc, #68]	@ (8003b10 <FillBuffer+0x6c>)
 8003aca:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003acc:	480f      	ldr	r0, [pc, #60]	@ (8003b0c <FillBuffer+0x68>)
 8003ace:	f000 fd51 	bl	8004574 <HAL_DMA2D_Init>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d115      	bne.n	8003b04 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003ad8:	68f9      	ldr	r1, [r7, #12]
 8003ada:	480c      	ldr	r0, [pc, #48]	@ (8003b0c <FillBuffer+0x68>)
 8003adc:	f000 fea8 	bl	8004830 <HAL_DMA2D_ConfigLayer>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10e      	bne.n	8003b04 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	69f9      	ldr	r1, [r7, #28]
 8003af0:	4806      	ldr	r0, [pc, #24]	@ (8003b0c <FillBuffer+0x68>)
 8003af2:	f000 fd88 	bl	8004606 <HAL_DMA2D_Start>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d103      	bne.n	8003b04 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003afc:	210a      	movs	r1, #10
 8003afe:	4803      	ldr	r0, [pc, #12]	@ (8003b0c <FillBuffer+0x68>)
 8003b00:	f000 fdac 	bl	800465c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003b04:	bf00      	nop
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	20000710 	.word	0x20000710
 8003b10:	4002b000 	.word	0x4002b000

08003b14 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003b18:	4b29      	ldr	r3, [pc, #164]	@ (8003bc0 <BSP_SDRAM_Init+0xac>)
 8003b1a:	4a2a      	ldr	r2, [pc, #168]	@ (8003bc4 <BSP_SDRAM_Init+0xb0>)
 8003b1c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8003bc8 <BSP_SDRAM_Init+0xb4>)
 8003b20:	2202      	movs	r2, #2
 8003b22:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003b24:	4b28      	ldr	r3, [pc, #160]	@ (8003bc8 <BSP_SDRAM_Init+0xb4>)
 8003b26:	2207      	movs	r2, #7
 8003b28:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003b2a:	4b27      	ldr	r3, [pc, #156]	@ (8003bc8 <BSP_SDRAM_Init+0xb4>)
 8003b2c:	2204      	movs	r2, #4
 8003b2e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003b30:	4b25      	ldr	r3, [pc, #148]	@ (8003bc8 <BSP_SDRAM_Init+0xb4>)
 8003b32:	2207      	movs	r2, #7
 8003b34:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003b36:	4b24      	ldr	r3, [pc, #144]	@ (8003bc8 <BSP_SDRAM_Init+0xb4>)
 8003b38:	2202      	movs	r2, #2
 8003b3a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003b3c:	4b22      	ldr	r3, [pc, #136]	@ (8003bc8 <BSP_SDRAM_Init+0xb4>)
 8003b3e:	2202      	movs	r2, #2
 8003b40:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003b42:	4b21      	ldr	r3, [pc, #132]	@ (8003bc8 <BSP_SDRAM_Init+0xb4>)
 8003b44:	2202      	movs	r2, #2
 8003b46:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003b48:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc0 <BSP_SDRAM_Init+0xac>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc0 <BSP_SDRAM_Init+0xac>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003b54:	4b1a      	ldr	r3, [pc, #104]	@ (8003bc0 <BSP_SDRAM_Init+0xac>)
 8003b56:	2204      	movs	r2, #4
 8003b58:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003b5a:	4b19      	ldr	r3, [pc, #100]	@ (8003bc0 <BSP_SDRAM_Init+0xac>)
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003b60:	4b17      	ldr	r3, [pc, #92]	@ (8003bc0 <BSP_SDRAM_Init+0xac>)
 8003b62:	2240      	movs	r2, #64	@ 0x40
 8003b64:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003b66:	4b16      	ldr	r3, [pc, #88]	@ (8003bc0 <BSP_SDRAM_Init+0xac>)
 8003b68:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8003b6c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003b6e:	4b14      	ldr	r3, [pc, #80]	@ (8003bc0 <BSP_SDRAM_Init+0xac>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003b74:	4b12      	ldr	r3, [pc, #72]	@ (8003bc0 <BSP_SDRAM_Init+0xac>)
 8003b76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b7a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003b7c:	4b10      	ldr	r3, [pc, #64]	@ (8003bc0 <BSP_SDRAM_Init+0xac>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003b82:	4b0f      	ldr	r3, [pc, #60]	@ (8003bc0 <BSP_SDRAM_Init+0xac>)
 8003b84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b88:	629a      	str	r2, [r3, #40]	@ 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	480c      	ldr	r0, [pc, #48]	@ (8003bc0 <BSP_SDRAM_Init+0xac>)
 8003b8e:	f000 f87f 	bl	8003c90 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003b92:	490d      	ldr	r1, [pc, #52]	@ (8003bc8 <BSP_SDRAM_Init+0xb4>)
 8003b94:	480a      	ldr	r0, [pc, #40]	@ (8003bc0 <BSP_SDRAM_Init+0xac>)
 8003b96:	f002 fda1 	bl	80066dc <HAL_SDRAM_Init>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bcc <BSP_SDRAM_Init+0xb8>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	701a      	strb	r2, [r3, #0]
 8003ba6:	e002      	b.n	8003bae <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003ba8:	4b08      	ldr	r3, [pc, #32]	@ (8003bcc <BSP_SDRAM_Init+0xb8>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003bae:	f240 506a 	movw	r0, #1386	@ 0x56a
 8003bb2:	f000 f80d 	bl	8003bd0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003bb6:	4b05      	ldr	r3, [pc, #20]	@ (8003bcc <BSP_SDRAM_Init+0xb8>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	200007a0 	.word	0x200007a0
 8003bc4:	a0000140 	.word	0xa0000140
 8003bc8:	200007d4 	.word	0x200007d4
 8003bcc:	2000004c 	.word	0x2000004c

08003bd0 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8003c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bde:	2201      	movs	r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003be2:	4b29      	ldr	r3, [pc, #164]	@ (8003c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003be4:	2208      	movs	r2, #8
 8003be6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003be8:	4b27      	ldr	r3, [pc, #156]	@ (8003c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003bee:	4b26      	ldr	r3, [pc, #152]	@ (8003c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003bf4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003bf8:	4923      	ldr	r1, [pc, #140]	@ (8003c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bfa:	4824      	ldr	r0, [pc, #144]	@ (8003c8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003bfc:	f002 fda2 	bl	8006744 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003c00:	2001      	movs	r0, #1
 8003c02:	f000 f9c3 	bl	8003f8c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003c06:	4b20      	ldr	r3, [pc, #128]	@ (8003c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c08:	2202      	movs	r2, #2
 8003c0a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8003c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c0e:	2208      	movs	r2, #8
 8003c10:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003c12:	4b1d      	ldr	r3, [pc, #116]	@ (8003c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003c18:	4b1b      	ldr	r3, [pc, #108]	@ (8003c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003c1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c22:	4919      	ldr	r1, [pc, #100]	@ (8003c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c24:	4819      	ldr	r0, [pc, #100]	@ (8003c8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c26:	f002 fd8d 	bl	8006744 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003c2a:	4b17      	ldr	r3, [pc, #92]	@ (8003c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c2c:	2203      	movs	r2, #3
 8003c2e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003c30:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c32:	2208      	movs	r2, #8
 8003c34:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003c36:	4b14      	ldr	r3, [pc, #80]	@ (8003c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c38:	2204      	movs	r2, #4
 8003c3a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003c3c:	4b12      	ldr	r3, [pc, #72]	@ (8003c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003c42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c46:	4910      	ldr	r1, [pc, #64]	@ (8003c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c48:	4810      	ldr	r0, [pc, #64]	@ (8003c8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c4a:	f002 fd7b 	bl	8006744 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003c4e:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8003c52:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003c54:	4b0c      	ldr	r3, [pc, #48]	@ (8003c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c56:	2204      	movs	r2, #4
 8003c58:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c5c:	2208      	movs	r2, #8
 8003c5e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003c60:	4b09      	ldr	r3, [pc, #36]	@ (8003c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4a07      	ldr	r2, [pc, #28]	@ (8003c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c6a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003c6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c70:	4905      	ldr	r1, [pc, #20]	@ (8003c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c72:	4806      	ldr	r0, [pc, #24]	@ (8003c8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c74:	f002 fd66 	bl	8006744 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4804      	ldr	r0, [pc, #16]	@ (8003c8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c7c:	f002 fd97 	bl	80067ae <HAL_SDRAM_ProgramRefreshRate>
}
 8003c80:	bf00      	nop
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	200007f0 	.word	0x200007f0
 8003c8c:	200007a0 	.word	0x200007a0

08003c90 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b090      	sub	sp, #64	@ 0x40
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 80ec 	beq.w	8003e7a <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ca6:	4b77      	ldr	r3, [pc, #476]	@ (8003e84 <BSP_SDRAM_MspInit+0x1f4>)
 8003ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003caa:	4a76      	ldr	r2, [pc, #472]	@ (8003e84 <BSP_SDRAM_MspInit+0x1f4>)
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	6393      	str	r3, [r2, #56]	@ 0x38
 8003cb2:	4b74      	ldr	r3, [pc, #464]	@ (8003e84 <BSP_SDRAM_MspInit+0x1f4>)
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cc2:	4b70      	ldr	r3, [pc, #448]	@ (8003e84 <BSP_SDRAM_MspInit+0x1f4>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc6:	4a6f      	ldr	r2, [pc, #444]	@ (8003e84 <BSP_SDRAM_MspInit+0x1f4>)
 8003cc8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cce:	4b6d      	ldr	r3, [pc, #436]	@ (8003e84 <BSP_SDRAM_MspInit+0x1f4>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cda:	2300      	movs	r3, #0
 8003cdc:	623b      	str	r3, [r7, #32]
 8003cde:	4b69      	ldr	r3, [pc, #420]	@ (8003e84 <BSP_SDRAM_MspInit+0x1f4>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce2:	4a68      	ldr	r2, [pc, #416]	@ (8003e84 <BSP_SDRAM_MspInit+0x1f4>)
 8003ce4:	f043 0302 	orr.w	r3, r3, #2
 8003ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cea:	4b66      	ldr	r3, [pc, #408]	@ (8003e84 <BSP_SDRAM_MspInit+0x1f4>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	623b      	str	r3, [r7, #32]
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61fb      	str	r3, [r7, #28]
 8003cfa:	4b62      	ldr	r3, [pc, #392]	@ (8003e84 <BSP_SDRAM_MspInit+0x1f4>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfe:	4a61      	ldr	r2, [pc, #388]	@ (8003e84 <BSP_SDRAM_MspInit+0x1f4>)
 8003d00:	f043 0304 	orr.w	r3, r3, #4
 8003d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d06:	4b5f      	ldr	r3, [pc, #380]	@ (8003e84 <BSP_SDRAM_MspInit+0x1f4>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	61fb      	str	r3, [r7, #28]
 8003d10:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d12:	2300      	movs	r3, #0
 8003d14:	61bb      	str	r3, [r7, #24]
 8003d16:	4b5b      	ldr	r3, [pc, #364]	@ (8003e84 <BSP_SDRAM_MspInit+0x1f4>)
 8003d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1a:	4a5a      	ldr	r2, [pc, #360]	@ (8003e84 <BSP_SDRAM_MspInit+0x1f4>)
 8003d1c:	f043 0308 	orr.w	r3, r3, #8
 8003d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d22:	4b58      	ldr	r3, [pc, #352]	@ (8003e84 <BSP_SDRAM_MspInit+0x1f4>)
 8003d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	61bb      	str	r3, [r7, #24]
 8003d2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	4b54      	ldr	r3, [pc, #336]	@ (8003e84 <BSP_SDRAM_MspInit+0x1f4>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d36:	4a53      	ldr	r2, [pc, #332]	@ (8003e84 <BSP_SDRAM_MspInit+0x1f4>)
 8003d38:	f043 0310 	orr.w	r3, r3, #16
 8003d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d3e:	4b51      	ldr	r3, [pc, #324]	@ (8003e84 <BSP_SDRAM_MspInit+0x1f4>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	4b4d      	ldr	r3, [pc, #308]	@ (8003e84 <BSP_SDRAM_MspInit+0x1f4>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d52:	4a4c      	ldr	r2, [pc, #304]	@ (8003e84 <BSP_SDRAM_MspInit+0x1f4>)
 8003d54:	f043 0320 	orr.w	r3, r3, #32
 8003d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d5a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e84 <BSP_SDRAM_MspInit+0x1f4>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	4b46      	ldr	r3, [pc, #280]	@ (8003e84 <BSP_SDRAM_MspInit+0x1f4>)
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6e:	4a45      	ldr	r2, [pc, #276]	@ (8003e84 <BSP_SDRAM_MspInit+0x1f4>)
 8003d70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d76:	4b43      	ldr	r3, [pc, #268]	@ (8003e84 <BSP_SDRAM_MspInit+0x1f4>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003d82:	2302      	movs	r3, #2
 8003d84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003d86:	2302      	movs	r3, #2
 8003d88:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003d8e:	230c      	movs	r3, #12
 8003d90:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003d92:	2360      	movs	r3, #96	@ 0x60
 8003d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003d96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	483a      	ldr	r0, [pc, #232]	@ (8003e88 <BSP_SDRAM_MspInit+0x1f8>)
 8003d9e:	f000 fe75 	bl	8004a8c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003da2:	2301      	movs	r3, #1
 8003da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003da6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003daa:	4619      	mov	r1, r3
 8003dac:	4837      	ldr	r0, [pc, #220]	@ (8003e8c <BSP_SDRAM_MspInit+0x1fc>)
 8003dae:	f000 fe6d 	bl	8004a8c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003db2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003db8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4834      	ldr	r0, [pc, #208]	@ (8003e90 <BSP_SDRAM_MspInit+0x200>)
 8003dc0:	f000 fe64 	bl	8004a8c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003dc4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003dca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003dce:	4619      	mov	r1, r3
 8003dd0:	4830      	ldr	r0, [pc, #192]	@ (8003e94 <BSP_SDRAM_MspInit+0x204>)
 8003dd2:	f000 fe5b 	bl	8004a8c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003dd6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003ddc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003de0:	4619      	mov	r1, r3
 8003de2:	482d      	ldr	r0, [pc, #180]	@ (8003e98 <BSP_SDRAM_MspInit+0x208>)
 8003de4:	f000 fe52 	bl	8004a8c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003de8:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003dee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003df2:	4619      	mov	r1, r3
 8003df4:	4829      	ldr	r0, [pc, #164]	@ (8003e9c <BSP_SDRAM_MspInit+0x20c>)
 8003df6:	f000 fe49 	bl	8004a8c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003dfa:	4b29      	ldr	r3, [pc, #164]	@ (8003ea0 <BSP_SDRAM_MspInit+0x210>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003e00:	4b27      	ldr	r3, [pc, #156]	@ (8003ea0 <BSP_SDRAM_MspInit+0x210>)
 8003e02:	2280      	movs	r2, #128	@ 0x80
 8003e04:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003e06:	4b26      	ldr	r3, [pc, #152]	@ (8003ea0 <BSP_SDRAM_MspInit+0x210>)
 8003e08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e0c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003e0e:	4b24      	ldr	r3, [pc, #144]	@ (8003ea0 <BSP_SDRAM_MspInit+0x210>)
 8003e10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e14:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003e16:	4b22      	ldr	r3, [pc, #136]	@ (8003ea0 <BSP_SDRAM_MspInit+0x210>)
 8003e18:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003e1c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003e1e:	4b20      	ldr	r3, [pc, #128]	@ (8003ea0 <BSP_SDRAM_MspInit+0x210>)
 8003e20:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e24:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003e26:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea0 <BSP_SDRAM_MspInit+0x210>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ea0 <BSP_SDRAM_MspInit+0x210>)
 8003e2e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003e32:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003e34:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea0 <BSP_SDRAM_MspInit+0x210>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	625a      	str	r2, [r3, #36]	@ 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003e3a:	4b19      	ldr	r3, [pc, #100]	@ (8003ea0 <BSP_SDRAM_MspInit+0x210>)
 8003e3c:	2203      	movs	r2, #3
 8003e3e:	629a      	str	r2, [r3, #40]	@ 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003e40:	4b17      	ldr	r3, [pc, #92]	@ (8003ea0 <BSP_SDRAM_MspInit+0x210>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	62da      	str	r2, [r3, #44]	@ 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003e46:	4b16      	ldr	r3, [pc, #88]	@ (8003ea0 <BSP_SDRAM_MspInit+0x210>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003e4c:	4b14      	ldr	r3, [pc, #80]	@ (8003ea0 <BSP_SDRAM_MspInit+0x210>)
 8003e4e:	4a15      	ldr	r2, [pc, #84]	@ (8003ea4 <BSP_SDRAM_MspInit+0x214>)
 8003e50:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a12      	ldr	r2, [pc, #72]	@ (8003ea0 <BSP_SDRAM_MspInit+0x210>)
 8003e56:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e58:	4a11      	ldr	r2, [pc, #68]	@ (8003ea0 <BSP_SDRAM_MspInit+0x210>)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003e5e:	4810      	ldr	r0, [pc, #64]	@ (8003ea0 <BSP_SDRAM_MspInit+0x210>)
 8003e60:	f000 fa78 	bl	8004354 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003e64:	480e      	ldr	r0, [pc, #56]	@ (8003ea0 <BSP_SDRAM_MspInit+0x210>)
 8003e66:	f000 f9c7 	bl	80041f8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	210f      	movs	r1, #15
 8003e6e:	2038      	movs	r0, #56	@ 0x38
 8003e70:	f000 f98b 	bl	800418a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003e74:	2038      	movs	r0, #56	@ 0x38
 8003e76:	f000 f9a4 	bl	80041c2 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003e7a:	bf00      	nop
 8003e7c:	3740      	adds	r7, #64	@ 0x40
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40023800 	.word	0x40023800
 8003e88:	40020400 	.word	0x40020400
 8003e8c:	40020800 	.word	0x40020800
 8003e90:	40020c00 	.word	0x40020c00
 8003e94:	40021000 	.word	0x40021000
 8003e98:	40021400 	.word	0x40021400
 8003e9c:	40021800 	.word	0x40021800
 8003ea0:	20000800 	.word	0x20000800
 8003ea4:	40026410 	.word	0x40026410

08003ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003eac:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee8 <HAL_Init+0x40>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8003ee8 <HAL_Init+0x40>)
 8003eb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee8 <HAL_Init+0x40>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee8 <HAL_Init+0x40>)
 8003ebe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ec4:	4b08      	ldr	r3, [pc, #32]	@ (8003ee8 <HAL_Init+0x40>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a07      	ldr	r2, [pc, #28]	@ (8003ee8 <HAL_Init+0x40>)
 8003eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ed0:	2003      	movs	r0, #3
 8003ed2:	f000 f94f 	bl	8004174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ed6:	200f      	movs	r0, #15
 8003ed8:	f000 f808 	bl	8003eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003edc:	f7fe f9f8 	bl	80022d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40023c00 	.word	0x40023c00

08003eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ef4:	4b12      	ldr	r3, [pc, #72]	@ (8003f40 <HAL_InitTick+0x54>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	4b12      	ldr	r3, [pc, #72]	@ (8003f44 <HAL_InitTick+0x58>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	4619      	mov	r1, r3
 8003efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 f967 	bl	80041de <HAL_SYSTICK_Config>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e00e      	b.n	8003f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b0f      	cmp	r3, #15
 8003f1e:	d80a      	bhi.n	8003f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f20:	2200      	movs	r2, #0
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	f04f 30ff 	mov.w	r0, #4294967295
 8003f28:	f000 f92f 	bl	800418a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f2c:	4a06      	ldr	r2, [pc, #24]	@ (8003f48 <HAL_InitTick+0x5c>)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e000      	b.n	8003f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20000004 	.word	0x20000004
 8003f44:	20000054 	.word	0x20000054
 8003f48:	20000050 	.word	0x20000050

08003f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f50:	4b06      	ldr	r3, [pc, #24]	@ (8003f6c <HAL_IncTick+0x20>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	4b06      	ldr	r3, [pc, #24]	@ (8003f70 <HAL_IncTick+0x24>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	4a04      	ldr	r2, [pc, #16]	@ (8003f70 <HAL_IncTick+0x24>)
 8003f5e:	6013      	str	r3, [r2, #0]
}
 8003f60:	bf00      	nop
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	20000054 	.word	0x20000054
 8003f70:	20000860 	.word	0x20000860

08003f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  return uwTick;
 8003f78:	4b03      	ldr	r3, [pc, #12]	@ (8003f88 <HAL_GetTick+0x14>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	20000860 	.word	0x20000860

08003f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f94:	f7ff ffee 	bl	8003f74 <HAL_GetTick>
 8003f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa4:	d005      	beq.n	8003fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd0 <HAL_Delay+0x44>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	461a      	mov	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4413      	add	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003fb2:	bf00      	nop
 8003fb4:	f7ff ffde 	bl	8003f74 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d8f7      	bhi.n	8003fb4 <HAL_Delay+0x28>
  {
  }
}
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000054 	.word	0x20000054

08003fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8004018 <__NVIC_SetPriorityGrouping+0x44>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ffc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004006:	4a04      	ldr	r2, [pc, #16]	@ (8004018 <__NVIC_SetPriorityGrouping+0x44>)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	60d3      	str	r3, [r2, #12]
}
 800400c:	bf00      	nop
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	e000ed00 	.word	0xe000ed00

0800401c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004020:	4b04      	ldr	r3, [pc, #16]	@ (8004034 <__NVIC_GetPriorityGrouping+0x18>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	0a1b      	lsrs	r3, r3, #8
 8004026:	f003 0307 	and.w	r3, r3, #7
}
 800402a:	4618      	mov	r0, r3
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	e000ed00 	.word	0xe000ed00

08004038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004046:	2b00      	cmp	r3, #0
 8004048:	db0b      	blt.n	8004062 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	f003 021f 	and.w	r2, r3, #31
 8004050:	4907      	ldr	r1, [pc, #28]	@ (8004070 <__NVIC_EnableIRQ+0x38>)
 8004052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004056:	095b      	lsrs	r3, r3, #5
 8004058:	2001      	movs	r0, #1
 800405a:	fa00 f202 	lsl.w	r2, r0, r2
 800405e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	e000e100 	.word	0xe000e100

08004074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	6039      	str	r1, [r7, #0]
 800407e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004084:	2b00      	cmp	r3, #0
 8004086:	db0a      	blt.n	800409e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	b2da      	uxtb	r2, r3
 800408c:	490c      	ldr	r1, [pc, #48]	@ (80040c0 <__NVIC_SetPriority+0x4c>)
 800408e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004092:	0112      	lsls	r2, r2, #4
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	440b      	add	r3, r1
 8004098:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800409c:	e00a      	b.n	80040b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	4908      	ldr	r1, [pc, #32]	@ (80040c4 <__NVIC_SetPriority+0x50>)
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	3b04      	subs	r3, #4
 80040ac:	0112      	lsls	r2, r2, #4
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	440b      	add	r3, r1
 80040b2:	761a      	strb	r2, [r3, #24]
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	e000e100 	.word	0xe000e100
 80040c4:	e000ed00 	.word	0xe000ed00

080040c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b089      	sub	sp, #36	@ 0x24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f1c3 0307 	rsb	r3, r3, #7
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	bf28      	it	cs
 80040e6:	2304      	movcs	r3, #4
 80040e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	3304      	adds	r3, #4
 80040ee:	2b06      	cmp	r3, #6
 80040f0:	d902      	bls.n	80040f8 <NVIC_EncodePriority+0x30>
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	3b03      	subs	r3, #3
 80040f6:	e000      	b.n	80040fa <NVIC_EncodePriority+0x32>
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	43da      	mvns	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	401a      	ands	r2, r3
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004110:	f04f 31ff 	mov.w	r1, #4294967295
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	fa01 f303 	lsl.w	r3, r1, r3
 800411a:	43d9      	mvns	r1, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004120:	4313      	orrs	r3, r2
         );
}
 8004122:	4618      	mov	r0, r3
 8004124:	3724      	adds	r7, #36	@ 0x24
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
	...

08004130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3b01      	subs	r3, #1
 800413c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004140:	d301      	bcc.n	8004146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004142:	2301      	movs	r3, #1
 8004144:	e00f      	b.n	8004166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004146:	4a0a      	ldr	r2, [pc, #40]	@ (8004170 <SysTick_Config+0x40>)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3b01      	subs	r3, #1
 800414c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800414e:	210f      	movs	r1, #15
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	f7ff ff8e 	bl	8004074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004158:	4b05      	ldr	r3, [pc, #20]	@ (8004170 <SysTick_Config+0x40>)
 800415a:	2200      	movs	r2, #0
 800415c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800415e:	4b04      	ldr	r3, [pc, #16]	@ (8004170 <SysTick_Config+0x40>)
 8004160:	2207      	movs	r2, #7
 8004162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	e000e010 	.word	0xe000e010

08004174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff ff29 	bl	8003fd4 <__NVIC_SetPriorityGrouping>
}
 8004182:	bf00      	nop
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800418a:	b580      	push	{r7, lr}
 800418c:	b086      	sub	sp, #24
 800418e:	af00      	add	r7, sp, #0
 8004190:	4603      	mov	r3, r0
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	607a      	str	r2, [r7, #4]
 8004196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800419c:	f7ff ff3e 	bl	800401c <__NVIC_GetPriorityGrouping>
 80041a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	6978      	ldr	r0, [r7, #20]
 80041a8:	f7ff ff8e 	bl	80040c8 <NVIC_EncodePriority>
 80041ac:	4602      	mov	r2, r0
 80041ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041b2:	4611      	mov	r1, r2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff ff5d 	bl	8004074 <__NVIC_SetPriority>
}
 80041ba:	bf00      	nop
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b082      	sub	sp, #8
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	4603      	mov	r3, r0
 80041ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff ff31 	bl	8004038 <__NVIC_EnableIRQ>
}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7ff ffa2 	bl	8004130 <SysTick_Config>
 80041ec:	4603      	mov	r3, r0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004204:	f7ff feb6 	bl	8003f74 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e099      	b.n	8004348 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0201 	bic.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004234:	e00f      	b.n	8004256 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004236:	f7ff fe9d 	bl	8003f74 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b05      	cmp	r3, #5
 8004242:	d908      	bls.n	8004256 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2203      	movs	r2, #3
 800424e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e078      	b.n	8004348 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e8      	bne.n	8004236 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	4b38      	ldr	r3, [pc, #224]	@ (8004350 <HAL_DMA_Init+0x158>)
 8004270:	4013      	ands	r3, r2
 8004272:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004282:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800428e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800429a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d107      	bne.n	80042c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b8:	4313      	orrs	r3, r2
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	4313      	orrs	r3, r2
 80042be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f023 0307 	bic.w	r3, r3, #7
 80042d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d117      	bne.n	800431a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00e      	beq.n	800431a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f8bd 	bl	800447c <DMA_CheckFifoParam>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2240      	movs	r2, #64	@ 0x40
 800430c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004316:	2301      	movs	r3, #1
 8004318:	e016      	b.n	8004348 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f874 	bl	8004410 <DMA_CalcBaseAndBitshift>
 8004328:	4603      	mov	r3, r0
 800432a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004330:	223f      	movs	r2, #63	@ 0x3f
 8004332:	409a      	lsls	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	f010803f 	.word	0xf010803f

08004354 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e050      	b.n	8004408 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d101      	bne.n	8004376 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004372:	2302      	movs	r3, #2
 8004374:	e048      	b.n	8004408 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0201 	bic.w	r2, r2, #1
 8004384:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2200      	movs	r2, #0
 8004394:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2200      	movs	r2, #0
 800439c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2200      	movs	r2, #0
 80043a4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2200      	movs	r2, #0
 80043ac:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2221      	movs	r2, #33	@ 0x21
 80043b4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f82a 	bl	8004410 <DMA_CalcBaseAndBitshift>
 80043bc:	4603      	mov	r3, r0
 80043be:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e8:	223f      	movs	r2, #63	@ 0x3f
 80043ea:	409a      	lsls	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	b2db      	uxtb	r3, r3
 800441e:	3b10      	subs	r3, #16
 8004420:	4a14      	ldr	r2, [pc, #80]	@ (8004474 <DMA_CalcBaseAndBitshift+0x64>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	091b      	lsrs	r3, r3, #4
 8004428:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800442a:	4a13      	ldr	r2, [pc, #76]	@ (8004478 <DMA_CalcBaseAndBitshift+0x68>)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4413      	add	r3, r2
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b03      	cmp	r3, #3
 800443c:	d909      	bls.n	8004452 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004446:	f023 0303 	bic.w	r3, r3, #3
 800444a:	1d1a      	adds	r2, r3, #4
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004450:	e007      	b.n	8004462 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800445a:	f023 0303 	bic.w	r3, r3, #3
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	aaaaaaab 	.word	0xaaaaaaab
 8004478:	0800d8f8 	.word	0x0800d8f8

0800447c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004484:	2300      	movs	r3, #0
 8004486:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d11f      	bne.n	80044d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2b03      	cmp	r3, #3
 800449a:	d856      	bhi.n	800454a <DMA_CheckFifoParam+0xce>
 800449c:	a201      	add	r2, pc, #4	@ (adr r2, 80044a4 <DMA_CheckFifoParam+0x28>)
 800449e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a2:	bf00      	nop
 80044a4:	080044b5 	.word	0x080044b5
 80044a8:	080044c7 	.word	0x080044c7
 80044ac:	080044b5 	.word	0x080044b5
 80044b0:	0800454b 	.word	0x0800454b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d046      	beq.n	800454e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044c4:	e043      	b.n	800454e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80044ce:	d140      	bne.n	8004552 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044d4:	e03d      	b.n	8004552 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044de:	d121      	bne.n	8004524 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d837      	bhi.n	8004556 <DMA_CheckFifoParam+0xda>
 80044e6:	a201      	add	r2, pc, #4	@ (adr r2, 80044ec <DMA_CheckFifoParam+0x70>)
 80044e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ec:	080044fd 	.word	0x080044fd
 80044f0:	08004503 	.word	0x08004503
 80044f4:	080044fd 	.word	0x080044fd
 80044f8:	08004515 	.word	0x08004515
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004500:	e030      	b.n	8004564 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004506:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d025      	beq.n	800455a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004512:	e022      	b.n	800455a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004518:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800451c:	d11f      	bne.n	800455e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004522:	e01c      	b.n	800455e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2b02      	cmp	r3, #2
 8004528:	d903      	bls.n	8004532 <DMA_CheckFifoParam+0xb6>
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b03      	cmp	r3, #3
 800452e:	d003      	beq.n	8004538 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004530:	e018      	b.n	8004564 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	73fb      	strb	r3, [r7, #15]
      break;
 8004536:	e015      	b.n	8004564 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00e      	beq.n	8004562 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	73fb      	strb	r3, [r7, #15]
      break;
 8004548:	e00b      	b.n	8004562 <DMA_CheckFifoParam+0xe6>
      break;
 800454a:	bf00      	nop
 800454c:	e00a      	b.n	8004564 <DMA_CheckFifoParam+0xe8>
      break;
 800454e:	bf00      	nop
 8004550:	e008      	b.n	8004564 <DMA_CheckFifoParam+0xe8>
      break;
 8004552:	bf00      	nop
 8004554:	e006      	b.n	8004564 <DMA_CheckFifoParam+0xe8>
      break;
 8004556:	bf00      	nop
 8004558:	e004      	b.n	8004564 <DMA_CheckFifoParam+0xe8>
      break;
 800455a:	bf00      	nop
 800455c:	e002      	b.n	8004564 <DMA_CheckFifoParam+0xe8>
      break;   
 800455e:	bf00      	nop
 8004560:	e000      	b.n	8004564 <DMA_CheckFifoParam+0xe8>
      break;
 8004562:	bf00      	nop
    }
  } 
  
  return status; 
 8004564:	7bfb      	ldrb	r3, [r7, #15]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop

08004574 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e03b      	b.n	80045fe <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fd fec0 	bl	8002320 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c4:	f023 0107 	bic.w	r1, r3, #7
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045da:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80045de:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	68d1      	ldr	r1, [r2, #12]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6812      	ldr	r2, [r2, #0]
 80045ea:	430b      	orrs	r3, r1
 80045ec:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b086      	sub	sp, #24
 800460a:	af02      	add	r7, sp, #8
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	607a      	str	r2, [r7, #4]
 8004612:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_DMA2D_Start+0x1c>
 800461e:	2302      	movs	r3, #2
 8004620:	e018      	b.n	8004654 <HAL_DMA2D_Start+0x4e>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2202      	movs	r2, #2
 800462e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	68b9      	ldr	r1, [r7, #8]
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 f989 	bl	8004954 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f042 0201 	orr.w	r2, r2, #1
 8004650:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d056      	beq.n	8004726 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004678:	f7ff fc7c 	bl	8003f74 <HAL_GetTick>
 800467c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800467e:	e04b      	b.n	8004718 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800468e:	2b00      	cmp	r3, #0
 8004690:	d023      	beq.n	80046da <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b00      	cmp	r3, #0
 800469a:	d005      	beq.n	80046a8 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a0:	f043 0202 	orr.w	r2, r3, #2
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d005      	beq.n	80046be <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b6:	f043 0201 	orr.w	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2221      	movs	r2, #33	@ 0x21
 80046c4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2204      	movs	r2, #4
 80046ca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e0a5      	b.n	8004826 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e0:	d01a      	beq.n	8004718 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046e2:	f7ff fc47 	bl	8003f74 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d302      	bcc.n	80046f8 <HAL_DMA2D_PollForTransfer+0x9c>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10f      	bne.n	8004718 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046fc:	f043 0220 	orr.w	r2, r3, #32
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2203      	movs	r2, #3
 8004708:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e086      	b.n	8004826 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0ac      	beq.n	8004680 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004738:	f003 0320 	and.w	r3, r3, #32
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d061      	beq.n	800480c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004748:	f7ff fc14 	bl	8003f74 <HAL_GetTick>
 800474c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800474e:	e056      	b.n	80047fe <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 800475e:	2b00      	cmp	r3, #0
 8004760:	d02e      	beq.n	80047c0 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b00      	cmp	r3, #0
 800476a:	d005      	beq.n	8004778 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004770:	f043 0204 	orr.w	r2, r3, #4
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b00      	cmp	r3, #0
 8004780:	d005      	beq.n	800478e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004786:	f043 0202 	orr.w	r2, r3, #2
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800479c:	f043 0201 	orr.w	r2, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2229      	movs	r2, #41	@ 0x29
 80047aa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2204      	movs	r2, #4
 80047b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e032      	b.n	8004826 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c6:	d01a      	beq.n	80047fe <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047c8:	f7ff fbd4 	bl	8003f74 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d302      	bcc.n	80047de <HAL_DMA2D_PollForTransfer+0x182>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10f      	bne.n	80047fe <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e2:	f043 0220 	orr.w	r2, r3, #32
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2203      	movs	r2, #3
 80047ee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e013      	b.n	8004826 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0a1      	beq.n	8004750 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2212      	movs	r2, #18
 8004812:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_DMA2D_ConfigLayer+0x20>
 800484c:	2302      	movs	r3, #2
 800484e:	e079      	b.n	8004944 <HAL_DMA2D_ConfigLayer+0x114>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	3318      	adds	r3, #24
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	4413      	add	r3, r2
 800486a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	041b      	lsls	r3, r3, #16
 8004876:	4313      	orrs	r3, r2
 8004878:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800487a:	4b35      	ldr	r3, [pc, #212]	@ (8004950 <HAL_DMA2D_ConfigLayer+0x120>)
 800487c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b0a      	cmp	r3, #10
 8004884:	d003      	beq.n	800488e <HAL_DMA2D_ConfigLayer+0x5e>
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b09      	cmp	r3, #9
 800488c:	d107      	bne.n	800489e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	4313      	orrs	r3, r2
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	e005      	b.n	80048aa <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	061b      	lsls	r3, r3, #24
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d120      	bne.n	80048f2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	43db      	mvns	r3, r3
 80048ba:	ea02 0103 	and.w	r1, r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	6812      	ldr	r2, [r2, #0]
 80048d0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b0a      	cmp	r3, #10
 80048d8:	d003      	beq.n	80048e2 <HAL_DMA2D_ConfigLayer+0xb2>
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b09      	cmp	r3, #9
 80048e0:	d127      	bne.n	8004932 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80048ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80048f0:	e01f      	b.n	8004932 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69da      	ldr	r2, [r3, #28]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	43db      	mvns	r3, r3
 80048fc:	ea02 0103 	and.w	r1, r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	430a      	orrs	r2, r1
 8004908:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	6812      	ldr	r2, [r2, #0]
 8004912:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2b0a      	cmp	r3, #10
 800491a:	d003      	beq.n	8004924 <HAL_DMA2D_ConfigLayer+0xf4>
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b09      	cmp	r3, #9
 8004922:	d106      	bne.n	8004932 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	68da      	ldr	r2, [r3, #12]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004930:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	371c      	adds	r7, #28
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	ff03000f 	.word	0xff03000f

08004954 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004954:	b480      	push	{r7}
 8004956:	b08b      	sub	sp, #44	@ 0x2c
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004968:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	041a      	lsls	r2, r3, #16
 8004970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004972:	431a      	orrs	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800498c:	d174      	bne.n	8004a78 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004994:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800499c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80049a4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d108      	bne.n	80049c6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	431a      	orrs	r2, r3
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	4313      	orrs	r3, r2
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80049c4:	e053      	b.n	8004a6e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d106      	bne.n	80049dc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80049da:	e048      	b.n	8004a6e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d111      	bne.n	8004a08 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	0cdb      	lsrs	r3, r3, #19
 80049e8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	0a9b      	lsrs	r3, r3, #10
 80049ee:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	08db      	lsrs	r3, r3, #3
 80049f4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	02db      	lsls	r3, r3, #11
 80049fe:	4313      	orrs	r3, r2
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a06:	e032      	b.n	8004a6e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	2b03      	cmp	r3, #3
 8004a0e:	d117      	bne.n	8004a40 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	0fdb      	lsrs	r3, r3, #31
 8004a14:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	0cdb      	lsrs	r3, r3, #19
 8004a1a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	0adb      	lsrs	r3, r3, #11
 8004a20:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	08db      	lsrs	r3, r3, #3
 8004a26:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	029b      	lsls	r3, r3, #10
 8004a30:	431a      	orrs	r2, r3
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	03db      	lsls	r3, r3, #15
 8004a36:	4313      	orrs	r3, r2
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a3e:	e016      	b.n	8004a6e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	0f1b      	lsrs	r3, r3, #28
 8004a44:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	0d1b      	lsrs	r3, r3, #20
 8004a4a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	0b1b      	lsrs	r3, r3, #12
 8004a50:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	091b      	lsrs	r3, r3, #4
 8004a56:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	011a      	lsls	r2, r3, #4
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	021b      	lsls	r3, r3, #8
 8004a60:	431a      	orrs	r2, r3
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	031b      	lsls	r3, r3, #12
 8004a66:	4313      	orrs	r3, r2
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a74:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004a76:	e003      	b.n	8004a80 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	60da      	str	r2, [r3, #12]
}
 8004a80:	bf00      	nop
 8004a82:	372c      	adds	r7, #44	@ 0x2c
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b089      	sub	sp, #36	@ 0x24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61fb      	str	r3, [r7, #28]
 8004aa6:	e177      	b.n	8004d98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	f040 8166 	bne.w	8004d92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d005      	beq.n	8004ade <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d130      	bne.n	8004b40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	2203      	movs	r2, #3
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	43db      	mvns	r3, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	4013      	ands	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	fa02 f303 	lsl.w	r3, r2, r3
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b14:	2201      	movs	r2, #1
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	4013      	ands	r3, r2
 8004b22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	091b      	lsrs	r3, r3, #4
 8004b2a:	f003 0201 	and.w	r2, r3, #1
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f003 0303 	and.w	r3, r3, #3
 8004b48:	2b03      	cmp	r3, #3
 8004b4a:	d017      	beq.n	8004b7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	2203      	movs	r2, #3
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	4013      	ands	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d123      	bne.n	8004bd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	08da      	lsrs	r2, r3, #3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3208      	adds	r2, #8
 8004b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	220f      	movs	r2, #15
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	43db      	mvns	r3, r3
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	08da      	lsrs	r2, r3, #3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	3208      	adds	r2, #8
 8004bca:	69b9      	ldr	r1, [r7, #24]
 8004bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	2203      	movs	r2, #3
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	43db      	mvns	r3, r3
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	4013      	ands	r3, r2
 8004be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f003 0203 	and.w	r2, r3, #3
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 80c0 	beq.w	8004d92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	4b66      	ldr	r3, [pc, #408]	@ (8004db0 <HAL_GPIO_Init+0x324>)
 8004c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c1a:	4a65      	ldr	r2, [pc, #404]	@ (8004db0 <HAL_GPIO_Init+0x324>)
 8004c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c22:	4b63      	ldr	r3, [pc, #396]	@ (8004db0 <HAL_GPIO_Init+0x324>)
 8004c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c2e:	4a61      	ldr	r2, [pc, #388]	@ (8004db4 <HAL_GPIO_Init+0x328>)
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	089b      	lsrs	r3, r3, #2
 8004c34:	3302      	adds	r3, #2
 8004c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	220f      	movs	r2, #15
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a58      	ldr	r2, [pc, #352]	@ (8004db8 <HAL_GPIO_Init+0x32c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d037      	beq.n	8004cca <HAL_GPIO_Init+0x23e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a57      	ldr	r2, [pc, #348]	@ (8004dbc <HAL_GPIO_Init+0x330>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d031      	beq.n	8004cc6 <HAL_GPIO_Init+0x23a>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a56      	ldr	r2, [pc, #344]	@ (8004dc0 <HAL_GPIO_Init+0x334>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d02b      	beq.n	8004cc2 <HAL_GPIO_Init+0x236>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a55      	ldr	r2, [pc, #340]	@ (8004dc4 <HAL_GPIO_Init+0x338>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d025      	beq.n	8004cbe <HAL_GPIO_Init+0x232>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a54      	ldr	r2, [pc, #336]	@ (8004dc8 <HAL_GPIO_Init+0x33c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d01f      	beq.n	8004cba <HAL_GPIO_Init+0x22e>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a53      	ldr	r2, [pc, #332]	@ (8004dcc <HAL_GPIO_Init+0x340>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d019      	beq.n	8004cb6 <HAL_GPIO_Init+0x22a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a52      	ldr	r2, [pc, #328]	@ (8004dd0 <HAL_GPIO_Init+0x344>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d013      	beq.n	8004cb2 <HAL_GPIO_Init+0x226>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a51      	ldr	r2, [pc, #324]	@ (8004dd4 <HAL_GPIO_Init+0x348>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00d      	beq.n	8004cae <HAL_GPIO_Init+0x222>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a50      	ldr	r2, [pc, #320]	@ (8004dd8 <HAL_GPIO_Init+0x34c>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d007      	beq.n	8004caa <HAL_GPIO_Init+0x21e>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a4f      	ldr	r2, [pc, #316]	@ (8004ddc <HAL_GPIO_Init+0x350>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d101      	bne.n	8004ca6 <HAL_GPIO_Init+0x21a>
 8004ca2:	2309      	movs	r3, #9
 8004ca4:	e012      	b.n	8004ccc <HAL_GPIO_Init+0x240>
 8004ca6:	230a      	movs	r3, #10
 8004ca8:	e010      	b.n	8004ccc <HAL_GPIO_Init+0x240>
 8004caa:	2308      	movs	r3, #8
 8004cac:	e00e      	b.n	8004ccc <HAL_GPIO_Init+0x240>
 8004cae:	2307      	movs	r3, #7
 8004cb0:	e00c      	b.n	8004ccc <HAL_GPIO_Init+0x240>
 8004cb2:	2306      	movs	r3, #6
 8004cb4:	e00a      	b.n	8004ccc <HAL_GPIO_Init+0x240>
 8004cb6:	2305      	movs	r3, #5
 8004cb8:	e008      	b.n	8004ccc <HAL_GPIO_Init+0x240>
 8004cba:	2304      	movs	r3, #4
 8004cbc:	e006      	b.n	8004ccc <HAL_GPIO_Init+0x240>
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e004      	b.n	8004ccc <HAL_GPIO_Init+0x240>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e002      	b.n	8004ccc <HAL_GPIO_Init+0x240>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <HAL_GPIO_Init+0x240>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	69fa      	ldr	r2, [r7, #28]
 8004cce:	f002 0203 	and.w	r2, r2, #3
 8004cd2:	0092      	lsls	r2, r2, #2
 8004cd4:	4093      	lsls	r3, r2
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cdc:	4935      	ldr	r1, [pc, #212]	@ (8004db4 <HAL_GPIO_Init+0x328>)
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	089b      	lsrs	r3, r3, #2
 8004ce2:	3302      	adds	r3, #2
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cea:	4b3d      	ldr	r3, [pc, #244]	@ (8004de0 <HAL_GPIO_Init+0x354>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	43db      	mvns	r3, r3
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d0e:	4a34      	ldr	r2, [pc, #208]	@ (8004de0 <HAL_GPIO_Init+0x354>)
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d14:	4b32      	ldr	r3, [pc, #200]	@ (8004de0 <HAL_GPIO_Init+0x354>)
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	4013      	ands	r3, r2
 8004d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d38:	4a29      	ldr	r2, [pc, #164]	@ (8004de0 <HAL_GPIO_Init+0x354>)
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d3e:	4b28      	ldr	r3, [pc, #160]	@ (8004de0 <HAL_GPIO_Init+0x354>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	43db      	mvns	r3, r3
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d62:	4a1f      	ldr	r2, [pc, #124]	@ (8004de0 <HAL_GPIO_Init+0x354>)
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d68:	4b1d      	ldr	r3, [pc, #116]	@ (8004de0 <HAL_GPIO_Init+0x354>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	43db      	mvns	r3, r3
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	4013      	ands	r3, r2
 8004d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d8c:	4a14      	ldr	r2, [pc, #80]	@ (8004de0 <HAL_GPIO_Init+0x354>)
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	3301      	adds	r3, #1
 8004d96:	61fb      	str	r3, [r7, #28]
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	2b0f      	cmp	r3, #15
 8004d9c:	f67f ae84 	bls.w	8004aa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004da0:	bf00      	nop
 8004da2:	bf00      	nop
 8004da4:	3724      	adds	r7, #36	@ 0x24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	40023800 	.word	0x40023800
 8004db4:	40013800 	.word	0x40013800
 8004db8:	40020000 	.word	0x40020000
 8004dbc:	40020400 	.word	0x40020400
 8004dc0:	40020800 	.word	0x40020800
 8004dc4:	40020c00 	.word	0x40020c00
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	40021400 	.word	0x40021400
 8004dd0:	40021800 	.word	0x40021800
 8004dd4:	40021c00 	.word	0x40021c00
 8004dd8:	40022000 	.word	0x40022000
 8004ddc:	40022400 	.word	0x40022400
 8004de0:	40013c00 	.word	0x40013c00

08004de4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004df6:	2300      	movs	r3, #0
 8004df8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	617b      	str	r3, [r7, #20]
 8004dfe:	e0d9      	b.n	8004fb4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e00:	2201      	movs	r2, #1
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	f040 80c9 	bne.w	8004fae <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004e1c:	4a6b      	ldr	r2, [pc, #428]	@ (8004fcc <HAL_GPIO_DeInit+0x1e8>)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	089b      	lsrs	r3, r3, #2
 8004e22:	3302      	adds	r3, #2
 8004e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e28:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f003 0303 	and.w	r3, r3, #3
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	220f      	movs	r2, #15
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a63      	ldr	r2, [pc, #396]	@ (8004fd0 <HAL_GPIO_DeInit+0x1ec>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d037      	beq.n	8004eb6 <HAL_GPIO_DeInit+0xd2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a62      	ldr	r2, [pc, #392]	@ (8004fd4 <HAL_GPIO_DeInit+0x1f0>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d031      	beq.n	8004eb2 <HAL_GPIO_DeInit+0xce>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a61      	ldr	r2, [pc, #388]	@ (8004fd8 <HAL_GPIO_DeInit+0x1f4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d02b      	beq.n	8004eae <HAL_GPIO_DeInit+0xca>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a60      	ldr	r2, [pc, #384]	@ (8004fdc <HAL_GPIO_DeInit+0x1f8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d025      	beq.n	8004eaa <HAL_GPIO_DeInit+0xc6>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a5f      	ldr	r2, [pc, #380]	@ (8004fe0 <HAL_GPIO_DeInit+0x1fc>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d01f      	beq.n	8004ea6 <HAL_GPIO_DeInit+0xc2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a5e      	ldr	r2, [pc, #376]	@ (8004fe4 <HAL_GPIO_DeInit+0x200>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d019      	beq.n	8004ea2 <HAL_GPIO_DeInit+0xbe>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a5d      	ldr	r2, [pc, #372]	@ (8004fe8 <HAL_GPIO_DeInit+0x204>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d013      	beq.n	8004e9e <HAL_GPIO_DeInit+0xba>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a5c      	ldr	r2, [pc, #368]	@ (8004fec <HAL_GPIO_DeInit+0x208>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00d      	beq.n	8004e9a <HAL_GPIO_DeInit+0xb6>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a5b      	ldr	r2, [pc, #364]	@ (8004ff0 <HAL_GPIO_DeInit+0x20c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d007      	beq.n	8004e96 <HAL_GPIO_DeInit+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a5a      	ldr	r2, [pc, #360]	@ (8004ff4 <HAL_GPIO_DeInit+0x210>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d101      	bne.n	8004e92 <HAL_GPIO_DeInit+0xae>
 8004e8e:	2309      	movs	r3, #9
 8004e90:	e012      	b.n	8004eb8 <HAL_GPIO_DeInit+0xd4>
 8004e92:	230a      	movs	r3, #10
 8004e94:	e010      	b.n	8004eb8 <HAL_GPIO_DeInit+0xd4>
 8004e96:	2308      	movs	r3, #8
 8004e98:	e00e      	b.n	8004eb8 <HAL_GPIO_DeInit+0xd4>
 8004e9a:	2307      	movs	r3, #7
 8004e9c:	e00c      	b.n	8004eb8 <HAL_GPIO_DeInit+0xd4>
 8004e9e:	2306      	movs	r3, #6
 8004ea0:	e00a      	b.n	8004eb8 <HAL_GPIO_DeInit+0xd4>
 8004ea2:	2305      	movs	r3, #5
 8004ea4:	e008      	b.n	8004eb8 <HAL_GPIO_DeInit+0xd4>
 8004ea6:	2304      	movs	r3, #4
 8004ea8:	e006      	b.n	8004eb8 <HAL_GPIO_DeInit+0xd4>
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e004      	b.n	8004eb8 <HAL_GPIO_DeInit+0xd4>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e002      	b.n	8004eb8 <HAL_GPIO_DeInit+0xd4>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e000      	b.n	8004eb8 <HAL_GPIO_DeInit+0xd4>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	f002 0203 	and.w	r2, r2, #3
 8004ebe:	0092      	lsls	r2, r2, #2
 8004ec0:	4093      	lsls	r3, r2
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d132      	bne.n	8004f2e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004ec8:	4b4b      	ldr	r3, [pc, #300]	@ (8004ff8 <HAL_GPIO_DeInit+0x214>)
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	4949      	ldr	r1, [pc, #292]	@ (8004ff8 <HAL_GPIO_DeInit+0x214>)
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004ed6:	4b48      	ldr	r3, [pc, #288]	@ (8004ff8 <HAL_GPIO_DeInit+0x214>)
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	43db      	mvns	r3, r3
 8004ede:	4946      	ldr	r1, [pc, #280]	@ (8004ff8 <HAL_GPIO_DeInit+0x214>)
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004ee4:	4b44      	ldr	r3, [pc, #272]	@ (8004ff8 <HAL_GPIO_DeInit+0x214>)
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	43db      	mvns	r3, r3
 8004eec:	4942      	ldr	r1, [pc, #264]	@ (8004ff8 <HAL_GPIO_DeInit+0x214>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004ef2:	4b41      	ldr	r3, [pc, #260]	@ (8004ff8 <HAL_GPIO_DeInit+0x214>)
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	493f      	ldr	r1, [pc, #252]	@ (8004ff8 <HAL_GPIO_DeInit+0x214>)
 8004efc:	4013      	ands	r3, r2
 8004efe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	220f      	movs	r2, #15
 8004f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004f10:	4a2e      	ldr	r2, [pc, #184]	@ (8004fcc <HAL_GPIO_DeInit+0x1e8>)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	089b      	lsrs	r3, r3, #2
 8004f16:	3302      	adds	r3, #2
 8004f18:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	43da      	mvns	r2, r3
 8004f20:	482a      	ldr	r0, [pc, #168]	@ (8004fcc <HAL_GPIO_DeInit+0x1e8>)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	089b      	lsrs	r3, r3, #2
 8004f26:	400a      	ands	r2, r1
 8004f28:	3302      	adds	r3, #2
 8004f2a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	2103      	movs	r1, #3
 8004f38:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	401a      	ands	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	08da      	lsrs	r2, r3, #3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3208      	adds	r2, #8
 8004f4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	220f      	movs	r2, #15
 8004f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5e:	43db      	mvns	r3, r3
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	08d2      	lsrs	r2, r2, #3
 8004f64:	4019      	ands	r1, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3208      	adds	r2, #8
 8004f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	2103      	movs	r1, #3
 8004f78:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7c:	43db      	mvns	r3, r3
 8004f7e:	401a      	ands	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	2101      	movs	r1, #1
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f90:	43db      	mvns	r3, r3
 8004f92:	401a      	ands	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	2103      	movs	r1, #3
 8004fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	401a      	ands	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2b0f      	cmp	r3, #15
 8004fb8:	f67f af22 	bls.w	8004e00 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004fbc:	bf00      	nop
 8004fbe:	bf00      	nop
 8004fc0:	371c      	adds	r7, #28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	40013800 	.word	0x40013800
 8004fd0:	40020000 	.word	0x40020000
 8004fd4:	40020400 	.word	0x40020400
 8004fd8:	40020800 	.word	0x40020800
 8004fdc:	40020c00 	.word	0x40020c00
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	40021400 	.word	0x40021400
 8004fe8:	40021800 	.word	0x40021800
 8004fec:	40021c00 	.word	0x40021c00
 8004ff0:	40022000 	.word	0x40022000
 8004ff4:	40022400 	.word	0x40022400
 8004ff8:	40013c00 	.word	0x40013c00

08004ffc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	887b      	ldrh	r3, [r7, #2]
 800500e:	4013      	ands	r3, r2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005014:	2301      	movs	r3, #1
 8005016:	73fb      	strb	r3, [r7, #15]
 8005018:	e001      	b.n	800501e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800501a:	2300      	movs	r3, #0
 800501c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800501e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	460b      	mov	r3, r1
 8005036:	807b      	strh	r3, [r7, #2]
 8005038:	4613      	mov	r3, r2
 800503a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800503c:	787b      	ldrb	r3, [r7, #1]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005042:	887a      	ldrh	r2, [r7, #2]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005048:	e003      	b.n	8005052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800504a:	887b      	ldrh	r3, [r7, #2]
 800504c:	041a      	lsls	r2, r3, #16
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	619a      	str	r2, [r3, #24]
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800505e:	b480      	push	{r7}
 8005060:	b085      	sub	sp, #20
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	460b      	mov	r3, r1
 8005068:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005070:	887a      	ldrh	r2, [r7, #2]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4013      	ands	r3, r2
 8005076:	041a      	lsls	r2, r3, #16
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	43d9      	mvns	r1, r3
 800507c:	887b      	ldrh	r3, [r7, #2]
 800507e:	400b      	ands	r3, r1
 8005080:	431a      	orrs	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	619a      	str	r2, [r3, #24]
}
 8005086:	bf00      	nop
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
	...

08005094 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e12b      	b.n	80052fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fd f952 	bl	8002364 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2224      	movs	r2, #36	@ 0x24
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0201 	bic.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80050f8:	f001 f91c 	bl	8006334 <HAL_RCC_GetPCLK1Freq>
 80050fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	4a81      	ldr	r2, [pc, #516]	@ (8005308 <HAL_I2C_Init+0x274>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d807      	bhi.n	8005118 <HAL_I2C_Init+0x84>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4a80      	ldr	r2, [pc, #512]	@ (800530c <HAL_I2C_Init+0x278>)
 800510c:	4293      	cmp	r3, r2
 800510e:	bf94      	ite	ls
 8005110:	2301      	movls	r3, #1
 8005112:	2300      	movhi	r3, #0
 8005114:	b2db      	uxtb	r3, r3
 8005116:	e006      	b.n	8005126 <HAL_I2C_Init+0x92>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4a7d      	ldr	r2, [pc, #500]	@ (8005310 <HAL_I2C_Init+0x27c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	bf94      	ite	ls
 8005120:	2301      	movls	r3, #1
 8005122:	2300      	movhi	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e0e7      	b.n	80052fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4a78      	ldr	r2, [pc, #480]	@ (8005314 <HAL_I2C_Init+0x280>)
 8005132:	fba2 2303 	umull	r2, r3, r2, r3
 8005136:	0c9b      	lsrs	r3, r3, #18
 8005138:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	430a      	orrs	r2, r1
 800514c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	4a6a      	ldr	r2, [pc, #424]	@ (8005308 <HAL_I2C_Init+0x274>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d802      	bhi.n	8005168 <HAL_I2C_Init+0xd4>
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	3301      	adds	r3, #1
 8005166:	e009      	b.n	800517c <HAL_I2C_Init+0xe8>
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800516e:	fb02 f303 	mul.w	r3, r2, r3
 8005172:	4a69      	ldr	r2, [pc, #420]	@ (8005318 <HAL_I2C_Init+0x284>)
 8005174:	fba2 2303 	umull	r2, r3, r2, r3
 8005178:	099b      	lsrs	r3, r3, #6
 800517a:	3301      	adds	r3, #1
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6812      	ldr	r2, [r2, #0]
 8005180:	430b      	orrs	r3, r1
 8005182:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800518e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	495c      	ldr	r1, [pc, #368]	@ (8005308 <HAL_I2C_Init+0x274>)
 8005198:	428b      	cmp	r3, r1
 800519a:	d819      	bhi.n	80051d0 <HAL_I2C_Init+0x13c>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	1e59      	subs	r1, r3, #1
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80051aa:	1c59      	adds	r1, r3, #1
 80051ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80051b0:	400b      	ands	r3, r1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <HAL_I2C_Init+0x138>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	1e59      	subs	r1, r3, #1
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80051c4:	3301      	adds	r3, #1
 80051c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ca:	e051      	b.n	8005270 <HAL_I2C_Init+0x1dc>
 80051cc:	2304      	movs	r3, #4
 80051ce:	e04f      	b.n	8005270 <HAL_I2C_Init+0x1dc>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d111      	bne.n	80051fc <HAL_I2C_Init+0x168>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	1e58      	subs	r0, r3, #1
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6859      	ldr	r1, [r3, #4]
 80051e0:	460b      	mov	r3, r1
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	440b      	add	r3, r1
 80051e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ea:	3301      	adds	r3, #1
 80051ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	bf0c      	ite	eq
 80051f4:	2301      	moveq	r3, #1
 80051f6:	2300      	movne	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	e012      	b.n	8005222 <HAL_I2C_Init+0x18e>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	1e58      	subs	r0, r3, #1
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6859      	ldr	r1, [r3, #4]
 8005204:	460b      	mov	r3, r1
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	440b      	add	r3, r1
 800520a:	0099      	lsls	r1, r3, #2
 800520c:	440b      	add	r3, r1
 800520e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005212:	3301      	adds	r3, #1
 8005214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005218:	2b00      	cmp	r3, #0
 800521a:	bf0c      	ite	eq
 800521c:	2301      	moveq	r3, #1
 800521e:	2300      	movne	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <HAL_I2C_Init+0x196>
 8005226:	2301      	movs	r3, #1
 8005228:	e022      	b.n	8005270 <HAL_I2C_Init+0x1dc>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10e      	bne.n	8005250 <HAL_I2C_Init+0x1bc>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	1e58      	subs	r0, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6859      	ldr	r1, [r3, #4]
 800523a:	460b      	mov	r3, r1
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	440b      	add	r3, r1
 8005240:	fbb0 f3f3 	udiv	r3, r0, r3
 8005244:	3301      	adds	r3, #1
 8005246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800524a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800524e:	e00f      	b.n	8005270 <HAL_I2C_Init+0x1dc>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	1e58      	subs	r0, r3, #1
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6859      	ldr	r1, [r3, #4]
 8005258:	460b      	mov	r3, r1
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	440b      	add	r3, r1
 800525e:	0099      	lsls	r1, r3, #2
 8005260:	440b      	add	r3, r1
 8005262:	fbb0 f3f3 	udiv	r3, r0, r3
 8005266:	3301      	adds	r3, #1
 8005268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800526c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005270:	6879      	ldr	r1, [r7, #4]
 8005272:	6809      	ldr	r1, [r1, #0]
 8005274:	4313      	orrs	r3, r2
 8005276:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	69da      	ldr	r2, [r3, #28]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800529e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	6911      	ldr	r1, [r2, #16]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	68d2      	ldr	r2, [r2, #12]
 80052aa:	4311      	orrs	r1, r2
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6812      	ldr	r2, [r2, #0]
 80052b0:	430b      	orrs	r3, r1
 80052b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	695a      	ldr	r2, [r3, #20]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	000186a0 	.word	0x000186a0
 800530c:	001e847f 	.word	0x001e847f
 8005310:	003d08ff 	.word	0x003d08ff
 8005314:	431bde83 	.word	0x431bde83
 8005318:	10624dd3 	.word	0x10624dd3

0800531c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b20      	cmp	r3, #32
 8005330:	d129      	bne.n	8005386 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2224      	movs	r2, #36	@ 0x24
 8005336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0201 	bic.w	r2, r2, #1
 8005348:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0210 	bic.w	r2, r2, #16
 8005358:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f042 0201 	orr.w	r2, r2, #1
 8005378:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2220      	movs	r2, #32
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005382:	2300      	movs	r3, #0
 8005384:	e000      	b.n	8005388 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005386:	2302      	movs	r3, #2
  }
}
 8005388:	4618      	mov	r0, r3
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800539e:	2300      	movs	r3, #0
 80053a0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	d12a      	bne.n	8005404 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2224      	movs	r2, #36	@ 0x24
 80053b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 0201 	bic.w	r2, r2, #1
 80053c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053cc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80053ce:	89fb      	ldrh	r3, [r7, #14]
 80053d0:	f023 030f 	bic.w	r3, r3, #15
 80053d4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	b29a      	uxth	r2, r3
 80053da:	89fb      	ldrh	r3, [r7, #14]
 80053dc:	4313      	orrs	r3, r2
 80053de:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	89fa      	ldrh	r2, [r7, #14]
 80053e6:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0201 	orr.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005400:	2300      	movs	r3, #0
 8005402:	e000      	b.n	8005406 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005404:	2302      	movs	r3, #2
  }
}
 8005406:	4618      	mov	r0, r3
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
	...

08005414 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e0bf      	b.n	80055a6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d106      	bne.n	8005440 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fc fffc 	bl	8002438 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005456:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6999      	ldr	r1, [r3, #24]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800546c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6899      	ldr	r1, [r3, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	4b4a      	ldr	r3, [pc, #296]	@ (80055b0 <HAL_LTDC_Init+0x19c>)
 8005488:	400b      	ands	r3, r1
 800548a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	041b      	lsls	r3, r3, #16
 8005492:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6899      	ldr	r1, [r3, #8]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68d9      	ldr	r1, [r3, #12]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	4b3e      	ldr	r3, [pc, #248]	@ (80055b0 <HAL_LTDC_Init+0x19c>)
 80054b6:	400b      	ands	r3, r1
 80054b8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	041b      	lsls	r3, r3, #16
 80054c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68d9      	ldr	r1, [r3, #12]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a1a      	ldr	r2, [r3, #32]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6919      	ldr	r1, [r3, #16]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	4b33      	ldr	r3, [pc, #204]	@ (80055b0 <HAL_LTDC_Init+0x19c>)
 80054e4:	400b      	ands	r3, r1
 80054e6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ec:	041b      	lsls	r3, r3, #16
 80054ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6919      	ldr	r1, [r3, #16]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	431a      	orrs	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6959      	ldr	r1, [r3, #20]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	4b27      	ldr	r3, [pc, #156]	@ (80055b0 <HAL_LTDC_Init+0x19c>)
 8005512:	400b      	ands	r3, r1
 8005514:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551a:	041b      	lsls	r3, r3, #16
 800551c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6959      	ldr	r1, [r3, #20]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800553a:	021b      	lsls	r3, r3, #8
 800553c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005544:	041b      	lsls	r3, r3, #16
 8005546:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005556:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0206 	orr.w	r2, r2, #6
 8005582:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0201 	orr.w	r2, r2, #1
 8005592:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	f000f800 	.word	0xf000f800

080055b4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80055b4:	b5b0      	push	{r4, r5, r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d101      	bne.n	80055ce <HAL_LTDC_ConfigLayer+0x1a>
 80055ca:	2302      	movs	r3, #2
 80055cc:	e02c      	b.n	8005628 <HAL_LTDC_ConfigLayer+0x74>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2202      	movs	r2, #2
 80055da:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2134      	movs	r1, #52	@ 0x34
 80055e4:	fb01 f303 	mul.w	r3, r1, r3
 80055e8:	4413      	add	r3, r2
 80055ea:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	4614      	mov	r4, r2
 80055f2:	461d      	mov	r5, r3
 80055f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005600:	682b      	ldr	r3, [r5, #0]
 8005602:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	68b9      	ldr	r1, [r7, #8]
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 f83b 	bl	8005684 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2201      	movs	r2, #1
 8005614:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bdb0      	pop	{r4, r5, r7, pc}

08005630 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800563e:	2b01      	cmp	r3, #1
 8005640:	d101      	bne.n	8005646 <HAL_LTDC_EnableDither+0x16>
 8005642:	2302      	movs	r3, #2
 8005644:	e016      	b.n	8005674 <HAL_LTDC_EnableDither+0x44>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2202      	movs	r2, #2
 8005652:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8005656:	4b0a      	ldr	r3, [pc, #40]	@ (8005680 <HAL_LTDC_EnableDither+0x50>)
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	4a09      	ldr	r2, [pc, #36]	@ (8005680 <HAL_LTDC_EnableDither+0x50>)
 800565c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005660:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	40016800 	.word	0x40016800

08005684 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005684:	b480      	push	{r7}
 8005686:	b089      	sub	sp, #36	@ 0x24
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	0c1b      	lsrs	r3, r3, #16
 800569c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056a0:	4413      	add	r3, r2
 80056a2:	041b      	lsls	r3, r3, #16
 80056a4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	01db      	lsls	r3, r3, #7
 80056b0:	4413      	add	r3, r2
 80056b2:	3384      	adds	r3, #132	@ 0x84
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	6812      	ldr	r2, [r2, #0]
 80056ba:	4611      	mov	r1, r2
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	01d2      	lsls	r2, r2, #7
 80056c0:	440a      	add	r2, r1
 80056c2:	3284      	adds	r2, #132	@ 0x84
 80056c4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80056c8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	0c1b      	lsrs	r3, r3, #16
 80056d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80056da:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80056dc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4619      	mov	r1, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	01db      	lsls	r3, r3, #7
 80056e8:	440b      	add	r3, r1
 80056ea:	3384      	adds	r3, #132	@ 0x84
 80056ec:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80056f2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005702:	4413      	add	r3, r2
 8005704:	041b      	lsls	r3, r3, #16
 8005706:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	461a      	mov	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	01db      	lsls	r3, r3, #7
 8005712:	4413      	add	r3, r2
 8005714:	3384      	adds	r3, #132	@ 0x84
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	6812      	ldr	r2, [r2, #0]
 800571c:	4611      	mov	r1, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	01d2      	lsls	r2, r2, #7
 8005722:	440a      	add	r2, r1
 8005724:	3284      	adds	r2, #132	@ 0x84
 8005726:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800572a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800573a:	4413      	add	r3, r2
 800573c:	1c5a      	adds	r2, r3, #1
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4619      	mov	r1, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	01db      	lsls	r3, r3, #7
 8005748:	440b      	add	r3, r1
 800574a:	3384      	adds	r3, #132	@ 0x84
 800574c:	4619      	mov	r1, r3
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	4313      	orrs	r3, r2
 8005752:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	01db      	lsls	r3, r3, #7
 800575e:	4413      	add	r3, r2
 8005760:	3384      	adds	r3, #132	@ 0x84
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	6812      	ldr	r2, [r2, #0]
 8005768:	4611      	mov	r1, r2
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	01d2      	lsls	r2, r2, #7
 800576e:	440a      	add	r2, r1
 8005770:	3284      	adds	r2, #132	@ 0x84
 8005772:	f023 0307 	bic.w	r3, r3, #7
 8005776:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	461a      	mov	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	01db      	lsls	r3, r3, #7
 8005782:	4413      	add	r3, r2
 8005784:	3384      	adds	r3, #132	@ 0x84
 8005786:	461a      	mov	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005794:	021b      	lsls	r3, r3, #8
 8005796:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800579e:	041b      	lsls	r3, r3, #16
 80057a0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	061b      	lsls	r3, r3, #24
 80057a8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	01db      	lsls	r3, r3, #7
 80057b4:	4413      	add	r3, r2
 80057b6:	3384      	adds	r3, #132	@ 0x84
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	01db      	lsls	r3, r3, #7
 80057c4:	4413      	add	r3, r2
 80057c6:	3384      	adds	r3, #132	@ 0x84
 80057c8:	461a      	mov	r2, r3
 80057ca:	2300      	movs	r3, #0
 80057cc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80057d4:	461a      	mov	r2, r3
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	431a      	orrs	r2, r3
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	431a      	orrs	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4619      	mov	r1, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	01db      	lsls	r3, r3, #7
 80057e8:	440b      	add	r3, r1
 80057ea:	3384      	adds	r3, #132	@ 0x84
 80057ec:	4619      	mov	r1, r3
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	01db      	lsls	r3, r3, #7
 80057fe:	4413      	add	r3, r2
 8005800:	3384      	adds	r3, #132	@ 0x84
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	6812      	ldr	r2, [r2, #0]
 8005808:	4611      	mov	r1, r2
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	01d2      	lsls	r2, r2, #7
 800580e:	440a      	add	r2, r1
 8005810:	3284      	adds	r2, #132	@ 0x84
 8005812:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005816:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	461a      	mov	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	01db      	lsls	r3, r3, #7
 8005822:	4413      	add	r3, r2
 8005824:	3384      	adds	r3, #132	@ 0x84
 8005826:	461a      	mov	r2, r3
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	01db      	lsls	r3, r3, #7
 8005838:	4413      	add	r3, r2
 800583a:	3384      	adds	r3, #132	@ 0x84
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	6812      	ldr	r2, [r2, #0]
 8005842:	4611      	mov	r1, r2
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	01d2      	lsls	r2, r2, #7
 8005848:	440a      	add	r2, r1
 800584a:	3284      	adds	r2, #132	@ 0x84
 800584c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005850:	f023 0307 	bic.w	r3, r3, #7
 8005854:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	69da      	ldr	r2, [r3, #28]
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	68f9      	ldr	r1, [r7, #12]
 8005860:	6809      	ldr	r1, [r1, #0]
 8005862:	4608      	mov	r0, r1
 8005864:	6879      	ldr	r1, [r7, #4]
 8005866:	01c9      	lsls	r1, r1, #7
 8005868:	4401      	add	r1, r0
 800586a:	3184      	adds	r1, #132	@ 0x84
 800586c:	4313      	orrs	r3, r2
 800586e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	461a      	mov	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	01db      	lsls	r3, r3, #7
 800587a:	4413      	add	r3, r2
 800587c:	3384      	adds	r3, #132	@ 0x84
 800587e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	461a      	mov	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	01db      	lsls	r3, r3, #7
 800588a:	4413      	add	r3, r2
 800588c:	3384      	adds	r3, #132	@ 0x84
 800588e:	461a      	mov	r2, r3
 8005890:	2300      	movs	r3, #0
 8005892:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	461a      	mov	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	01db      	lsls	r3, r3, #7
 800589e:	4413      	add	r3, r2
 80058a0:	3384      	adds	r3, #132	@ 0x84
 80058a2:	461a      	mov	r2, r3
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d102      	bne.n	80058b8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80058b2:	2304      	movs	r3, #4
 80058b4:	61fb      	str	r3, [r7, #28]
 80058b6:	e01b      	b.n	80058f0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d102      	bne.n	80058c6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80058c0:	2303      	movs	r3, #3
 80058c2:	61fb      	str	r3, [r7, #28]
 80058c4:	e014      	b.n	80058f0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	d00b      	beq.n	80058e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d007      	beq.n	80058e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80058da:	2b03      	cmp	r3, #3
 80058dc:	d003      	beq.n	80058e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80058e2:	2b07      	cmp	r3, #7
 80058e4:	d102      	bne.n	80058ec <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80058e6:	2302      	movs	r3, #2
 80058e8:	61fb      	str	r3, [r7, #28]
 80058ea:	e001      	b.n	80058f0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80058ec:	2301      	movs	r3, #1
 80058ee:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	461a      	mov	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	01db      	lsls	r3, r3, #7
 80058fa:	4413      	add	r3, r2
 80058fc:	3384      	adds	r3, #132	@ 0x84
 80058fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	6812      	ldr	r2, [r2, #0]
 8005904:	4611      	mov	r1, r2
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	01d2      	lsls	r2, r2, #7
 800590a:	440a      	add	r2, r1
 800590c:	3284      	adds	r2, #132	@ 0x84
 800590e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005912:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	fb02 f303 	mul.w	r3, r2, r3
 800591e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	6859      	ldr	r1, [r3, #4]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	1acb      	subs	r3, r1, r3
 800592a:	69f9      	ldr	r1, [r7, #28]
 800592c:	fb01 f303 	mul.w	r3, r1, r3
 8005930:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005932:	68f9      	ldr	r1, [r7, #12]
 8005934:	6809      	ldr	r1, [r1, #0]
 8005936:	4608      	mov	r0, r1
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	01c9      	lsls	r1, r1, #7
 800593c:	4401      	add	r1, r0
 800593e:	3184      	adds	r1, #132	@ 0x84
 8005940:	4313      	orrs	r3, r2
 8005942:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	461a      	mov	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	01db      	lsls	r3, r3, #7
 800594e:	4413      	add	r3, r2
 8005950:	3384      	adds	r3, #132	@ 0x84
 8005952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	6812      	ldr	r2, [r2, #0]
 8005958:	4611      	mov	r1, r2
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	01d2      	lsls	r2, r2, #7
 800595e:	440a      	add	r2, r1
 8005960:	3284      	adds	r2, #132	@ 0x84
 8005962:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005966:	f023 0307 	bic.w	r3, r3, #7
 800596a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	01db      	lsls	r3, r3, #7
 8005976:	4413      	add	r3, r2
 8005978:	3384      	adds	r3, #132	@ 0x84
 800597a:	461a      	mov	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005980:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	01db      	lsls	r3, r3, #7
 800598c:	4413      	add	r3, r2
 800598e:	3384      	adds	r3, #132	@ 0x84
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	6812      	ldr	r2, [r2, #0]
 8005996:	4611      	mov	r1, r2
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	01d2      	lsls	r2, r2, #7
 800599c:	440a      	add	r2, r1
 800599e:	3284      	adds	r2, #132	@ 0x84
 80059a0:	f043 0301 	orr.w	r3, r3, #1
 80059a4:	6013      	str	r3, [r2, #0]
}
 80059a6:	bf00      	nop
 80059a8:	3724      	adds	r7, #36	@ 0x24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
	...

080059b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80059be:	2300      	movs	r3, #0
 80059c0:	603b      	str	r3, [r7, #0]
 80059c2:	4b20      	ldr	r3, [pc, #128]	@ (8005a44 <HAL_PWREx_EnableOverDrive+0x90>)
 80059c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c6:	4a1f      	ldr	r2, [pc, #124]	@ (8005a44 <HAL_PWREx_EnableOverDrive+0x90>)
 80059c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80059ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005a44 <HAL_PWREx_EnableOverDrive+0x90>)
 80059d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059d6:	603b      	str	r3, [r7, #0]
 80059d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80059da:	4b1b      	ldr	r3, [pc, #108]	@ (8005a48 <HAL_PWREx_EnableOverDrive+0x94>)
 80059dc:	2201      	movs	r2, #1
 80059de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059e0:	f7fe fac8 	bl	8003f74 <HAL_GetTick>
 80059e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80059e6:	e009      	b.n	80059fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80059e8:	f7fe fac4 	bl	8003f74 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80059f6:	d901      	bls.n	80059fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e01f      	b.n	8005a3c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80059fc:	4b13      	ldr	r3, [pc, #76]	@ (8005a4c <HAL_PWREx_EnableOverDrive+0x98>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a08:	d1ee      	bne.n	80059e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005a0a:	4b11      	ldr	r3, [pc, #68]	@ (8005a50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a10:	f7fe fab0 	bl	8003f74 <HAL_GetTick>
 8005a14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005a16:	e009      	b.n	8005a2c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005a18:	f7fe faac 	bl	8003f74 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a26:	d901      	bls.n	8005a2c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e007      	b.n	8005a3c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005a2c:	4b07      	ldr	r3, [pc, #28]	@ (8005a4c <HAL_PWREx_EnableOverDrive+0x98>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a38:	d1ee      	bne.n	8005a18 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40023800 	.word	0x40023800
 8005a48:	420e0040 	.word	0x420e0040
 8005a4c:	40007000 	.word	0x40007000
 8005a50:	420e0044 	.word	0x420e0044

08005a54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e267      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d075      	beq.n	8005b5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005a72:	4b88      	ldr	r3, [pc, #544]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f003 030c 	and.w	r3, r3, #12
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d00c      	beq.n	8005a98 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a7e:	4b85      	ldr	r3, [pc, #532]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005a86:	2b08      	cmp	r3, #8
 8005a88:	d112      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a8a:	4b82      	ldr	r3, [pc, #520]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a96:	d10b      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a98:	4b7e      	ldr	r3, [pc, #504]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d05b      	beq.n	8005b5c <HAL_RCC_OscConfig+0x108>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d157      	bne.n	8005b5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e242      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ab8:	d106      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x74>
 8005aba:	4b76      	ldr	r3, [pc, #472]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a75      	ldr	r2, [pc, #468]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005ac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	e01d      	b.n	8005b04 <HAL_RCC_OscConfig+0xb0>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ad0:	d10c      	bne.n	8005aec <HAL_RCC_OscConfig+0x98>
 8005ad2:	4b70      	ldr	r3, [pc, #448]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a6f      	ldr	r2, [pc, #444]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005ad8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005adc:	6013      	str	r3, [r2, #0]
 8005ade:	4b6d      	ldr	r3, [pc, #436]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a6c      	ldr	r2, [pc, #432]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	e00b      	b.n	8005b04 <HAL_RCC_OscConfig+0xb0>
 8005aec:	4b69      	ldr	r3, [pc, #420]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a68      	ldr	r2, [pc, #416]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005af2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005af6:	6013      	str	r3, [r2, #0]
 8005af8:	4b66      	ldr	r3, [pc, #408]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a65      	ldr	r2, [pc, #404]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005afe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d013      	beq.n	8005b34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b0c:	f7fe fa32 	bl	8003f74 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b14:	f7fe fa2e 	bl	8003f74 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b64      	cmp	r3, #100	@ 0x64
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e207      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b26:	4b5b      	ldr	r3, [pc, #364]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0f0      	beq.n	8005b14 <HAL_RCC_OscConfig+0xc0>
 8005b32:	e014      	b.n	8005b5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b34:	f7fe fa1e 	bl	8003f74 <HAL_GetTick>
 8005b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b3a:	e008      	b.n	8005b4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b3c:	f7fe fa1a 	bl	8003f74 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b64      	cmp	r3, #100	@ 0x64
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e1f3      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b4e:	4b51      	ldr	r3, [pc, #324]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1f0      	bne.n	8005b3c <HAL_RCC_OscConfig+0xe8>
 8005b5a:	e000      	b.n	8005b5e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d063      	beq.n	8005c32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005b6a:	4b4a      	ldr	r3, [pc, #296]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 030c 	and.w	r3, r3, #12
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00b      	beq.n	8005b8e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b76:	4b47      	ldr	r3, [pc, #284]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005b7e:	2b08      	cmp	r3, #8
 8005b80:	d11c      	bne.n	8005bbc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b82:	4b44      	ldr	r3, [pc, #272]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d116      	bne.n	8005bbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b8e:	4b41      	ldr	r3, [pc, #260]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d005      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x152>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d001      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e1c7      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ba6:	4b3b      	ldr	r3, [pc, #236]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	4937      	ldr	r1, [pc, #220]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bba:	e03a      	b.n	8005c32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d020      	beq.n	8005c06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bc4:	4b34      	ldr	r3, [pc, #208]	@ (8005c98 <HAL_RCC_OscConfig+0x244>)
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bca:	f7fe f9d3 	bl	8003f74 <HAL_GetTick>
 8005bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bd0:	e008      	b.n	8005be4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bd2:	f7fe f9cf 	bl	8003f74 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e1a8      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005be4:	4b2b      	ldr	r3, [pc, #172]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0f0      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf0:	4b28      	ldr	r3, [pc, #160]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	4925      	ldr	r1, [pc, #148]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	600b      	str	r3, [r1, #0]
 8005c04:	e015      	b.n	8005c32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c06:	4b24      	ldr	r3, [pc, #144]	@ (8005c98 <HAL_RCC_OscConfig+0x244>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0c:	f7fe f9b2 	bl	8003f74 <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c14:	f7fe f9ae 	bl	8003f74 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e187      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c26:	4b1b      	ldr	r3, [pc, #108]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1f0      	bne.n	8005c14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0308 	and.w	r3, r3, #8
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d036      	beq.n	8005cac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d016      	beq.n	8005c74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c46:	4b15      	ldr	r3, [pc, #84]	@ (8005c9c <HAL_RCC_OscConfig+0x248>)
 8005c48:	2201      	movs	r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c4c:	f7fe f992 	bl	8003f74 <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c52:	e008      	b.n	8005c66 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c54:	f7fe f98e 	bl	8003f74 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e167      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c66:	4b0b      	ldr	r3, [pc, #44]	@ (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d0f0      	beq.n	8005c54 <HAL_RCC_OscConfig+0x200>
 8005c72:	e01b      	b.n	8005cac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c74:	4b09      	ldr	r3, [pc, #36]	@ (8005c9c <HAL_RCC_OscConfig+0x248>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c7a:	f7fe f97b 	bl	8003f74 <HAL_GetTick>
 8005c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c80:	e00e      	b.n	8005ca0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c82:	f7fe f977 	bl	8003f74 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d907      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e150      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
 8005c94:	40023800 	.word	0x40023800
 8005c98:	42470000 	.word	0x42470000
 8005c9c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ca0:	4b88      	ldr	r3, [pc, #544]	@ (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005ca2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1ea      	bne.n	8005c82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 8097 	beq.w	8005de8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cbe:	4b81      	ldr	r3, [pc, #516]	@ (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10f      	bne.n	8005cea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60bb      	str	r3, [r7, #8]
 8005cce:	4b7d      	ldr	r3, [pc, #500]	@ (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd2:	4a7c      	ldr	r2, [pc, #496]	@ (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cda:	4b7a      	ldr	r3, [pc, #488]	@ (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ce2:	60bb      	str	r3, [r7, #8]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cea:	4b77      	ldr	r3, [pc, #476]	@ (8005ec8 <HAL_RCC_OscConfig+0x474>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d118      	bne.n	8005d28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cf6:	4b74      	ldr	r3, [pc, #464]	@ (8005ec8 <HAL_RCC_OscConfig+0x474>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a73      	ldr	r2, [pc, #460]	@ (8005ec8 <HAL_RCC_OscConfig+0x474>)
 8005cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d02:	f7fe f937 	bl	8003f74 <HAL_GetTick>
 8005d06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d08:	e008      	b.n	8005d1c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d0a:	f7fe f933 	bl	8003f74 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d901      	bls.n	8005d1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e10c      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d1c:	4b6a      	ldr	r3, [pc, #424]	@ (8005ec8 <HAL_RCC_OscConfig+0x474>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0f0      	beq.n	8005d0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d106      	bne.n	8005d3e <HAL_RCC_OscConfig+0x2ea>
 8005d30:	4b64      	ldr	r3, [pc, #400]	@ (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d34:	4a63      	ldr	r2, [pc, #396]	@ (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005d36:	f043 0301 	orr.w	r3, r3, #1
 8005d3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d3c:	e01c      	b.n	8005d78 <HAL_RCC_OscConfig+0x324>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	2b05      	cmp	r3, #5
 8005d44:	d10c      	bne.n	8005d60 <HAL_RCC_OscConfig+0x30c>
 8005d46:	4b5f      	ldr	r3, [pc, #380]	@ (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d4a:	4a5e      	ldr	r2, [pc, #376]	@ (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005d4c:	f043 0304 	orr.w	r3, r3, #4
 8005d50:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d52:	4b5c      	ldr	r3, [pc, #368]	@ (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d56:	4a5b      	ldr	r2, [pc, #364]	@ (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005d58:	f043 0301 	orr.w	r3, r3, #1
 8005d5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d5e:	e00b      	b.n	8005d78 <HAL_RCC_OscConfig+0x324>
 8005d60:	4b58      	ldr	r3, [pc, #352]	@ (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d64:	4a57      	ldr	r2, [pc, #348]	@ (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005d66:	f023 0301 	bic.w	r3, r3, #1
 8005d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d6c:	4b55      	ldr	r3, [pc, #340]	@ (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d70:	4a54      	ldr	r2, [pc, #336]	@ (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005d72:	f023 0304 	bic.w	r3, r3, #4
 8005d76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d015      	beq.n	8005dac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d80:	f7fe f8f8 	bl	8003f74 <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d86:	e00a      	b.n	8005d9e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d88:	f7fe f8f4 	bl	8003f74 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e0cb      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d9e:	4b49      	ldr	r3, [pc, #292]	@ (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d0ee      	beq.n	8005d88 <HAL_RCC_OscConfig+0x334>
 8005daa:	e014      	b.n	8005dd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dac:	f7fe f8e2 	bl	8003f74 <HAL_GetTick>
 8005db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005db2:	e00a      	b.n	8005dca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005db4:	f7fe f8de 	bl	8003f74 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e0b5      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dca:	4b3e      	ldr	r3, [pc, #248]	@ (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1ee      	bne.n	8005db4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005dd6:	7dfb      	ldrb	r3, [r7, #23]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d105      	bne.n	8005de8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ddc:	4b39      	ldr	r3, [pc, #228]	@ (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de0:	4a38      	ldr	r2, [pc, #224]	@ (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005de2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005de6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 80a1 	beq.w	8005f34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005df2:	4b34      	ldr	r3, [pc, #208]	@ (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f003 030c 	and.w	r3, r3, #12
 8005dfa:	2b08      	cmp	r3, #8
 8005dfc:	d05c      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d141      	bne.n	8005e8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e06:	4b31      	ldr	r3, [pc, #196]	@ (8005ecc <HAL_RCC_OscConfig+0x478>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e0c:	f7fe f8b2 	bl	8003f74 <HAL_GetTick>
 8005e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e12:	e008      	b.n	8005e26 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e14:	f7fe f8ae 	bl	8003f74 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e087      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e26:	4b27      	ldr	r3, [pc, #156]	@ (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1f0      	bne.n	8005e14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	69da      	ldr	r2, [r3, #28]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e40:	019b      	lsls	r3, r3, #6
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e48:	085b      	lsrs	r3, r3, #1
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	041b      	lsls	r3, r3, #16
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e54:	061b      	lsls	r3, r3, #24
 8005e56:	491b      	ldr	r1, [pc, #108]	@ (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8005ecc <HAL_RCC_OscConfig+0x478>)
 8005e5e:	2201      	movs	r2, #1
 8005e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e62:	f7fe f887 	bl	8003f74 <HAL_GetTick>
 8005e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e68:	e008      	b.n	8005e7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e6a:	f7fe f883 	bl	8003f74 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d901      	bls.n	8005e7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e05c      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e7c:	4b11      	ldr	r3, [pc, #68]	@ (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0f0      	beq.n	8005e6a <HAL_RCC_OscConfig+0x416>
 8005e88:	e054      	b.n	8005f34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e8a:	4b10      	ldr	r3, [pc, #64]	@ (8005ecc <HAL_RCC_OscConfig+0x478>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e90:	f7fe f870 	bl	8003f74 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e98:	f7fe f86c 	bl	8003f74 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e045      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eaa:	4b06      	ldr	r3, [pc, #24]	@ (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1f0      	bne.n	8005e98 <HAL_RCC_OscConfig+0x444>
 8005eb6:	e03d      	b.n	8005f34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d107      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e038      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
 8005ec4:	40023800 	.word	0x40023800
 8005ec8:	40007000 	.word	0x40007000
 8005ecc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8005f40 <HAL_RCC_OscConfig+0x4ec>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d028      	beq.n	8005f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d121      	bne.n	8005f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d11a      	bne.n	8005f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005f00:	4013      	ands	r3, r2
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005f06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d111      	bne.n	8005f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f16:	085b      	lsrs	r3, r3, #1
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d107      	bne.n	8005f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d001      	beq.n	8005f34 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e000      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	40023800 	.word	0x40023800

08005f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e0cc      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f58:	4b68      	ldr	r3, [pc, #416]	@ (80060fc <HAL_RCC_ClockConfig+0x1b8>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 030f 	and.w	r3, r3, #15
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d90c      	bls.n	8005f80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f66:	4b65      	ldr	r3, [pc, #404]	@ (80060fc <HAL_RCC_ClockConfig+0x1b8>)
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f6e:	4b63      	ldr	r3, [pc, #396]	@ (80060fc <HAL_RCC_ClockConfig+0x1b8>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 030f 	and.w	r3, r3, #15
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d001      	beq.n	8005f80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e0b8      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d020      	beq.n	8005fce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d005      	beq.n	8005fa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f98:	4b59      	ldr	r3, [pc, #356]	@ (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	4a58      	ldr	r2, [pc, #352]	@ (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005fa2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0308 	and.w	r3, r3, #8
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d005      	beq.n	8005fbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fb0:	4b53      	ldr	r3, [pc, #332]	@ (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	4a52      	ldr	r2, [pc, #328]	@ (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005fba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fbc:	4b50      	ldr	r3, [pc, #320]	@ (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	494d      	ldr	r1, [pc, #308]	@ (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d044      	beq.n	8006064 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d107      	bne.n	8005ff2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fe2:	4b47      	ldr	r3, [pc, #284]	@ (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d119      	bne.n	8006022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e07f      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d003      	beq.n	8006002 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d107      	bne.n	8006012 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006002:	4b3f      	ldr	r3, [pc, #252]	@ (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d109      	bne.n	8006022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e06f      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006012:	4b3b      	ldr	r3, [pc, #236]	@ (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e067      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006022:	4b37      	ldr	r3, [pc, #220]	@ (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f023 0203 	bic.w	r2, r3, #3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	4934      	ldr	r1, [pc, #208]	@ (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 8006030:	4313      	orrs	r3, r2
 8006032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006034:	f7fd ff9e 	bl	8003f74 <HAL_GetTick>
 8006038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800603a:	e00a      	b.n	8006052 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800603c:	f7fd ff9a 	bl	8003f74 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800604a:	4293      	cmp	r3, r2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e04f      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006052:	4b2b      	ldr	r3, [pc, #172]	@ (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f003 020c 	and.w	r2, r3, #12
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	429a      	cmp	r2, r3
 8006062:	d1eb      	bne.n	800603c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006064:	4b25      	ldr	r3, [pc, #148]	@ (80060fc <HAL_RCC_ClockConfig+0x1b8>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 030f 	and.w	r3, r3, #15
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	429a      	cmp	r2, r3
 8006070:	d20c      	bcs.n	800608c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006072:	4b22      	ldr	r3, [pc, #136]	@ (80060fc <HAL_RCC_ClockConfig+0x1b8>)
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800607a:	4b20      	ldr	r3, [pc, #128]	@ (80060fc <HAL_RCC_ClockConfig+0x1b8>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 030f 	and.w	r3, r3, #15
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	429a      	cmp	r2, r3
 8006086:	d001      	beq.n	800608c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e032      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b00      	cmp	r3, #0
 8006096:	d008      	beq.n	80060aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006098:	4b19      	ldr	r3, [pc, #100]	@ (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	4916      	ldr	r1, [pc, #88]	@ (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0308 	and.w	r3, r3, #8
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d009      	beq.n	80060ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060b6:	4b12      	ldr	r3, [pc, #72]	@ (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	490e      	ldr	r1, [pc, #56]	@ (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80060ca:	f000 f821 	bl	8006110 <HAL_RCC_GetSysClockFreq>
 80060ce:	4602      	mov	r2, r0
 80060d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	091b      	lsrs	r3, r3, #4
 80060d6:	f003 030f 	and.w	r3, r3, #15
 80060da:	490a      	ldr	r1, [pc, #40]	@ (8006104 <HAL_RCC_ClockConfig+0x1c0>)
 80060dc:	5ccb      	ldrb	r3, [r1, r3]
 80060de:	fa22 f303 	lsr.w	r3, r2, r3
 80060e2:	4a09      	ldr	r2, [pc, #36]	@ (8006108 <HAL_RCC_ClockConfig+0x1c4>)
 80060e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80060e6:	4b09      	ldr	r3, [pc, #36]	@ (800610c <HAL_RCC_ClockConfig+0x1c8>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fd fefe 	bl	8003eec <HAL_InitTick>

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	40023c00 	.word	0x40023c00
 8006100:	40023800 	.word	0x40023800
 8006104:	0800be28 	.word	0x0800be28
 8006108:	20000004 	.word	0x20000004
 800610c:	20000050 	.word	0x20000050

08006110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006114:	b094      	sub	sp, #80	@ 0x50
 8006116:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800611c:	2300      	movs	r3, #0
 800611e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006128:	4b79      	ldr	r3, [pc, #484]	@ (8006310 <HAL_RCC_GetSysClockFreq+0x200>)
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f003 030c 	and.w	r3, r3, #12
 8006130:	2b08      	cmp	r3, #8
 8006132:	d00d      	beq.n	8006150 <HAL_RCC_GetSysClockFreq+0x40>
 8006134:	2b08      	cmp	r3, #8
 8006136:	f200 80e1 	bhi.w	80062fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <HAL_RCC_GetSysClockFreq+0x34>
 800613e:	2b04      	cmp	r3, #4
 8006140:	d003      	beq.n	800614a <HAL_RCC_GetSysClockFreq+0x3a>
 8006142:	e0db      	b.n	80062fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006144:	4b73      	ldr	r3, [pc, #460]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x204>)
 8006146:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006148:	e0db      	b.n	8006302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800614a:	4b73      	ldr	r3, [pc, #460]	@ (8006318 <HAL_RCC_GetSysClockFreq+0x208>)
 800614c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800614e:	e0d8      	b.n	8006302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006150:	4b6f      	ldr	r3, [pc, #444]	@ (8006310 <HAL_RCC_GetSysClockFreq+0x200>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006158:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800615a:	4b6d      	ldr	r3, [pc, #436]	@ (8006310 <HAL_RCC_GetSysClockFreq+0x200>)
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d063      	beq.n	800622e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006166:	4b6a      	ldr	r3, [pc, #424]	@ (8006310 <HAL_RCC_GetSysClockFreq+0x200>)
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	099b      	lsrs	r3, r3, #6
 800616c:	2200      	movs	r2, #0
 800616e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006170:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006178:	633b      	str	r3, [r7, #48]	@ 0x30
 800617a:	2300      	movs	r3, #0
 800617c:	637b      	str	r3, [r7, #52]	@ 0x34
 800617e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006182:	4622      	mov	r2, r4
 8006184:	462b      	mov	r3, r5
 8006186:	f04f 0000 	mov.w	r0, #0
 800618a:	f04f 0100 	mov.w	r1, #0
 800618e:	0159      	lsls	r1, r3, #5
 8006190:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006194:	0150      	lsls	r0, r2, #5
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	4621      	mov	r1, r4
 800619c:	1a51      	subs	r1, r2, r1
 800619e:	6139      	str	r1, [r7, #16]
 80061a0:	4629      	mov	r1, r5
 80061a2:	eb63 0301 	sbc.w	r3, r3, r1
 80061a6:	617b      	str	r3, [r7, #20]
 80061a8:	f04f 0200 	mov.w	r2, #0
 80061ac:	f04f 0300 	mov.w	r3, #0
 80061b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061b4:	4659      	mov	r1, fp
 80061b6:	018b      	lsls	r3, r1, #6
 80061b8:	4651      	mov	r1, sl
 80061ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061be:	4651      	mov	r1, sl
 80061c0:	018a      	lsls	r2, r1, #6
 80061c2:	4651      	mov	r1, sl
 80061c4:	ebb2 0801 	subs.w	r8, r2, r1
 80061c8:	4659      	mov	r1, fp
 80061ca:	eb63 0901 	sbc.w	r9, r3, r1
 80061ce:	f04f 0200 	mov.w	r2, #0
 80061d2:	f04f 0300 	mov.w	r3, #0
 80061d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061e2:	4690      	mov	r8, r2
 80061e4:	4699      	mov	r9, r3
 80061e6:	4623      	mov	r3, r4
 80061e8:	eb18 0303 	adds.w	r3, r8, r3
 80061ec:	60bb      	str	r3, [r7, #8]
 80061ee:	462b      	mov	r3, r5
 80061f0:	eb49 0303 	adc.w	r3, r9, r3
 80061f4:	60fb      	str	r3, [r7, #12]
 80061f6:	f04f 0200 	mov.w	r2, #0
 80061fa:	f04f 0300 	mov.w	r3, #0
 80061fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006202:	4629      	mov	r1, r5
 8006204:	024b      	lsls	r3, r1, #9
 8006206:	4621      	mov	r1, r4
 8006208:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800620c:	4621      	mov	r1, r4
 800620e:	024a      	lsls	r2, r1, #9
 8006210:	4610      	mov	r0, r2
 8006212:	4619      	mov	r1, r3
 8006214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006216:	2200      	movs	r2, #0
 8006218:	62bb      	str	r3, [r7, #40]	@ 0x28
 800621a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800621c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006220:	f7fa fd42 	bl	8000ca8 <__aeabi_uldivmod>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4613      	mov	r3, r2
 800622a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800622c:	e058      	b.n	80062e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800622e:	4b38      	ldr	r3, [pc, #224]	@ (8006310 <HAL_RCC_GetSysClockFreq+0x200>)
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	099b      	lsrs	r3, r3, #6
 8006234:	2200      	movs	r2, #0
 8006236:	4618      	mov	r0, r3
 8006238:	4611      	mov	r1, r2
 800623a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800623e:	623b      	str	r3, [r7, #32]
 8006240:	2300      	movs	r3, #0
 8006242:	627b      	str	r3, [r7, #36]	@ 0x24
 8006244:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006248:	4642      	mov	r2, r8
 800624a:	464b      	mov	r3, r9
 800624c:	f04f 0000 	mov.w	r0, #0
 8006250:	f04f 0100 	mov.w	r1, #0
 8006254:	0159      	lsls	r1, r3, #5
 8006256:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800625a:	0150      	lsls	r0, r2, #5
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4641      	mov	r1, r8
 8006262:	ebb2 0a01 	subs.w	sl, r2, r1
 8006266:	4649      	mov	r1, r9
 8006268:	eb63 0b01 	sbc.w	fp, r3, r1
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	f04f 0300 	mov.w	r3, #0
 8006274:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006278:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800627c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006280:	ebb2 040a 	subs.w	r4, r2, sl
 8006284:	eb63 050b 	sbc.w	r5, r3, fp
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	00eb      	lsls	r3, r5, #3
 8006292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006296:	00e2      	lsls	r2, r4, #3
 8006298:	4614      	mov	r4, r2
 800629a:	461d      	mov	r5, r3
 800629c:	4643      	mov	r3, r8
 800629e:	18e3      	adds	r3, r4, r3
 80062a0:	603b      	str	r3, [r7, #0]
 80062a2:	464b      	mov	r3, r9
 80062a4:	eb45 0303 	adc.w	r3, r5, r3
 80062a8:	607b      	str	r3, [r7, #4]
 80062aa:	f04f 0200 	mov.w	r2, #0
 80062ae:	f04f 0300 	mov.w	r3, #0
 80062b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062b6:	4629      	mov	r1, r5
 80062b8:	028b      	lsls	r3, r1, #10
 80062ba:	4621      	mov	r1, r4
 80062bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062c0:	4621      	mov	r1, r4
 80062c2:	028a      	lsls	r2, r1, #10
 80062c4:	4610      	mov	r0, r2
 80062c6:	4619      	mov	r1, r3
 80062c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062ca:	2200      	movs	r2, #0
 80062cc:	61bb      	str	r3, [r7, #24]
 80062ce:	61fa      	str	r2, [r7, #28]
 80062d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062d4:	f7fa fce8 	bl	8000ca8 <__aeabi_uldivmod>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	4613      	mov	r3, r2
 80062de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80062e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006310 <HAL_RCC_GetSysClockFreq+0x200>)
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	0c1b      	lsrs	r3, r3, #16
 80062e6:	f003 0303 	and.w	r3, r3, #3
 80062ea:	3301      	adds	r3, #1
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80062f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062fa:	e002      	b.n	8006302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062fc:	4b05      	ldr	r3, [pc, #20]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x204>)
 80062fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006304:	4618      	mov	r0, r3
 8006306:	3750      	adds	r7, #80	@ 0x50
 8006308:	46bd      	mov	sp, r7
 800630a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800630e:	bf00      	nop
 8006310:	40023800 	.word	0x40023800
 8006314:	00f42400 	.word	0x00f42400
 8006318:	007a1200 	.word	0x007a1200

0800631c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800631c:	b480      	push	{r7}
 800631e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006320:	4b03      	ldr	r3, [pc, #12]	@ (8006330 <HAL_RCC_GetHCLKFreq+0x14>)
 8006322:	681b      	ldr	r3, [r3, #0]
}
 8006324:	4618      	mov	r0, r3
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	20000004 	.word	0x20000004

08006334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006338:	f7ff fff0 	bl	800631c <HAL_RCC_GetHCLKFreq>
 800633c:	4602      	mov	r2, r0
 800633e:	4b05      	ldr	r3, [pc, #20]	@ (8006354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	0a9b      	lsrs	r3, r3, #10
 8006344:	f003 0307 	and.w	r3, r3, #7
 8006348:	4903      	ldr	r1, [pc, #12]	@ (8006358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800634a:	5ccb      	ldrb	r3, [r1, r3]
 800634c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006350:	4618      	mov	r0, r3
 8006352:	bd80      	pop	{r7, pc}
 8006354:	40023800 	.word	0x40023800
 8006358:	0800be38 	.word	0x0800be38

0800635c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10b      	bne.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006380:	2b00      	cmp	r3, #0
 8006382:	d105      	bne.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800638c:	2b00      	cmp	r3, #0
 800638e:	d075      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006390:	4b91      	ldr	r3, [pc, #580]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006396:	f7fd fded 	bl	8003f74 <HAL_GetTick>
 800639a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800639c:	e008      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800639e:	f7fd fde9 	bl	8003f74 <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d901      	bls.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e189      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063b0:	4b8a      	ldr	r3, [pc, #552]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1f0      	bne.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d009      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	019a      	lsls	r2, r3, #6
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	071b      	lsls	r3, r3, #28
 80063d4:	4981      	ldr	r1, [pc, #516]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0302 	and.w	r3, r3, #2
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d01f      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80063e8:	4b7c      	ldr	r3, [pc, #496]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063ee:	0f1b      	lsrs	r3, r3, #28
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	019a      	lsls	r2, r3, #6
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	061b      	lsls	r3, r3, #24
 8006402:	431a      	orrs	r2, r3
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	071b      	lsls	r3, r3, #28
 8006408:	4974      	ldr	r1, [pc, #464]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800640a:	4313      	orrs	r3, r2
 800640c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006410:	4b72      	ldr	r3, [pc, #456]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006412:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006416:	f023 021f 	bic.w	r2, r3, #31
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	3b01      	subs	r3, #1
 8006420:	496e      	ldr	r1, [pc, #440]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006422:	4313      	orrs	r3, r2
 8006424:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00d      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	019a      	lsls	r2, r3, #6
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	061b      	lsls	r3, r3, #24
 8006440:	431a      	orrs	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	071b      	lsls	r3, r3, #28
 8006448:	4964      	ldr	r1, [pc, #400]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800644a:	4313      	orrs	r3, r2
 800644c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006450:	4b61      	ldr	r3, [pc, #388]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006452:	2201      	movs	r2, #1
 8006454:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006456:	f7fd fd8d 	bl	8003f74 <HAL_GetTick>
 800645a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800645c:	e008      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800645e:	f7fd fd89 	bl	8003f74 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b02      	cmp	r3, #2
 800646a:	d901      	bls.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e129      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006470:	4b5a      	ldr	r3, [pc, #360]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d0f0      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	d105      	bne.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006490:	2b00      	cmp	r3, #0
 8006492:	d079      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006494:	4b52      	ldr	r3, [pc, #328]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006496:	2200      	movs	r2, #0
 8006498:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800649a:	f7fd fd6b 	bl	8003f74 <HAL_GetTick>
 800649e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80064a0:	e008      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80064a2:	f7fd fd67 	bl	8003f74 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d901      	bls.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e107      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80064b4:	4b49      	ldr	r3, [pc, #292]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064c0:	d0ef      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0304 	and.w	r3, r3, #4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d020      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80064ce:	4b43      	ldr	r3, [pc, #268]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d4:	0f1b      	lsrs	r3, r3, #28
 80064d6:	f003 0307 	and.w	r3, r3, #7
 80064da:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	019a      	lsls	r2, r3, #6
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	061b      	lsls	r3, r3, #24
 80064e8:	431a      	orrs	r2, r3
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	071b      	lsls	r3, r3, #28
 80064ee:	493b      	ldr	r1, [pc, #236]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80064f6:	4b39      	ldr	r3, [pc, #228]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064fc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a1b      	ldr	r3, [r3, #32]
 8006504:	3b01      	subs	r3, #1
 8006506:	021b      	lsls	r3, r3, #8
 8006508:	4934      	ldr	r1, [pc, #208]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800650a:	4313      	orrs	r3, r2
 800650c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0308 	and.w	r3, r3, #8
 8006518:	2b00      	cmp	r3, #0
 800651a:	d01e      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800651c:	4b2f      	ldr	r3, [pc, #188]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800651e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006522:	0e1b      	lsrs	r3, r3, #24
 8006524:	f003 030f 	and.w	r3, r3, #15
 8006528:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	019a      	lsls	r2, r3, #6
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	061b      	lsls	r3, r3, #24
 8006534:	431a      	orrs	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	071b      	lsls	r3, r3, #28
 800653c:	4927      	ldr	r1, [pc, #156]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800653e:	4313      	orrs	r3, r2
 8006540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006544:	4b25      	ldr	r3, [pc, #148]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006546:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800654a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006552:	4922      	ldr	r1, [pc, #136]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006554:	4313      	orrs	r3, r2
 8006556:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800655a:	4b21      	ldr	r3, [pc, #132]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800655c:	2201      	movs	r2, #1
 800655e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006560:	f7fd fd08 	bl	8003f74 <HAL_GetTick>
 8006564:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006566:	e008      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006568:	f7fd fd04 	bl	8003f74 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	2b02      	cmp	r3, #2
 8006574:	d901      	bls.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e0a4      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800657a:	4b18      	ldr	r3, [pc, #96]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006582:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006586:	d1ef      	bne.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0320 	and.w	r3, r3, #32
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 808b 	beq.w	80066ac <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006596:	2300      	movs	r3, #0
 8006598:	60fb      	str	r3, [r7, #12]
 800659a:	4b10      	ldr	r3, [pc, #64]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800659c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659e:	4a0f      	ldr	r2, [pc, #60]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80065a6:	4b0d      	ldr	r3, [pc, #52]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80065b2:	4b0c      	ldr	r3, [pc, #48]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a0b      	ldr	r2, [pc, #44]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80065b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80065be:	f7fd fcd9 	bl	8003f74 <HAL_GetTick>
 80065c2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80065c4:	e010      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065c6:	f7fd fcd5 	bl	8003f74 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d909      	bls.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e075      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80065d8:	42470068 	.word	0x42470068
 80065dc:	40023800 	.word	0x40023800
 80065e0:	42470070 	.word	0x42470070
 80065e4:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80065e8:	4b38      	ldr	r3, [pc, #224]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d0e8      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065f4:	4b36      	ldr	r3, [pc, #216]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80065f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065fc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d02f      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006608:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	429a      	cmp	r2, r3
 8006610:	d028      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006612:	4b2f      	ldr	r3, [pc, #188]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800661a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800661c:	4b2d      	ldr	r3, [pc, #180]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800661e:	2201      	movs	r2, #1
 8006620:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006622:	4b2c      	ldr	r3, [pc, #176]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006624:	2200      	movs	r2, #0
 8006626:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006628:	4a29      	ldr	r2, [pc, #164]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800662e:	4b28      	ldr	r3, [pc, #160]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b01      	cmp	r3, #1
 8006638:	d114      	bne.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800663a:	f7fd fc9b 	bl	8003f74 <HAL_GetTick>
 800663e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006640:	e00a      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006642:	f7fd fc97 	bl	8003f74 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006650:	4293      	cmp	r3, r2
 8006652:	d901      	bls.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e035      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006658:	4b1d      	ldr	r3, [pc, #116]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800665a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d0ee      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006668:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800666c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006670:	d10d      	bne.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006672:	4b17      	ldr	r3, [pc, #92]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006682:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006686:	4912      	ldr	r1, [pc, #72]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006688:	4313      	orrs	r3, r2
 800668a:	608b      	str	r3, [r1, #8]
 800668c:	e005      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800668e:	4b10      	ldr	r3, [pc, #64]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	4a0f      	ldr	r2, [pc, #60]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006694:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006698:	6093      	str	r3, [r2, #8]
 800669a:	4b0d      	ldr	r3, [pc, #52]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800669c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066a6:	490a      	ldr	r1, [pc, #40]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0310 	and.w	r3, r3, #16
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d004      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80066be:	4b06      	ldr	r3, [pc, #24]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80066c0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	40007000 	.word	0x40007000
 80066d0:	40023800 	.word	0x40023800
 80066d4:	42470e40 	.word	0x42470e40
 80066d8:	424711e0 	.word	0x424711e0

080066dc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e025      	b.n	800673c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d106      	bne.n	800670a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7fc f8b7 	bl	8002878 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2202      	movs	r2, #2
 800670e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	3304      	adds	r3, #4
 800671a:	4619      	mov	r1, r3
 800671c:	4610      	mov	r0, r2
 800671e:	f000 fe75 	bl	800740c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6818      	ldr	r0, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	461a      	mov	r2, r3
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	f000 feca 	bl	80074c6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006756:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006758:	7dfb      	ldrb	r3, [r7, #23]
 800675a:	2b02      	cmp	r3, #2
 800675c:	d101      	bne.n	8006762 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800675e:	2302      	movs	r3, #2
 8006760:	e021      	b.n	80067a6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006762:	7dfb      	ldrb	r3, [r7, #23]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d002      	beq.n	800676e <HAL_SDRAM_SendCommand+0x2a>
 8006768:	7dfb      	ldrb	r3, [r7, #23]
 800676a:	2b05      	cmp	r3, #5
 800676c:	d118      	bne.n	80067a0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2202      	movs	r2, #2
 8006772:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	68b9      	ldr	r1, [r7, #8]
 800677e:	4618      	mov	r0, r3
 8006780:	f000 ff0a 	bl	8007598 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b02      	cmp	r3, #2
 800678a:	d104      	bne.n	8006796 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2205      	movs	r2, #5
 8006790:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006794:	e006      	b.n	80067a4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800679e:	e001      	b.n	80067a4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e000      	b.n	80067a6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3718      	adds	r7, #24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b082      	sub	sp, #8
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d101      	bne.n	80067c8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80067c4:	2302      	movs	r3, #2
 80067c6:	e016      	b.n	80067f6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d10f      	bne.n	80067f4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6839      	ldr	r1, [r7, #0]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 ff15 	bl	8007612 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	e000      	b.n	80067f6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e07b      	b.n	8006908 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006814:	2b00      	cmp	r3, #0
 8006816:	d108      	bne.n	800682a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006820:	d009      	beq.n	8006836 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	61da      	str	r2, [r3, #28]
 8006828:	e005      	b.n	8006836 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d106      	bne.n	8006856 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f7fb ff19 	bl	8002688 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2202      	movs	r2, #2
 800685a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800686c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800687e:	431a      	orrs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006888:	431a      	orrs	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	431a      	orrs	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	431a      	orrs	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068a6:	431a      	orrs	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	69db      	ldr	r3, [r3, #28]
 80068ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068b0:	431a      	orrs	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068ba:	ea42 0103 	orr.w	r1, r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	0c1b      	lsrs	r3, r3, #16
 80068d4:	f003 0104 	and.w	r1, r3, #4
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068dc:	f003 0210 	and.w	r2, r3, #16
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	430a      	orrs	r2, r1
 80068e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	69da      	ldr	r2, [r3, #28]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e01a      	b.n	8006958 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2202      	movs	r2, #2
 8006926:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006938:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7fb feec 	bl	8002718 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b088      	sub	sp, #32
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	603b      	str	r3, [r7, #0]
 800696c:	4613      	mov	r3, r2
 800696e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006970:	f7fd fb00 	bl	8003f74 <HAL_GetTick>
 8006974:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006976:	88fb      	ldrh	r3, [r7, #6]
 8006978:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b01      	cmp	r3, #1
 8006984:	d001      	beq.n	800698a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006986:	2302      	movs	r3, #2
 8006988:	e12a      	b.n	8006be0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <HAL_SPI_Transmit+0x36>
 8006990:	88fb      	ldrh	r3, [r7, #6]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e122      	b.n	8006be0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d101      	bne.n	80069a8 <HAL_SPI_Transmit+0x48>
 80069a4:	2302      	movs	r3, #2
 80069a6:	e11b      	b.n	8006be0 <HAL_SPI_Transmit+0x280>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2203      	movs	r2, #3
 80069b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	88fa      	ldrh	r2, [r7, #6]
 80069c8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	88fa      	ldrh	r2, [r7, #6]
 80069ce:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069f6:	d10f      	bne.n	8006a18 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a16:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a22:	2b40      	cmp	r3, #64	@ 0x40
 8006a24:	d007      	beq.n	8006a36 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a3e:	d152      	bne.n	8006ae6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <HAL_SPI_Transmit+0xee>
 8006a48:	8b7b      	ldrh	r3, [r7, #26]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d145      	bne.n	8006ada <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a52:	881a      	ldrh	r2, [r3, #0]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a5e:	1c9a      	adds	r2, r3, #2
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a72:	e032      	b.n	8006ada <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d112      	bne.n	8006aa8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a86:	881a      	ldrh	r2, [r3, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a92:	1c9a      	adds	r2, r3, #2
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006aa6:	e018      	b.n	8006ada <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aa8:	f7fd fa64 	bl	8003f74 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d803      	bhi.n	8006ac0 <HAL_SPI_Transmit+0x160>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abe:	d102      	bne.n	8006ac6 <HAL_SPI_Transmit+0x166>
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d109      	bne.n	8006ada <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e082      	b.n	8006be0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1c7      	bne.n	8006a74 <HAL_SPI_Transmit+0x114>
 8006ae4:	e053      	b.n	8006b8e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <HAL_SPI_Transmit+0x194>
 8006aee:	8b7b      	ldrh	r3, [r7, #26]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d147      	bne.n	8006b84 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	330c      	adds	r3, #12
 8006afe:	7812      	ldrb	r2, [r2, #0]
 8006b00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	3b01      	subs	r3, #1
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006b1a:	e033      	b.n	8006b84 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d113      	bne.n	8006b52 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	330c      	adds	r3, #12
 8006b34:	7812      	ldrb	r2, [r2, #0]
 8006b36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006b50:	e018      	b.n	8006b84 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b52:	f7fd fa0f 	bl	8003f74 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d803      	bhi.n	8006b6a <HAL_SPI_Transmit+0x20a>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b68:	d102      	bne.n	8006b70 <HAL_SPI_Transmit+0x210>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d109      	bne.n	8006b84 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e02d      	b.n	8006be0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1c6      	bne.n	8006b1c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b8e:	69fa      	ldr	r2, [r7, #28]
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 fbe6 	bl	8007364 <SPI_EndRxTxTransaction>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10a      	bne.n	8006bc2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bac:	2300      	movs	r3, #0
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	617b      	str	r3, [r7, #20]
 8006bc0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e000      	b.n	8006be0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006bde:	2300      	movs	r3, #0
  }
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3720      	adds	r7, #32
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af02      	add	r7, sp, #8
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	603b      	str	r3, [r7, #0]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d001      	beq.n	8006c08 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006c04:	2302      	movs	r3, #2
 8006c06:	e104      	b.n	8006e12 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c10:	d112      	bne.n	8006c38 <HAL_SPI_Receive+0x50>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10e      	bne.n	8006c38 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2204      	movs	r2, #4
 8006c1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006c22:	88fa      	ldrh	r2, [r7, #6]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	68b9      	ldr	r1, [r7, #8]
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 f8f3 	bl	8006e1a <HAL_SPI_TransmitReceive>
 8006c34:	4603      	mov	r3, r0
 8006c36:	e0ec      	b.n	8006e12 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c38:	f7fd f99c 	bl	8003f74 <HAL_GetTick>
 8006c3c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d002      	beq.n	8006c4a <HAL_SPI_Receive+0x62>
 8006c44:	88fb      	ldrh	r3, [r7, #6]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e0e1      	b.n	8006e12 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d101      	bne.n	8006c5c <HAL_SPI_Receive+0x74>
 8006c58:	2302      	movs	r3, #2
 8006c5a:	e0da      	b.n	8006e12 <HAL_SPI_Receive+0x22a>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2204      	movs	r2, #4
 8006c68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	88fa      	ldrh	r2, [r7, #6]
 8006c7c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	88fa      	ldrh	r2, [r7, #6]
 8006c82:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006caa:	d10f      	bne.n	8006ccc <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006cca:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd6:	2b40      	cmp	r3, #64	@ 0x40
 8006cd8:	d007      	beq.n	8006cea <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ce8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d170      	bne.n	8006dd4 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006cf2:	e035      	b.n	8006d60 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f003 0301 	and.w	r3, r3, #1
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d115      	bne.n	8006d2e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f103 020c 	add.w	r2, r3, #12
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d0e:	7812      	ldrb	r2, [r2, #0]
 8006d10:	b2d2      	uxtb	r2, r2
 8006d12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	3b01      	subs	r3, #1
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006d2c:	e018      	b.n	8006d60 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d2e:	f7fd f921 	bl	8003f74 <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d803      	bhi.n	8006d46 <HAL_SPI_Receive+0x15e>
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d44:	d102      	bne.n	8006d4c <HAL_SPI_Receive+0x164>
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d109      	bne.n	8006d60 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e058      	b.n	8006e12 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1c4      	bne.n	8006cf4 <HAL_SPI_Receive+0x10c>
 8006d6a:	e038      	b.n	8006dde <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d113      	bne.n	8006da2 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68da      	ldr	r2, [r3, #12]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d84:	b292      	uxth	r2, r2
 8006d86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8c:	1c9a      	adds	r2, r3, #2
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006da0:	e018      	b.n	8006dd4 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006da2:	f7fd f8e7 	bl	8003f74 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d803      	bhi.n	8006dba <HAL_SPI_Receive+0x1d2>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db8:	d102      	bne.n	8006dc0 <HAL_SPI_Receive+0x1d8>
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d109      	bne.n	8006dd4 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e01e      	b.n	8006e12 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1c6      	bne.n	8006d6c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	6839      	ldr	r1, [r7, #0]
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f000 fa58 	bl	8007298 <SPI_EndRxTransaction>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d002      	beq.n	8006df4 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2220      	movs	r2, #32
 8006df2:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e000      	b.n	8006e12 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006e10:	2300      	movs	r3, #0
  }
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3718      	adds	r7, #24
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b08a      	sub	sp, #40	@ 0x28
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	60f8      	str	r0, [r7, #12]
 8006e22:	60b9      	str	r1, [r7, #8]
 8006e24:	607a      	str	r2, [r7, #4]
 8006e26:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e2c:	f7fd f8a2 	bl	8003f74 <HAL_GetTick>
 8006e30:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e38:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006e40:	887b      	ldrh	r3, [r7, #2]
 8006e42:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e44:	7ffb      	ldrb	r3, [r7, #31]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d00c      	beq.n	8006e64 <HAL_SPI_TransmitReceive+0x4a>
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e50:	d106      	bne.n	8006e60 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d102      	bne.n	8006e60 <HAL_SPI_TransmitReceive+0x46>
 8006e5a:	7ffb      	ldrb	r3, [r7, #31]
 8006e5c:	2b04      	cmp	r3, #4
 8006e5e:	d001      	beq.n	8006e64 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006e60:	2302      	movs	r3, #2
 8006e62:	e17f      	b.n	8007164 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d005      	beq.n	8006e76 <HAL_SPI_TransmitReceive+0x5c>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <HAL_SPI_TransmitReceive+0x5c>
 8006e70:	887b      	ldrh	r3, [r7, #2]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d101      	bne.n	8006e7a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e174      	b.n	8007164 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d101      	bne.n	8006e88 <HAL_SPI_TransmitReceive+0x6e>
 8006e84:	2302      	movs	r3, #2
 8006e86:	e16d      	b.n	8007164 <HAL_SPI_TransmitReceive+0x34a>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b04      	cmp	r3, #4
 8006e9a:	d003      	beq.n	8006ea4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2205      	movs	r2, #5
 8006ea0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	887a      	ldrh	r2, [r7, #2]
 8006eb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	887a      	ldrh	r2, [r7, #2]
 8006eba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	887a      	ldrh	r2, [r7, #2]
 8006ec6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	887a      	ldrh	r2, [r7, #2]
 8006ecc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee4:	2b40      	cmp	r3, #64	@ 0x40
 8006ee6:	d007      	beq.n	8006ef8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ef6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f00:	d17e      	bne.n	8007000 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d002      	beq.n	8006f10 <HAL_SPI_TransmitReceive+0xf6>
 8006f0a:	8afb      	ldrh	r3, [r7, #22]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d16c      	bne.n	8006fea <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f14:	881a      	ldrh	r2, [r3, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f20:	1c9a      	adds	r2, r3, #2
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f34:	e059      	b.n	8006fea <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f003 0302 	and.w	r3, r3, #2
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d11b      	bne.n	8006f7c <HAL_SPI_TransmitReceive+0x162>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d016      	beq.n	8006f7c <HAL_SPI_TransmitReceive+0x162>
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d113      	bne.n	8006f7c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f58:	881a      	ldrh	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f64:	1c9a      	adds	r2, r3, #2
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	3b01      	subs	r3, #1
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d119      	bne.n	8006fbe <HAL_SPI_TransmitReceive+0x1a4>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d014      	beq.n	8006fbe <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68da      	ldr	r2, [r3, #12]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9e:	b292      	uxth	r2, r2
 8006fa0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa6:	1c9a      	adds	r2, r3, #2
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006fbe:	f7fc ffd9 	bl	8003f74 <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	6a3b      	ldr	r3, [r7, #32]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d80d      	bhi.n	8006fea <HAL_SPI_TransmitReceive+0x1d0>
 8006fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd4:	d009      	beq.n	8006fea <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e0bc      	b.n	8007164 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1a0      	bne.n	8006f36 <HAL_SPI_TransmitReceive+0x11c>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d19b      	bne.n	8006f36 <HAL_SPI_TransmitReceive+0x11c>
 8006ffe:	e082      	b.n	8007106 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <HAL_SPI_TransmitReceive+0x1f4>
 8007008:	8afb      	ldrh	r3, [r7, #22]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d171      	bne.n	80070f2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	330c      	adds	r3, #12
 8007018:	7812      	ldrb	r2, [r2, #0]
 800701a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800702a:	b29b      	uxth	r3, r3
 800702c:	3b01      	subs	r3, #1
 800702e:	b29a      	uxth	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007034:	e05d      	b.n	80070f2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	2b02      	cmp	r3, #2
 8007042:	d11c      	bne.n	800707e <HAL_SPI_TransmitReceive+0x264>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007048:	b29b      	uxth	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	d017      	beq.n	800707e <HAL_SPI_TransmitReceive+0x264>
 800704e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007050:	2b01      	cmp	r3, #1
 8007052:	d114      	bne.n	800707e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	330c      	adds	r3, #12
 800705e:	7812      	ldrb	r2, [r2, #0]
 8007060:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007066:	1c5a      	adds	r2, r3, #1
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007070:	b29b      	uxth	r3, r3
 8007072:	3b01      	subs	r3, #1
 8007074:	b29a      	uxth	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800707a:	2300      	movs	r3, #0
 800707c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	2b01      	cmp	r3, #1
 800708a:	d119      	bne.n	80070c0 <HAL_SPI_TransmitReceive+0x2a6>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007090:	b29b      	uxth	r3, r3
 8007092:	2b00      	cmp	r3, #0
 8007094:	d014      	beq.n	80070c0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68da      	ldr	r2, [r3, #12]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a0:	b2d2      	uxtb	r2, r2
 80070a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a8:	1c5a      	adds	r2, r3, #1
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	3b01      	subs	r3, #1
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070bc:	2301      	movs	r3, #1
 80070be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80070c0:	f7fc ff58 	bl	8003f74 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d803      	bhi.n	80070d8 <HAL_SPI_TransmitReceive+0x2be>
 80070d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d6:	d102      	bne.n	80070de <HAL_SPI_TransmitReceive+0x2c4>
 80070d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d109      	bne.n	80070f2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e038      	b.n	8007164 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d19c      	bne.n	8007036 <HAL_SPI_TransmitReceive+0x21c>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007100:	b29b      	uxth	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d197      	bne.n	8007036 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007106:	6a3a      	ldr	r2, [r7, #32]
 8007108:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f000 f92a 	bl	8007364 <SPI_EndRxTxTransaction>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d008      	beq.n	8007128 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2220      	movs	r2, #32
 800711a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e01d      	b.n	8007164 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10a      	bne.n	8007146 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007130:	2300      	movs	r3, #0
 8007132:	613b      	str	r3, [r7, #16]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	613b      	str	r3, [r7, #16]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	613b      	str	r3, [r7, #16]
 8007144:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e000      	b.n	8007164 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007162:	2300      	movs	r3, #0
  }
}
 8007164:	4618      	mov	r0, r3
 8007166:	3728      	adds	r7, #40	@ 0x28
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800717a:	b2db      	uxtb	r3, r3
}
 800717c:	4618      	mov	r0, r3
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b088      	sub	sp, #32
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	603b      	str	r3, [r7, #0]
 8007194:	4613      	mov	r3, r2
 8007196:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007198:	f7fc feec 	bl	8003f74 <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a0:	1a9b      	subs	r3, r3, r2
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	4413      	add	r3, r2
 80071a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071a8:	f7fc fee4 	bl	8003f74 <HAL_GetTick>
 80071ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071ae:	4b39      	ldr	r3, [pc, #228]	@ (8007294 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	015b      	lsls	r3, r3, #5
 80071b4:	0d1b      	lsrs	r3, r3, #20
 80071b6:	69fa      	ldr	r2, [r7, #28]
 80071b8:	fb02 f303 	mul.w	r3, r2, r3
 80071bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071be:	e054      	b.n	800726a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c6:	d050      	beq.n	800726a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071c8:	f7fc fed4 	bl	8003f74 <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	69fa      	ldr	r2, [r7, #28]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d902      	bls.n	80071de <SPI_WaitFlagStateUntilTimeout+0x56>
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d13d      	bne.n	800725a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80071ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071f6:	d111      	bne.n	800721c <SPI_WaitFlagStateUntilTimeout+0x94>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007200:	d004      	beq.n	800720c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800720a:	d107      	bne.n	800721c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800721a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007220:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007224:	d10f      	bne.n	8007246 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007244:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e017      	b.n	800728a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	3b01      	subs	r3, #1
 8007268:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689a      	ldr	r2, [r3, #8]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	4013      	ands	r3, r2
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	429a      	cmp	r2, r3
 8007278:	bf0c      	ite	eq
 800727a:	2301      	moveq	r3, #1
 800727c:	2300      	movne	r3, #0
 800727e:	b2db      	uxtb	r3, r3
 8007280:	461a      	mov	r2, r3
 8007282:	79fb      	ldrb	r3, [r7, #7]
 8007284:	429a      	cmp	r2, r3
 8007286:	d19b      	bne.n	80071c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3720      	adds	r7, #32
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	20000004 	.word	0x20000004

08007298 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af02      	add	r7, sp, #8
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072ac:	d111      	bne.n	80072d2 <SPI_EndRxTransaction+0x3a>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072b6:	d004      	beq.n	80072c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072c0:	d107      	bne.n	80072d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072d0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072da:	d12a      	bne.n	8007332 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072e4:	d012      	beq.n	800730c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	2200      	movs	r2, #0
 80072ee:	2180      	movs	r1, #128	@ 0x80
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f7ff ff49 	bl	8007188 <SPI_WaitFlagStateUntilTimeout>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d02d      	beq.n	8007358 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007300:	f043 0220 	orr.w	r2, r3, #32
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e026      	b.n	800735a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	2200      	movs	r2, #0
 8007314:	2101      	movs	r1, #1
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f7ff ff36 	bl	8007188 <SPI_WaitFlagStateUntilTimeout>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d01a      	beq.n	8007358 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007326:	f043 0220 	orr.w	r2, r3, #32
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e013      	b.n	800735a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2200      	movs	r2, #0
 800733a:	2101      	movs	r1, #1
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f7ff ff23 	bl	8007188 <SPI_WaitFlagStateUntilTimeout>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d007      	beq.n	8007358 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800734c:	f043 0220 	orr.w	r2, r3, #32
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e000      	b.n	800735a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
	...

08007364 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b088      	sub	sp, #32
 8007368:	af02      	add	r7, sp, #8
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	2201      	movs	r2, #1
 8007378:	2102      	movs	r1, #2
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f7ff ff04 	bl	8007188 <SPI_WaitFlagStateUntilTimeout>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d007      	beq.n	8007396 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800738a:	f043 0220 	orr.w	r2, r3, #32
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e032      	b.n	80073fc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007396:	4b1b      	ldr	r3, [pc, #108]	@ (8007404 <SPI_EndRxTxTransaction+0xa0>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a1b      	ldr	r2, [pc, #108]	@ (8007408 <SPI_EndRxTxTransaction+0xa4>)
 800739c:	fba2 2303 	umull	r2, r3, r2, r3
 80073a0:	0d5b      	lsrs	r3, r3, #21
 80073a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80073a6:	fb02 f303 	mul.w	r3, r2, r3
 80073aa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073b4:	d112      	bne.n	80073dc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2200      	movs	r2, #0
 80073be:	2180      	movs	r1, #128	@ 0x80
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f7ff fee1 	bl	8007188 <SPI_WaitFlagStateUntilTimeout>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d016      	beq.n	80073fa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073d0:	f043 0220 	orr.w	r2, r3, #32
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e00f      	b.n	80073fc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00a      	beq.n	80073f8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	3b01      	subs	r3, #1
 80073e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073f2:	2b80      	cmp	r3, #128	@ 0x80
 80073f4:	d0f2      	beq.n	80073dc <SPI_EndRxTxTransaction+0x78>
 80073f6:	e000      	b.n	80073fa <SPI_EndRxTxTransaction+0x96>
        break;
 80073f8:	bf00      	nop
  }

  return HAL_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3718      	adds	r7, #24
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	20000004 	.word	0x20000004
 8007408:	165e9f81 	.word	0x165e9f81

0800740c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d123      	bne.n	8007466 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007426:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	6851      	ldr	r1, [r2, #4]
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	6892      	ldr	r2, [r2, #8]
 8007432:	4311      	orrs	r1, r2
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	68d2      	ldr	r2, [r2, #12]
 8007438:	4311      	orrs	r1, r2
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	6912      	ldr	r2, [r2, #16]
 800743e:	4311      	orrs	r1, r2
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	6952      	ldr	r2, [r2, #20]
 8007444:	4311      	orrs	r1, r2
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	6992      	ldr	r2, [r2, #24]
 800744a:	4311      	orrs	r1, r2
 800744c:	683a      	ldr	r2, [r7, #0]
 800744e:	69d2      	ldr	r2, [r2, #28]
 8007450:	4311      	orrs	r1, r2
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	6a12      	ldr	r2, [r2, #32]
 8007456:	4311      	orrs	r1, r2
 8007458:	683a      	ldr	r2, [r7, #0]
 800745a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800745c:	430a      	orrs	r2, r1
 800745e:	431a      	orrs	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	e028      	b.n	80074b8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	69d9      	ldr	r1, [r3, #28]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	4319      	orrs	r1, r3
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800747c:	430b      	orrs	r3, r1
 800747e:	431a      	orrs	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800748c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007490:	683a      	ldr	r2, [r7, #0]
 8007492:	6851      	ldr	r1, [r2, #4]
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	6892      	ldr	r2, [r2, #8]
 8007498:	4311      	orrs	r1, r2
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	68d2      	ldr	r2, [r2, #12]
 800749e:	4311      	orrs	r1, r2
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	6912      	ldr	r2, [r2, #16]
 80074a4:	4311      	orrs	r1, r2
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	6952      	ldr	r2, [r2, #20]
 80074aa:	4311      	orrs	r1, r2
 80074ac:	683a      	ldr	r2, [r7, #0]
 80074ae:	6992      	ldr	r2, [r2, #24]
 80074b0:	430a      	orrs	r2, r1
 80074b2:	431a      	orrs	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b085      	sub	sp, #20
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	60f8      	str	r0, [r7, #12]
 80074ce:	60b9      	str	r1, [r7, #8]
 80074d0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d128      	bne.n	800752a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	1e59      	subs	r1, r3, #1
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	3b01      	subs	r3, #1
 80074ec:	011b      	lsls	r3, r3, #4
 80074ee:	4319      	orrs	r1, r3
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	3b01      	subs	r3, #1
 80074f6:	021b      	lsls	r3, r3, #8
 80074f8:	4319      	orrs	r1, r3
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	3b01      	subs	r3, #1
 8007500:	031b      	lsls	r3, r3, #12
 8007502:	4319      	orrs	r1, r3
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	3b01      	subs	r3, #1
 800750a:	041b      	lsls	r3, r3, #16
 800750c:	4319      	orrs	r1, r3
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	3b01      	subs	r3, #1
 8007514:	051b      	lsls	r3, r3, #20
 8007516:	4319      	orrs	r1, r3
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	3b01      	subs	r3, #1
 800751e:	061b      	lsls	r3, r3, #24
 8007520:	430b      	orrs	r3, r1
 8007522:	431a      	orrs	r2, r3
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	609a      	str	r2, [r3, #8]
 8007528:	e02f      	b.n	800758a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007532:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	68d2      	ldr	r2, [r2, #12]
 800753a:	3a01      	subs	r2, #1
 800753c:	0311      	lsls	r1, r2, #12
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	6952      	ldr	r2, [r2, #20]
 8007542:	3a01      	subs	r2, #1
 8007544:	0512      	lsls	r2, r2, #20
 8007546:	430a      	orrs	r2, r1
 8007548:	431a      	orrs	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	1e59      	subs	r1, r3, #1
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	3b01      	subs	r3, #1
 8007562:	011b      	lsls	r3, r3, #4
 8007564:	4319      	orrs	r1, r3
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	3b01      	subs	r3, #1
 800756c:	021b      	lsls	r3, r3, #8
 800756e:	4319      	orrs	r1, r3
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	3b01      	subs	r3, #1
 8007576:	041b      	lsls	r3, r3, #16
 8007578:	4319      	orrs	r1, r3
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	3b01      	subs	r3, #1
 8007580:	061b      	lsls	r3, r3, #24
 8007582:	430b      	orrs	r3, r1
 8007584:	431a      	orrs	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3714      	adds	r7, #20
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	0d9b      	lsrs	r3, r3, #22
 80075ae:	059b      	lsls	r3, r3, #22
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	6811      	ldr	r1, [r2, #0]
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	6852      	ldr	r2, [r2, #4]
 80075b8:	4311      	orrs	r1, r2
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	6892      	ldr	r2, [r2, #8]
 80075be:	3a01      	subs	r2, #1
 80075c0:	0152      	lsls	r2, r2, #5
 80075c2:	4311      	orrs	r1, r2
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	68d2      	ldr	r2, [r2, #12]
 80075c8:	0252      	lsls	r2, r2, #9
 80075ca:	430a      	orrs	r2, r1
 80075cc:	431a      	orrs	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80075d2:	f7fc fccf 	bl	8003f74 <HAL_GetTick>
 80075d6:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80075d8:	e010      	b.n	80075fc <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e0:	d00c      	beq.n	80075fc <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d007      	beq.n	80075f8 <FMC_SDRAM_SendCommand+0x60>
 80075e8:	f7fc fcc4 	bl	8003f74 <HAL_GetTick>
 80075ec:	4602      	mov	r2, r0
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d201      	bcs.n	80075fc <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e006      	b.n	800760a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	f003 0320 	and.w	r3, r3, #32
 8007604:	2b20      	cmp	r3, #32
 8007606:	d0e8      	beq.n	80075da <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007612:	b480      	push	{r7}
 8007614:	b083      	sub	sp, #12
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	695b      	ldr	r3, [r3, #20]
 8007620:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8007624:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	0052      	lsls	r2, r2, #1
 800762c:	431a      	orrs	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <rand>:
 8007640:	4b16      	ldr	r3, [pc, #88]	@ (800769c <rand+0x5c>)
 8007642:	b510      	push	{r4, lr}
 8007644:	681c      	ldr	r4, [r3, #0]
 8007646:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007648:	b9b3      	cbnz	r3, 8007678 <rand+0x38>
 800764a:	2018      	movs	r0, #24
 800764c:	f001 ff12 	bl	8009474 <malloc>
 8007650:	4602      	mov	r2, r0
 8007652:	6320      	str	r0, [r4, #48]	@ 0x30
 8007654:	b920      	cbnz	r0, 8007660 <rand+0x20>
 8007656:	4b12      	ldr	r3, [pc, #72]	@ (80076a0 <rand+0x60>)
 8007658:	4812      	ldr	r0, [pc, #72]	@ (80076a4 <rand+0x64>)
 800765a:	2152      	movs	r1, #82	@ 0x52
 800765c:	f001 f854 	bl	8008708 <__assert_func>
 8007660:	4911      	ldr	r1, [pc, #68]	@ (80076a8 <rand+0x68>)
 8007662:	4b12      	ldr	r3, [pc, #72]	@ (80076ac <rand+0x6c>)
 8007664:	e9c0 1300 	strd	r1, r3, [r0]
 8007668:	4b11      	ldr	r3, [pc, #68]	@ (80076b0 <rand+0x70>)
 800766a:	6083      	str	r3, [r0, #8]
 800766c:	230b      	movs	r3, #11
 800766e:	8183      	strh	r3, [r0, #12]
 8007670:	2100      	movs	r1, #0
 8007672:	2001      	movs	r0, #1
 8007674:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007678:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800767a:	480e      	ldr	r0, [pc, #56]	@ (80076b4 <rand+0x74>)
 800767c:	690b      	ldr	r3, [r1, #16]
 800767e:	694c      	ldr	r4, [r1, #20]
 8007680:	4a0d      	ldr	r2, [pc, #52]	@ (80076b8 <rand+0x78>)
 8007682:	4358      	muls	r0, r3
 8007684:	fb02 0004 	mla	r0, r2, r4, r0
 8007688:	fba3 3202 	umull	r3, r2, r3, r2
 800768c:	3301      	adds	r3, #1
 800768e:	eb40 0002 	adc.w	r0, r0, r2
 8007692:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8007696:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800769a:	bd10      	pop	{r4, pc}
 800769c:	20000064 	.word	0x20000064
 80076a0:	0800d900 	.word	0x0800d900
 80076a4:	0800d917 	.word	0x0800d917
 80076a8:	abcd330e 	.word	0xabcd330e
 80076ac:	e66d1234 	.word	0xe66d1234
 80076b0:	0005deec 	.word	0x0005deec
 80076b4:	5851f42d 	.word	0x5851f42d
 80076b8:	4c957f2d 	.word	0x4c957f2d

080076bc <__cvt>:
 80076bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076c0:	ec57 6b10 	vmov	r6, r7, d0
 80076c4:	2f00      	cmp	r7, #0
 80076c6:	460c      	mov	r4, r1
 80076c8:	4619      	mov	r1, r3
 80076ca:	463b      	mov	r3, r7
 80076cc:	bfbb      	ittet	lt
 80076ce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80076d2:	461f      	movlt	r7, r3
 80076d4:	2300      	movge	r3, #0
 80076d6:	232d      	movlt	r3, #45	@ 0x2d
 80076d8:	700b      	strb	r3, [r1, #0]
 80076da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076dc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80076e0:	4691      	mov	r9, r2
 80076e2:	f023 0820 	bic.w	r8, r3, #32
 80076e6:	bfbc      	itt	lt
 80076e8:	4632      	movlt	r2, r6
 80076ea:	4616      	movlt	r6, r2
 80076ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80076f0:	d005      	beq.n	80076fe <__cvt+0x42>
 80076f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80076f6:	d100      	bne.n	80076fa <__cvt+0x3e>
 80076f8:	3401      	adds	r4, #1
 80076fa:	2102      	movs	r1, #2
 80076fc:	e000      	b.n	8007700 <__cvt+0x44>
 80076fe:	2103      	movs	r1, #3
 8007700:	ab03      	add	r3, sp, #12
 8007702:	9301      	str	r3, [sp, #4]
 8007704:	ab02      	add	r3, sp, #8
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	ec47 6b10 	vmov	d0, r6, r7
 800770c:	4653      	mov	r3, sl
 800770e:	4622      	mov	r2, r4
 8007710:	f001 f8a2 	bl	8008858 <_dtoa_r>
 8007714:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007718:	4605      	mov	r5, r0
 800771a:	d119      	bne.n	8007750 <__cvt+0x94>
 800771c:	f019 0f01 	tst.w	r9, #1
 8007720:	d00e      	beq.n	8007740 <__cvt+0x84>
 8007722:	eb00 0904 	add.w	r9, r0, r4
 8007726:	2200      	movs	r2, #0
 8007728:	2300      	movs	r3, #0
 800772a:	4630      	mov	r0, r6
 800772c:	4639      	mov	r1, r7
 800772e:	f7f9 f9db 	bl	8000ae8 <__aeabi_dcmpeq>
 8007732:	b108      	cbz	r0, 8007738 <__cvt+0x7c>
 8007734:	f8cd 900c 	str.w	r9, [sp, #12]
 8007738:	2230      	movs	r2, #48	@ 0x30
 800773a:	9b03      	ldr	r3, [sp, #12]
 800773c:	454b      	cmp	r3, r9
 800773e:	d31e      	bcc.n	800777e <__cvt+0xc2>
 8007740:	9b03      	ldr	r3, [sp, #12]
 8007742:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007744:	1b5b      	subs	r3, r3, r5
 8007746:	4628      	mov	r0, r5
 8007748:	6013      	str	r3, [r2, #0]
 800774a:	b004      	add	sp, #16
 800774c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007750:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007754:	eb00 0904 	add.w	r9, r0, r4
 8007758:	d1e5      	bne.n	8007726 <__cvt+0x6a>
 800775a:	7803      	ldrb	r3, [r0, #0]
 800775c:	2b30      	cmp	r3, #48	@ 0x30
 800775e:	d10a      	bne.n	8007776 <__cvt+0xba>
 8007760:	2200      	movs	r2, #0
 8007762:	2300      	movs	r3, #0
 8007764:	4630      	mov	r0, r6
 8007766:	4639      	mov	r1, r7
 8007768:	f7f9 f9be 	bl	8000ae8 <__aeabi_dcmpeq>
 800776c:	b918      	cbnz	r0, 8007776 <__cvt+0xba>
 800776e:	f1c4 0401 	rsb	r4, r4, #1
 8007772:	f8ca 4000 	str.w	r4, [sl]
 8007776:	f8da 3000 	ldr.w	r3, [sl]
 800777a:	4499      	add	r9, r3
 800777c:	e7d3      	b.n	8007726 <__cvt+0x6a>
 800777e:	1c59      	adds	r1, r3, #1
 8007780:	9103      	str	r1, [sp, #12]
 8007782:	701a      	strb	r2, [r3, #0]
 8007784:	e7d9      	b.n	800773a <__cvt+0x7e>

08007786 <__exponent>:
 8007786:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007788:	2900      	cmp	r1, #0
 800778a:	bfba      	itte	lt
 800778c:	4249      	neglt	r1, r1
 800778e:	232d      	movlt	r3, #45	@ 0x2d
 8007790:	232b      	movge	r3, #43	@ 0x2b
 8007792:	2909      	cmp	r1, #9
 8007794:	7002      	strb	r2, [r0, #0]
 8007796:	7043      	strb	r3, [r0, #1]
 8007798:	dd29      	ble.n	80077ee <__exponent+0x68>
 800779a:	f10d 0307 	add.w	r3, sp, #7
 800779e:	461d      	mov	r5, r3
 80077a0:	270a      	movs	r7, #10
 80077a2:	461a      	mov	r2, r3
 80077a4:	fbb1 f6f7 	udiv	r6, r1, r7
 80077a8:	fb07 1416 	mls	r4, r7, r6, r1
 80077ac:	3430      	adds	r4, #48	@ 0x30
 80077ae:	f802 4c01 	strb.w	r4, [r2, #-1]
 80077b2:	460c      	mov	r4, r1
 80077b4:	2c63      	cmp	r4, #99	@ 0x63
 80077b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80077ba:	4631      	mov	r1, r6
 80077bc:	dcf1      	bgt.n	80077a2 <__exponent+0x1c>
 80077be:	3130      	adds	r1, #48	@ 0x30
 80077c0:	1e94      	subs	r4, r2, #2
 80077c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80077c6:	1c41      	adds	r1, r0, #1
 80077c8:	4623      	mov	r3, r4
 80077ca:	42ab      	cmp	r3, r5
 80077cc:	d30a      	bcc.n	80077e4 <__exponent+0x5e>
 80077ce:	f10d 0309 	add.w	r3, sp, #9
 80077d2:	1a9b      	subs	r3, r3, r2
 80077d4:	42ac      	cmp	r4, r5
 80077d6:	bf88      	it	hi
 80077d8:	2300      	movhi	r3, #0
 80077da:	3302      	adds	r3, #2
 80077dc:	4403      	add	r3, r0
 80077de:	1a18      	subs	r0, r3, r0
 80077e0:	b003      	add	sp, #12
 80077e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077e4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80077e8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80077ec:	e7ed      	b.n	80077ca <__exponent+0x44>
 80077ee:	2330      	movs	r3, #48	@ 0x30
 80077f0:	3130      	adds	r1, #48	@ 0x30
 80077f2:	7083      	strb	r3, [r0, #2]
 80077f4:	70c1      	strb	r1, [r0, #3]
 80077f6:	1d03      	adds	r3, r0, #4
 80077f8:	e7f1      	b.n	80077de <__exponent+0x58>
	...

080077fc <_printf_float>:
 80077fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007800:	b08d      	sub	sp, #52	@ 0x34
 8007802:	460c      	mov	r4, r1
 8007804:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007808:	4616      	mov	r6, r2
 800780a:	461f      	mov	r7, r3
 800780c:	4605      	mov	r5, r0
 800780e:	f000 feef 	bl	80085f0 <_localeconv_r>
 8007812:	6803      	ldr	r3, [r0, #0]
 8007814:	9304      	str	r3, [sp, #16]
 8007816:	4618      	mov	r0, r3
 8007818:	f7f8 fd3a 	bl	8000290 <strlen>
 800781c:	2300      	movs	r3, #0
 800781e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007820:	f8d8 3000 	ldr.w	r3, [r8]
 8007824:	9005      	str	r0, [sp, #20]
 8007826:	3307      	adds	r3, #7
 8007828:	f023 0307 	bic.w	r3, r3, #7
 800782c:	f103 0208 	add.w	r2, r3, #8
 8007830:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007834:	f8d4 b000 	ldr.w	fp, [r4]
 8007838:	f8c8 2000 	str.w	r2, [r8]
 800783c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007840:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007844:	9307      	str	r3, [sp, #28]
 8007846:	f8cd 8018 	str.w	r8, [sp, #24]
 800784a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800784e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007852:	4b9c      	ldr	r3, [pc, #624]	@ (8007ac4 <_printf_float+0x2c8>)
 8007854:	f04f 32ff 	mov.w	r2, #4294967295
 8007858:	f7f9 f978 	bl	8000b4c <__aeabi_dcmpun>
 800785c:	bb70      	cbnz	r0, 80078bc <_printf_float+0xc0>
 800785e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007862:	4b98      	ldr	r3, [pc, #608]	@ (8007ac4 <_printf_float+0x2c8>)
 8007864:	f04f 32ff 	mov.w	r2, #4294967295
 8007868:	f7f9 f952 	bl	8000b10 <__aeabi_dcmple>
 800786c:	bb30      	cbnz	r0, 80078bc <_printf_float+0xc0>
 800786e:	2200      	movs	r2, #0
 8007870:	2300      	movs	r3, #0
 8007872:	4640      	mov	r0, r8
 8007874:	4649      	mov	r1, r9
 8007876:	f7f9 f941 	bl	8000afc <__aeabi_dcmplt>
 800787a:	b110      	cbz	r0, 8007882 <_printf_float+0x86>
 800787c:	232d      	movs	r3, #45	@ 0x2d
 800787e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007882:	4a91      	ldr	r2, [pc, #580]	@ (8007ac8 <_printf_float+0x2cc>)
 8007884:	4b91      	ldr	r3, [pc, #580]	@ (8007acc <_printf_float+0x2d0>)
 8007886:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800788a:	bf94      	ite	ls
 800788c:	4690      	movls	r8, r2
 800788e:	4698      	movhi	r8, r3
 8007890:	2303      	movs	r3, #3
 8007892:	6123      	str	r3, [r4, #16]
 8007894:	f02b 0304 	bic.w	r3, fp, #4
 8007898:	6023      	str	r3, [r4, #0]
 800789a:	f04f 0900 	mov.w	r9, #0
 800789e:	9700      	str	r7, [sp, #0]
 80078a0:	4633      	mov	r3, r6
 80078a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80078a4:	4621      	mov	r1, r4
 80078a6:	4628      	mov	r0, r5
 80078a8:	f000 f9d2 	bl	8007c50 <_printf_common>
 80078ac:	3001      	adds	r0, #1
 80078ae:	f040 808d 	bne.w	80079cc <_printf_float+0x1d0>
 80078b2:	f04f 30ff 	mov.w	r0, #4294967295
 80078b6:	b00d      	add	sp, #52	@ 0x34
 80078b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078bc:	4642      	mov	r2, r8
 80078be:	464b      	mov	r3, r9
 80078c0:	4640      	mov	r0, r8
 80078c2:	4649      	mov	r1, r9
 80078c4:	f7f9 f942 	bl	8000b4c <__aeabi_dcmpun>
 80078c8:	b140      	cbz	r0, 80078dc <_printf_float+0xe0>
 80078ca:	464b      	mov	r3, r9
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	bfbc      	itt	lt
 80078d0:	232d      	movlt	r3, #45	@ 0x2d
 80078d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80078d6:	4a7e      	ldr	r2, [pc, #504]	@ (8007ad0 <_printf_float+0x2d4>)
 80078d8:	4b7e      	ldr	r3, [pc, #504]	@ (8007ad4 <_printf_float+0x2d8>)
 80078da:	e7d4      	b.n	8007886 <_printf_float+0x8a>
 80078dc:	6863      	ldr	r3, [r4, #4]
 80078de:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80078e2:	9206      	str	r2, [sp, #24]
 80078e4:	1c5a      	adds	r2, r3, #1
 80078e6:	d13b      	bne.n	8007960 <_printf_float+0x164>
 80078e8:	2306      	movs	r3, #6
 80078ea:	6063      	str	r3, [r4, #4]
 80078ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80078f0:	2300      	movs	r3, #0
 80078f2:	6022      	str	r2, [r4, #0]
 80078f4:	9303      	str	r3, [sp, #12]
 80078f6:	ab0a      	add	r3, sp, #40	@ 0x28
 80078f8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80078fc:	ab09      	add	r3, sp, #36	@ 0x24
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	6861      	ldr	r1, [r4, #4]
 8007902:	ec49 8b10 	vmov	d0, r8, r9
 8007906:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800790a:	4628      	mov	r0, r5
 800790c:	f7ff fed6 	bl	80076bc <__cvt>
 8007910:	9b06      	ldr	r3, [sp, #24]
 8007912:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007914:	2b47      	cmp	r3, #71	@ 0x47
 8007916:	4680      	mov	r8, r0
 8007918:	d129      	bne.n	800796e <_printf_float+0x172>
 800791a:	1cc8      	adds	r0, r1, #3
 800791c:	db02      	blt.n	8007924 <_printf_float+0x128>
 800791e:	6863      	ldr	r3, [r4, #4]
 8007920:	4299      	cmp	r1, r3
 8007922:	dd41      	ble.n	80079a8 <_printf_float+0x1ac>
 8007924:	f1aa 0a02 	sub.w	sl, sl, #2
 8007928:	fa5f fa8a 	uxtb.w	sl, sl
 800792c:	3901      	subs	r1, #1
 800792e:	4652      	mov	r2, sl
 8007930:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007934:	9109      	str	r1, [sp, #36]	@ 0x24
 8007936:	f7ff ff26 	bl	8007786 <__exponent>
 800793a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800793c:	1813      	adds	r3, r2, r0
 800793e:	2a01      	cmp	r2, #1
 8007940:	4681      	mov	r9, r0
 8007942:	6123      	str	r3, [r4, #16]
 8007944:	dc02      	bgt.n	800794c <_printf_float+0x150>
 8007946:	6822      	ldr	r2, [r4, #0]
 8007948:	07d2      	lsls	r2, r2, #31
 800794a:	d501      	bpl.n	8007950 <_printf_float+0x154>
 800794c:	3301      	adds	r3, #1
 800794e:	6123      	str	r3, [r4, #16]
 8007950:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007954:	2b00      	cmp	r3, #0
 8007956:	d0a2      	beq.n	800789e <_printf_float+0xa2>
 8007958:	232d      	movs	r3, #45	@ 0x2d
 800795a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800795e:	e79e      	b.n	800789e <_printf_float+0xa2>
 8007960:	9a06      	ldr	r2, [sp, #24]
 8007962:	2a47      	cmp	r2, #71	@ 0x47
 8007964:	d1c2      	bne.n	80078ec <_printf_float+0xf0>
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1c0      	bne.n	80078ec <_printf_float+0xf0>
 800796a:	2301      	movs	r3, #1
 800796c:	e7bd      	b.n	80078ea <_printf_float+0xee>
 800796e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007972:	d9db      	bls.n	800792c <_printf_float+0x130>
 8007974:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007978:	d118      	bne.n	80079ac <_printf_float+0x1b0>
 800797a:	2900      	cmp	r1, #0
 800797c:	6863      	ldr	r3, [r4, #4]
 800797e:	dd0b      	ble.n	8007998 <_printf_float+0x19c>
 8007980:	6121      	str	r1, [r4, #16]
 8007982:	b913      	cbnz	r3, 800798a <_printf_float+0x18e>
 8007984:	6822      	ldr	r2, [r4, #0]
 8007986:	07d0      	lsls	r0, r2, #31
 8007988:	d502      	bpl.n	8007990 <_printf_float+0x194>
 800798a:	3301      	adds	r3, #1
 800798c:	440b      	add	r3, r1
 800798e:	6123      	str	r3, [r4, #16]
 8007990:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007992:	f04f 0900 	mov.w	r9, #0
 8007996:	e7db      	b.n	8007950 <_printf_float+0x154>
 8007998:	b913      	cbnz	r3, 80079a0 <_printf_float+0x1a4>
 800799a:	6822      	ldr	r2, [r4, #0]
 800799c:	07d2      	lsls	r2, r2, #31
 800799e:	d501      	bpl.n	80079a4 <_printf_float+0x1a8>
 80079a0:	3302      	adds	r3, #2
 80079a2:	e7f4      	b.n	800798e <_printf_float+0x192>
 80079a4:	2301      	movs	r3, #1
 80079a6:	e7f2      	b.n	800798e <_printf_float+0x192>
 80079a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80079ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079ae:	4299      	cmp	r1, r3
 80079b0:	db05      	blt.n	80079be <_printf_float+0x1c2>
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	6121      	str	r1, [r4, #16]
 80079b6:	07d8      	lsls	r0, r3, #31
 80079b8:	d5ea      	bpl.n	8007990 <_printf_float+0x194>
 80079ba:	1c4b      	adds	r3, r1, #1
 80079bc:	e7e7      	b.n	800798e <_printf_float+0x192>
 80079be:	2900      	cmp	r1, #0
 80079c0:	bfd4      	ite	le
 80079c2:	f1c1 0202 	rsble	r2, r1, #2
 80079c6:	2201      	movgt	r2, #1
 80079c8:	4413      	add	r3, r2
 80079ca:	e7e0      	b.n	800798e <_printf_float+0x192>
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	055a      	lsls	r2, r3, #21
 80079d0:	d407      	bmi.n	80079e2 <_printf_float+0x1e6>
 80079d2:	6923      	ldr	r3, [r4, #16]
 80079d4:	4642      	mov	r2, r8
 80079d6:	4631      	mov	r1, r6
 80079d8:	4628      	mov	r0, r5
 80079da:	47b8      	blx	r7
 80079dc:	3001      	adds	r0, #1
 80079de:	d12b      	bne.n	8007a38 <_printf_float+0x23c>
 80079e0:	e767      	b.n	80078b2 <_printf_float+0xb6>
 80079e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80079e6:	f240 80dd 	bls.w	8007ba4 <_printf_float+0x3a8>
 80079ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80079ee:	2200      	movs	r2, #0
 80079f0:	2300      	movs	r3, #0
 80079f2:	f7f9 f879 	bl	8000ae8 <__aeabi_dcmpeq>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d033      	beq.n	8007a62 <_printf_float+0x266>
 80079fa:	4a37      	ldr	r2, [pc, #220]	@ (8007ad8 <_printf_float+0x2dc>)
 80079fc:	2301      	movs	r3, #1
 80079fe:	4631      	mov	r1, r6
 8007a00:	4628      	mov	r0, r5
 8007a02:	47b8      	blx	r7
 8007a04:	3001      	adds	r0, #1
 8007a06:	f43f af54 	beq.w	80078b2 <_printf_float+0xb6>
 8007a0a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007a0e:	4543      	cmp	r3, r8
 8007a10:	db02      	blt.n	8007a18 <_printf_float+0x21c>
 8007a12:	6823      	ldr	r3, [r4, #0]
 8007a14:	07d8      	lsls	r0, r3, #31
 8007a16:	d50f      	bpl.n	8007a38 <_printf_float+0x23c>
 8007a18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a1c:	4631      	mov	r1, r6
 8007a1e:	4628      	mov	r0, r5
 8007a20:	47b8      	blx	r7
 8007a22:	3001      	adds	r0, #1
 8007a24:	f43f af45 	beq.w	80078b2 <_printf_float+0xb6>
 8007a28:	f04f 0900 	mov.w	r9, #0
 8007a2c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a30:	f104 0a1a 	add.w	sl, r4, #26
 8007a34:	45c8      	cmp	r8, r9
 8007a36:	dc09      	bgt.n	8007a4c <_printf_float+0x250>
 8007a38:	6823      	ldr	r3, [r4, #0]
 8007a3a:	079b      	lsls	r3, r3, #30
 8007a3c:	f100 8103 	bmi.w	8007c46 <_printf_float+0x44a>
 8007a40:	68e0      	ldr	r0, [r4, #12]
 8007a42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a44:	4298      	cmp	r0, r3
 8007a46:	bfb8      	it	lt
 8007a48:	4618      	movlt	r0, r3
 8007a4a:	e734      	b.n	80078b6 <_printf_float+0xba>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	4652      	mov	r2, sl
 8007a50:	4631      	mov	r1, r6
 8007a52:	4628      	mov	r0, r5
 8007a54:	47b8      	blx	r7
 8007a56:	3001      	adds	r0, #1
 8007a58:	f43f af2b 	beq.w	80078b2 <_printf_float+0xb6>
 8007a5c:	f109 0901 	add.w	r9, r9, #1
 8007a60:	e7e8      	b.n	8007a34 <_printf_float+0x238>
 8007a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	dc39      	bgt.n	8007adc <_printf_float+0x2e0>
 8007a68:	4a1b      	ldr	r2, [pc, #108]	@ (8007ad8 <_printf_float+0x2dc>)
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	4631      	mov	r1, r6
 8007a6e:	4628      	mov	r0, r5
 8007a70:	47b8      	blx	r7
 8007a72:	3001      	adds	r0, #1
 8007a74:	f43f af1d 	beq.w	80078b2 <_printf_float+0xb6>
 8007a78:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007a7c:	ea59 0303 	orrs.w	r3, r9, r3
 8007a80:	d102      	bne.n	8007a88 <_printf_float+0x28c>
 8007a82:	6823      	ldr	r3, [r4, #0]
 8007a84:	07d9      	lsls	r1, r3, #31
 8007a86:	d5d7      	bpl.n	8007a38 <_printf_float+0x23c>
 8007a88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a8c:	4631      	mov	r1, r6
 8007a8e:	4628      	mov	r0, r5
 8007a90:	47b8      	blx	r7
 8007a92:	3001      	adds	r0, #1
 8007a94:	f43f af0d 	beq.w	80078b2 <_printf_float+0xb6>
 8007a98:	f04f 0a00 	mov.w	sl, #0
 8007a9c:	f104 0b1a 	add.w	fp, r4, #26
 8007aa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aa2:	425b      	negs	r3, r3
 8007aa4:	4553      	cmp	r3, sl
 8007aa6:	dc01      	bgt.n	8007aac <_printf_float+0x2b0>
 8007aa8:	464b      	mov	r3, r9
 8007aaa:	e793      	b.n	80079d4 <_printf_float+0x1d8>
 8007aac:	2301      	movs	r3, #1
 8007aae:	465a      	mov	r2, fp
 8007ab0:	4631      	mov	r1, r6
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	47b8      	blx	r7
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	f43f aefb 	beq.w	80078b2 <_printf_float+0xb6>
 8007abc:	f10a 0a01 	add.w	sl, sl, #1
 8007ac0:	e7ee      	b.n	8007aa0 <_printf_float+0x2a4>
 8007ac2:	bf00      	nop
 8007ac4:	7fefffff 	.word	0x7fefffff
 8007ac8:	0800d96f 	.word	0x0800d96f
 8007acc:	0800d973 	.word	0x0800d973
 8007ad0:	0800d977 	.word	0x0800d977
 8007ad4:	0800d97b 	.word	0x0800d97b
 8007ad8:	0800d97f 	.word	0x0800d97f
 8007adc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007ade:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007ae2:	4553      	cmp	r3, sl
 8007ae4:	bfa8      	it	ge
 8007ae6:	4653      	movge	r3, sl
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	4699      	mov	r9, r3
 8007aec:	dc36      	bgt.n	8007b5c <_printf_float+0x360>
 8007aee:	f04f 0b00 	mov.w	fp, #0
 8007af2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007af6:	f104 021a 	add.w	r2, r4, #26
 8007afa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007afc:	9306      	str	r3, [sp, #24]
 8007afe:	eba3 0309 	sub.w	r3, r3, r9
 8007b02:	455b      	cmp	r3, fp
 8007b04:	dc31      	bgt.n	8007b6a <_printf_float+0x36e>
 8007b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b08:	459a      	cmp	sl, r3
 8007b0a:	dc3a      	bgt.n	8007b82 <_printf_float+0x386>
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	07da      	lsls	r2, r3, #31
 8007b10:	d437      	bmi.n	8007b82 <_printf_float+0x386>
 8007b12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b14:	ebaa 0903 	sub.w	r9, sl, r3
 8007b18:	9b06      	ldr	r3, [sp, #24]
 8007b1a:	ebaa 0303 	sub.w	r3, sl, r3
 8007b1e:	4599      	cmp	r9, r3
 8007b20:	bfa8      	it	ge
 8007b22:	4699      	movge	r9, r3
 8007b24:	f1b9 0f00 	cmp.w	r9, #0
 8007b28:	dc33      	bgt.n	8007b92 <_printf_float+0x396>
 8007b2a:	f04f 0800 	mov.w	r8, #0
 8007b2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b32:	f104 0b1a 	add.w	fp, r4, #26
 8007b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b38:	ebaa 0303 	sub.w	r3, sl, r3
 8007b3c:	eba3 0309 	sub.w	r3, r3, r9
 8007b40:	4543      	cmp	r3, r8
 8007b42:	f77f af79 	ble.w	8007a38 <_printf_float+0x23c>
 8007b46:	2301      	movs	r3, #1
 8007b48:	465a      	mov	r2, fp
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	47b8      	blx	r7
 8007b50:	3001      	adds	r0, #1
 8007b52:	f43f aeae 	beq.w	80078b2 <_printf_float+0xb6>
 8007b56:	f108 0801 	add.w	r8, r8, #1
 8007b5a:	e7ec      	b.n	8007b36 <_printf_float+0x33a>
 8007b5c:	4642      	mov	r2, r8
 8007b5e:	4631      	mov	r1, r6
 8007b60:	4628      	mov	r0, r5
 8007b62:	47b8      	blx	r7
 8007b64:	3001      	adds	r0, #1
 8007b66:	d1c2      	bne.n	8007aee <_printf_float+0x2f2>
 8007b68:	e6a3      	b.n	80078b2 <_printf_float+0xb6>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	4631      	mov	r1, r6
 8007b6e:	4628      	mov	r0, r5
 8007b70:	9206      	str	r2, [sp, #24]
 8007b72:	47b8      	blx	r7
 8007b74:	3001      	adds	r0, #1
 8007b76:	f43f ae9c 	beq.w	80078b2 <_printf_float+0xb6>
 8007b7a:	9a06      	ldr	r2, [sp, #24]
 8007b7c:	f10b 0b01 	add.w	fp, fp, #1
 8007b80:	e7bb      	b.n	8007afa <_printf_float+0x2fe>
 8007b82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b86:	4631      	mov	r1, r6
 8007b88:	4628      	mov	r0, r5
 8007b8a:	47b8      	blx	r7
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	d1c0      	bne.n	8007b12 <_printf_float+0x316>
 8007b90:	e68f      	b.n	80078b2 <_printf_float+0xb6>
 8007b92:	9a06      	ldr	r2, [sp, #24]
 8007b94:	464b      	mov	r3, r9
 8007b96:	4442      	add	r2, r8
 8007b98:	4631      	mov	r1, r6
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	47b8      	blx	r7
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	d1c3      	bne.n	8007b2a <_printf_float+0x32e>
 8007ba2:	e686      	b.n	80078b2 <_printf_float+0xb6>
 8007ba4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007ba8:	f1ba 0f01 	cmp.w	sl, #1
 8007bac:	dc01      	bgt.n	8007bb2 <_printf_float+0x3b6>
 8007bae:	07db      	lsls	r3, r3, #31
 8007bb0:	d536      	bpl.n	8007c20 <_printf_float+0x424>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	4642      	mov	r2, r8
 8007bb6:	4631      	mov	r1, r6
 8007bb8:	4628      	mov	r0, r5
 8007bba:	47b8      	blx	r7
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	f43f ae78 	beq.w	80078b2 <_printf_float+0xb6>
 8007bc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bc6:	4631      	mov	r1, r6
 8007bc8:	4628      	mov	r0, r5
 8007bca:	47b8      	blx	r7
 8007bcc:	3001      	adds	r0, #1
 8007bce:	f43f ae70 	beq.w	80078b2 <_printf_float+0xb6>
 8007bd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bde:	f7f8 ff83 	bl	8000ae8 <__aeabi_dcmpeq>
 8007be2:	b9c0      	cbnz	r0, 8007c16 <_printf_float+0x41a>
 8007be4:	4653      	mov	r3, sl
 8007be6:	f108 0201 	add.w	r2, r8, #1
 8007bea:	4631      	mov	r1, r6
 8007bec:	4628      	mov	r0, r5
 8007bee:	47b8      	blx	r7
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	d10c      	bne.n	8007c0e <_printf_float+0x412>
 8007bf4:	e65d      	b.n	80078b2 <_printf_float+0xb6>
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	465a      	mov	r2, fp
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	47b8      	blx	r7
 8007c00:	3001      	adds	r0, #1
 8007c02:	f43f ae56 	beq.w	80078b2 <_printf_float+0xb6>
 8007c06:	f108 0801 	add.w	r8, r8, #1
 8007c0a:	45d0      	cmp	r8, sl
 8007c0c:	dbf3      	blt.n	8007bf6 <_printf_float+0x3fa>
 8007c0e:	464b      	mov	r3, r9
 8007c10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007c14:	e6df      	b.n	80079d6 <_printf_float+0x1da>
 8007c16:	f04f 0800 	mov.w	r8, #0
 8007c1a:	f104 0b1a 	add.w	fp, r4, #26
 8007c1e:	e7f4      	b.n	8007c0a <_printf_float+0x40e>
 8007c20:	2301      	movs	r3, #1
 8007c22:	4642      	mov	r2, r8
 8007c24:	e7e1      	b.n	8007bea <_printf_float+0x3ee>
 8007c26:	2301      	movs	r3, #1
 8007c28:	464a      	mov	r2, r9
 8007c2a:	4631      	mov	r1, r6
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	47b8      	blx	r7
 8007c30:	3001      	adds	r0, #1
 8007c32:	f43f ae3e 	beq.w	80078b2 <_printf_float+0xb6>
 8007c36:	f108 0801 	add.w	r8, r8, #1
 8007c3a:	68e3      	ldr	r3, [r4, #12]
 8007c3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c3e:	1a5b      	subs	r3, r3, r1
 8007c40:	4543      	cmp	r3, r8
 8007c42:	dcf0      	bgt.n	8007c26 <_printf_float+0x42a>
 8007c44:	e6fc      	b.n	8007a40 <_printf_float+0x244>
 8007c46:	f04f 0800 	mov.w	r8, #0
 8007c4a:	f104 0919 	add.w	r9, r4, #25
 8007c4e:	e7f4      	b.n	8007c3a <_printf_float+0x43e>

08007c50 <_printf_common>:
 8007c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c54:	4616      	mov	r6, r2
 8007c56:	4698      	mov	r8, r3
 8007c58:	688a      	ldr	r2, [r1, #8]
 8007c5a:	690b      	ldr	r3, [r1, #16]
 8007c5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c60:	4293      	cmp	r3, r2
 8007c62:	bfb8      	it	lt
 8007c64:	4613      	movlt	r3, r2
 8007c66:	6033      	str	r3, [r6, #0]
 8007c68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c6c:	4607      	mov	r7, r0
 8007c6e:	460c      	mov	r4, r1
 8007c70:	b10a      	cbz	r2, 8007c76 <_printf_common+0x26>
 8007c72:	3301      	adds	r3, #1
 8007c74:	6033      	str	r3, [r6, #0]
 8007c76:	6823      	ldr	r3, [r4, #0]
 8007c78:	0699      	lsls	r1, r3, #26
 8007c7a:	bf42      	ittt	mi
 8007c7c:	6833      	ldrmi	r3, [r6, #0]
 8007c7e:	3302      	addmi	r3, #2
 8007c80:	6033      	strmi	r3, [r6, #0]
 8007c82:	6825      	ldr	r5, [r4, #0]
 8007c84:	f015 0506 	ands.w	r5, r5, #6
 8007c88:	d106      	bne.n	8007c98 <_printf_common+0x48>
 8007c8a:	f104 0a19 	add.w	sl, r4, #25
 8007c8e:	68e3      	ldr	r3, [r4, #12]
 8007c90:	6832      	ldr	r2, [r6, #0]
 8007c92:	1a9b      	subs	r3, r3, r2
 8007c94:	42ab      	cmp	r3, r5
 8007c96:	dc26      	bgt.n	8007ce6 <_printf_common+0x96>
 8007c98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c9c:	6822      	ldr	r2, [r4, #0]
 8007c9e:	3b00      	subs	r3, #0
 8007ca0:	bf18      	it	ne
 8007ca2:	2301      	movne	r3, #1
 8007ca4:	0692      	lsls	r2, r2, #26
 8007ca6:	d42b      	bmi.n	8007d00 <_printf_common+0xb0>
 8007ca8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007cac:	4641      	mov	r1, r8
 8007cae:	4638      	mov	r0, r7
 8007cb0:	47c8      	blx	r9
 8007cb2:	3001      	adds	r0, #1
 8007cb4:	d01e      	beq.n	8007cf4 <_printf_common+0xa4>
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	6922      	ldr	r2, [r4, #16]
 8007cba:	f003 0306 	and.w	r3, r3, #6
 8007cbe:	2b04      	cmp	r3, #4
 8007cc0:	bf02      	ittt	eq
 8007cc2:	68e5      	ldreq	r5, [r4, #12]
 8007cc4:	6833      	ldreq	r3, [r6, #0]
 8007cc6:	1aed      	subeq	r5, r5, r3
 8007cc8:	68a3      	ldr	r3, [r4, #8]
 8007cca:	bf0c      	ite	eq
 8007ccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cd0:	2500      	movne	r5, #0
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	bfc4      	itt	gt
 8007cd6:	1a9b      	subgt	r3, r3, r2
 8007cd8:	18ed      	addgt	r5, r5, r3
 8007cda:	2600      	movs	r6, #0
 8007cdc:	341a      	adds	r4, #26
 8007cde:	42b5      	cmp	r5, r6
 8007ce0:	d11a      	bne.n	8007d18 <_printf_common+0xc8>
 8007ce2:	2000      	movs	r0, #0
 8007ce4:	e008      	b.n	8007cf8 <_printf_common+0xa8>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	4652      	mov	r2, sl
 8007cea:	4641      	mov	r1, r8
 8007cec:	4638      	mov	r0, r7
 8007cee:	47c8      	blx	r9
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	d103      	bne.n	8007cfc <_printf_common+0xac>
 8007cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cfc:	3501      	adds	r5, #1
 8007cfe:	e7c6      	b.n	8007c8e <_printf_common+0x3e>
 8007d00:	18e1      	adds	r1, r4, r3
 8007d02:	1c5a      	adds	r2, r3, #1
 8007d04:	2030      	movs	r0, #48	@ 0x30
 8007d06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d0a:	4422      	add	r2, r4
 8007d0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d14:	3302      	adds	r3, #2
 8007d16:	e7c7      	b.n	8007ca8 <_printf_common+0x58>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	4622      	mov	r2, r4
 8007d1c:	4641      	mov	r1, r8
 8007d1e:	4638      	mov	r0, r7
 8007d20:	47c8      	blx	r9
 8007d22:	3001      	adds	r0, #1
 8007d24:	d0e6      	beq.n	8007cf4 <_printf_common+0xa4>
 8007d26:	3601      	adds	r6, #1
 8007d28:	e7d9      	b.n	8007cde <_printf_common+0x8e>
	...

08007d2c <_printf_i>:
 8007d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d30:	7e0f      	ldrb	r7, [r1, #24]
 8007d32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d34:	2f78      	cmp	r7, #120	@ 0x78
 8007d36:	4691      	mov	r9, r2
 8007d38:	4680      	mov	r8, r0
 8007d3a:	460c      	mov	r4, r1
 8007d3c:	469a      	mov	sl, r3
 8007d3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d42:	d807      	bhi.n	8007d54 <_printf_i+0x28>
 8007d44:	2f62      	cmp	r7, #98	@ 0x62
 8007d46:	d80a      	bhi.n	8007d5e <_printf_i+0x32>
 8007d48:	2f00      	cmp	r7, #0
 8007d4a:	f000 80d2 	beq.w	8007ef2 <_printf_i+0x1c6>
 8007d4e:	2f58      	cmp	r7, #88	@ 0x58
 8007d50:	f000 80b9 	beq.w	8007ec6 <_printf_i+0x19a>
 8007d54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d5c:	e03a      	b.n	8007dd4 <_printf_i+0xa8>
 8007d5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d62:	2b15      	cmp	r3, #21
 8007d64:	d8f6      	bhi.n	8007d54 <_printf_i+0x28>
 8007d66:	a101      	add	r1, pc, #4	@ (adr r1, 8007d6c <_printf_i+0x40>)
 8007d68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d6c:	08007dc5 	.word	0x08007dc5
 8007d70:	08007dd9 	.word	0x08007dd9
 8007d74:	08007d55 	.word	0x08007d55
 8007d78:	08007d55 	.word	0x08007d55
 8007d7c:	08007d55 	.word	0x08007d55
 8007d80:	08007d55 	.word	0x08007d55
 8007d84:	08007dd9 	.word	0x08007dd9
 8007d88:	08007d55 	.word	0x08007d55
 8007d8c:	08007d55 	.word	0x08007d55
 8007d90:	08007d55 	.word	0x08007d55
 8007d94:	08007d55 	.word	0x08007d55
 8007d98:	08007ed9 	.word	0x08007ed9
 8007d9c:	08007e03 	.word	0x08007e03
 8007da0:	08007e93 	.word	0x08007e93
 8007da4:	08007d55 	.word	0x08007d55
 8007da8:	08007d55 	.word	0x08007d55
 8007dac:	08007efb 	.word	0x08007efb
 8007db0:	08007d55 	.word	0x08007d55
 8007db4:	08007e03 	.word	0x08007e03
 8007db8:	08007d55 	.word	0x08007d55
 8007dbc:	08007d55 	.word	0x08007d55
 8007dc0:	08007e9b 	.word	0x08007e9b
 8007dc4:	6833      	ldr	r3, [r6, #0]
 8007dc6:	1d1a      	adds	r2, r3, #4
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	6032      	str	r2, [r6, #0]
 8007dcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007dd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e09d      	b.n	8007f14 <_printf_i+0x1e8>
 8007dd8:	6833      	ldr	r3, [r6, #0]
 8007dda:	6820      	ldr	r0, [r4, #0]
 8007ddc:	1d19      	adds	r1, r3, #4
 8007dde:	6031      	str	r1, [r6, #0]
 8007de0:	0606      	lsls	r6, r0, #24
 8007de2:	d501      	bpl.n	8007de8 <_printf_i+0xbc>
 8007de4:	681d      	ldr	r5, [r3, #0]
 8007de6:	e003      	b.n	8007df0 <_printf_i+0xc4>
 8007de8:	0645      	lsls	r5, r0, #25
 8007dea:	d5fb      	bpl.n	8007de4 <_printf_i+0xb8>
 8007dec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007df0:	2d00      	cmp	r5, #0
 8007df2:	da03      	bge.n	8007dfc <_printf_i+0xd0>
 8007df4:	232d      	movs	r3, #45	@ 0x2d
 8007df6:	426d      	negs	r5, r5
 8007df8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dfc:	4859      	ldr	r0, [pc, #356]	@ (8007f64 <_printf_i+0x238>)
 8007dfe:	230a      	movs	r3, #10
 8007e00:	e011      	b.n	8007e26 <_printf_i+0xfa>
 8007e02:	6821      	ldr	r1, [r4, #0]
 8007e04:	6833      	ldr	r3, [r6, #0]
 8007e06:	0608      	lsls	r0, r1, #24
 8007e08:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e0c:	d402      	bmi.n	8007e14 <_printf_i+0xe8>
 8007e0e:	0649      	lsls	r1, r1, #25
 8007e10:	bf48      	it	mi
 8007e12:	b2ad      	uxthmi	r5, r5
 8007e14:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e16:	4853      	ldr	r0, [pc, #332]	@ (8007f64 <_printf_i+0x238>)
 8007e18:	6033      	str	r3, [r6, #0]
 8007e1a:	bf14      	ite	ne
 8007e1c:	230a      	movne	r3, #10
 8007e1e:	2308      	moveq	r3, #8
 8007e20:	2100      	movs	r1, #0
 8007e22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e26:	6866      	ldr	r6, [r4, #4]
 8007e28:	60a6      	str	r6, [r4, #8]
 8007e2a:	2e00      	cmp	r6, #0
 8007e2c:	bfa2      	ittt	ge
 8007e2e:	6821      	ldrge	r1, [r4, #0]
 8007e30:	f021 0104 	bicge.w	r1, r1, #4
 8007e34:	6021      	strge	r1, [r4, #0]
 8007e36:	b90d      	cbnz	r5, 8007e3c <_printf_i+0x110>
 8007e38:	2e00      	cmp	r6, #0
 8007e3a:	d04b      	beq.n	8007ed4 <_printf_i+0x1a8>
 8007e3c:	4616      	mov	r6, r2
 8007e3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e42:	fb03 5711 	mls	r7, r3, r1, r5
 8007e46:	5dc7      	ldrb	r7, [r0, r7]
 8007e48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e4c:	462f      	mov	r7, r5
 8007e4e:	42bb      	cmp	r3, r7
 8007e50:	460d      	mov	r5, r1
 8007e52:	d9f4      	bls.n	8007e3e <_printf_i+0x112>
 8007e54:	2b08      	cmp	r3, #8
 8007e56:	d10b      	bne.n	8007e70 <_printf_i+0x144>
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	07df      	lsls	r7, r3, #31
 8007e5c:	d508      	bpl.n	8007e70 <_printf_i+0x144>
 8007e5e:	6923      	ldr	r3, [r4, #16]
 8007e60:	6861      	ldr	r1, [r4, #4]
 8007e62:	4299      	cmp	r1, r3
 8007e64:	bfde      	ittt	le
 8007e66:	2330      	movle	r3, #48	@ 0x30
 8007e68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e70:	1b92      	subs	r2, r2, r6
 8007e72:	6122      	str	r2, [r4, #16]
 8007e74:	f8cd a000 	str.w	sl, [sp]
 8007e78:	464b      	mov	r3, r9
 8007e7a:	aa03      	add	r2, sp, #12
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	4640      	mov	r0, r8
 8007e80:	f7ff fee6 	bl	8007c50 <_printf_common>
 8007e84:	3001      	adds	r0, #1
 8007e86:	d14a      	bne.n	8007f1e <_printf_i+0x1f2>
 8007e88:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8c:	b004      	add	sp, #16
 8007e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	f043 0320 	orr.w	r3, r3, #32
 8007e98:	6023      	str	r3, [r4, #0]
 8007e9a:	4833      	ldr	r0, [pc, #204]	@ (8007f68 <_printf_i+0x23c>)
 8007e9c:	2778      	movs	r7, #120	@ 0x78
 8007e9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ea2:	6823      	ldr	r3, [r4, #0]
 8007ea4:	6831      	ldr	r1, [r6, #0]
 8007ea6:	061f      	lsls	r7, r3, #24
 8007ea8:	f851 5b04 	ldr.w	r5, [r1], #4
 8007eac:	d402      	bmi.n	8007eb4 <_printf_i+0x188>
 8007eae:	065f      	lsls	r7, r3, #25
 8007eb0:	bf48      	it	mi
 8007eb2:	b2ad      	uxthmi	r5, r5
 8007eb4:	6031      	str	r1, [r6, #0]
 8007eb6:	07d9      	lsls	r1, r3, #31
 8007eb8:	bf44      	itt	mi
 8007eba:	f043 0320 	orrmi.w	r3, r3, #32
 8007ebe:	6023      	strmi	r3, [r4, #0]
 8007ec0:	b11d      	cbz	r5, 8007eca <_printf_i+0x19e>
 8007ec2:	2310      	movs	r3, #16
 8007ec4:	e7ac      	b.n	8007e20 <_printf_i+0xf4>
 8007ec6:	4827      	ldr	r0, [pc, #156]	@ (8007f64 <_printf_i+0x238>)
 8007ec8:	e7e9      	b.n	8007e9e <_printf_i+0x172>
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	f023 0320 	bic.w	r3, r3, #32
 8007ed0:	6023      	str	r3, [r4, #0]
 8007ed2:	e7f6      	b.n	8007ec2 <_printf_i+0x196>
 8007ed4:	4616      	mov	r6, r2
 8007ed6:	e7bd      	b.n	8007e54 <_printf_i+0x128>
 8007ed8:	6833      	ldr	r3, [r6, #0]
 8007eda:	6825      	ldr	r5, [r4, #0]
 8007edc:	6961      	ldr	r1, [r4, #20]
 8007ede:	1d18      	adds	r0, r3, #4
 8007ee0:	6030      	str	r0, [r6, #0]
 8007ee2:	062e      	lsls	r6, r5, #24
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	d501      	bpl.n	8007eec <_printf_i+0x1c0>
 8007ee8:	6019      	str	r1, [r3, #0]
 8007eea:	e002      	b.n	8007ef2 <_printf_i+0x1c6>
 8007eec:	0668      	lsls	r0, r5, #25
 8007eee:	d5fb      	bpl.n	8007ee8 <_printf_i+0x1bc>
 8007ef0:	8019      	strh	r1, [r3, #0]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	6123      	str	r3, [r4, #16]
 8007ef6:	4616      	mov	r6, r2
 8007ef8:	e7bc      	b.n	8007e74 <_printf_i+0x148>
 8007efa:	6833      	ldr	r3, [r6, #0]
 8007efc:	1d1a      	adds	r2, r3, #4
 8007efe:	6032      	str	r2, [r6, #0]
 8007f00:	681e      	ldr	r6, [r3, #0]
 8007f02:	6862      	ldr	r2, [r4, #4]
 8007f04:	2100      	movs	r1, #0
 8007f06:	4630      	mov	r0, r6
 8007f08:	f7f8 f972 	bl	80001f0 <memchr>
 8007f0c:	b108      	cbz	r0, 8007f12 <_printf_i+0x1e6>
 8007f0e:	1b80      	subs	r0, r0, r6
 8007f10:	6060      	str	r0, [r4, #4]
 8007f12:	6863      	ldr	r3, [r4, #4]
 8007f14:	6123      	str	r3, [r4, #16]
 8007f16:	2300      	movs	r3, #0
 8007f18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f1c:	e7aa      	b.n	8007e74 <_printf_i+0x148>
 8007f1e:	6923      	ldr	r3, [r4, #16]
 8007f20:	4632      	mov	r2, r6
 8007f22:	4649      	mov	r1, r9
 8007f24:	4640      	mov	r0, r8
 8007f26:	47d0      	blx	sl
 8007f28:	3001      	adds	r0, #1
 8007f2a:	d0ad      	beq.n	8007e88 <_printf_i+0x15c>
 8007f2c:	6823      	ldr	r3, [r4, #0]
 8007f2e:	079b      	lsls	r3, r3, #30
 8007f30:	d413      	bmi.n	8007f5a <_printf_i+0x22e>
 8007f32:	68e0      	ldr	r0, [r4, #12]
 8007f34:	9b03      	ldr	r3, [sp, #12]
 8007f36:	4298      	cmp	r0, r3
 8007f38:	bfb8      	it	lt
 8007f3a:	4618      	movlt	r0, r3
 8007f3c:	e7a6      	b.n	8007e8c <_printf_i+0x160>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	4632      	mov	r2, r6
 8007f42:	4649      	mov	r1, r9
 8007f44:	4640      	mov	r0, r8
 8007f46:	47d0      	blx	sl
 8007f48:	3001      	adds	r0, #1
 8007f4a:	d09d      	beq.n	8007e88 <_printf_i+0x15c>
 8007f4c:	3501      	adds	r5, #1
 8007f4e:	68e3      	ldr	r3, [r4, #12]
 8007f50:	9903      	ldr	r1, [sp, #12]
 8007f52:	1a5b      	subs	r3, r3, r1
 8007f54:	42ab      	cmp	r3, r5
 8007f56:	dcf2      	bgt.n	8007f3e <_printf_i+0x212>
 8007f58:	e7eb      	b.n	8007f32 <_printf_i+0x206>
 8007f5a:	2500      	movs	r5, #0
 8007f5c:	f104 0619 	add.w	r6, r4, #25
 8007f60:	e7f5      	b.n	8007f4e <_printf_i+0x222>
 8007f62:	bf00      	nop
 8007f64:	0800d981 	.word	0x0800d981
 8007f68:	0800d992 	.word	0x0800d992

08007f6c <_scanf_float>:
 8007f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f70:	b087      	sub	sp, #28
 8007f72:	4617      	mov	r7, r2
 8007f74:	9303      	str	r3, [sp, #12]
 8007f76:	688b      	ldr	r3, [r1, #8]
 8007f78:	1e5a      	subs	r2, r3, #1
 8007f7a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007f7e:	bf81      	itttt	hi
 8007f80:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007f84:	eb03 0b05 	addhi.w	fp, r3, r5
 8007f88:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007f8c:	608b      	strhi	r3, [r1, #8]
 8007f8e:	680b      	ldr	r3, [r1, #0]
 8007f90:	460a      	mov	r2, r1
 8007f92:	f04f 0500 	mov.w	r5, #0
 8007f96:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007f9a:	f842 3b1c 	str.w	r3, [r2], #28
 8007f9e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007fa2:	4680      	mov	r8, r0
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	bf98      	it	ls
 8007fa8:	f04f 0b00 	movls.w	fp, #0
 8007fac:	9201      	str	r2, [sp, #4]
 8007fae:	4616      	mov	r6, r2
 8007fb0:	46aa      	mov	sl, r5
 8007fb2:	46a9      	mov	r9, r5
 8007fb4:	9502      	str	r5, [sp, #8]
 8007fb6:	68a2      	ldr	r2, [r4, #8]
 8007fb8:	b152      	cbz	r2, 8007fd0 <_scanf_float+0x64>
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	2b4e      	cmp	r3, #78	@ 0x4e
 8007fc0:	d864      	bhi.n	800808c <_scanf_float+0x120>
 8007fc2:	2b40      	cmp	r3, #64	@ 0x40
 8007fc4:	d83c      	bhi.n	8008040 <_scanf_float+0xd4>
 8007fc6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007fca:	b2c8      	uxtb	r0, r1
 8007fcc:	280e      	cmp	r0, #14
 8007fce:	d93a      	bls.n	8008046 <_scanf_float+0xda>
 8007fd0:	f1b9 0f00 	cmp.w	r9, #0
 8007fd4:	d003      	beq.n	8007fde <_scanf_float+0x72>
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fdc:	6023      	str	r3, [r4, #0]
 8007fde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fe2:	f1ba 0f01 	cmp.w	sl, #1
 8007fe6:	f200 8117 	bhi.w	8008218 <_scanf_float+0x2ac>
 8007fea:	9b01      	ldr	r3, [sp, #4]
 8007fec:	429e      	cmp	r6, r3
 8007fee:	f200 8108 	bhi.w	8008202 <_scanf_float+0x296>
 8007ff2:	2001      	movs	r0, #1
 8007ff4:	b007      	add	sp, #28
 8007ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ffa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007ffe:	2a0d      	cmp	r2, #13
 8008000:	d8e6      	bhi.n	8007fd0 <_scanf_float+0x64>
 8008002:	a101      	add	r1, pc, #4	@ (adr r1, 8008008 <_scanf_float+0x9c>)
 8008004:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008008:	0800814f 	.word	0x0800814f
 800800c:	08007fd1 	.word	0x08007fd1
 8008010:	08007fd1 	.word	0x08007fd1
 8008014:	08007fd1 	.word	0x08007fd1
 8008018:	080081af 	.word	0x080081af
 800801c:	08008187 	.word	0x08008187
 8008020:	08007fd1 	.word	0x08007fd1
 8008024:	08007fd1 	.word	0x08007fd1
 8008028:	0800815d 	.word	0x0800815d
 800802c:	08007fd1 	.word	0x08007fd1
 8008030:	08007fd1 	.word	0x08007fd1
 8008034:	08007fd1 	.word	0x08007fd1
 8008038:	08007fd1 	.word	0x08007fd1
 800803c:	08008115 	.word	0x08008115
 8008040:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008044:	e7db      	b.n	8007ffe <_scanf_float+0x92>
 8008046:	290e      	cmp	r1, #14
 8008048:	d8c2      	bhi.n	8007fd0 <_scanf_float+0x64>
 800804a:	a001      	add	r0, pc, #4	@ (adr r0, 8008050 <_scanf_float+0xe4>)
 800804c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008050:	08008105 	.word	0x08008105
 8008054:	08007fd1 	.word	0x08007fd1
 8008058:	08008105 	.word	0x08008105
 800805c:	0800819b 	.word	0x0800819b
 8008060:	08007fd1 	.word	0x08007fd1
 8008064:	080080ad 	.word	0x080080ad
 8008068:	080080eb 	.word	0x080080eb
 800806c:	080080eb 	.word	0x080080eb
 8008070:	080080eb 	.word	0x080080eb
 8008074:	080080eb 	.word	0x080080eb
 8008078:	080080eb 	.word	0x080080eb
 800807c:	080080eb 	.word	0x080080eb
 8008080:	080080eb 	.word	0x080080eb
 8008084:	080080eb 	.word	0x080080eb
 8008088:	080080eb 	.word	0x080080eb
 800808c:	2b6e      	cmp	r3, #110	@ 0x6e
 800808e:	d809      	bhi.n	80080a4 <_scanf_float+0x138>
 8008090:	2b60      	cmp	r3, #96	@ 0x60
 8008092:	d8b2      	bhi.n	8007ffa <_scanf_float+0x8e>
 8008094:	2b54      	cmp	r3, #84	@ 0x54
 8008096:	d07b      	beq.n	8008190 <_scanf_float+0x224>
 8008098:	2b59      	cmp	r3, #89	@ 0x59
 800809a:	d199      	bne.n	8007fd0 <_scanf_float+0x64>
 800809c:	2d07      	cmp	r5, #7
 800809e:	d197      	bne.n	8007fd0 <_scanf_float+0x64>
 80080a0:	2508      	movs	r5, #8
 80080a2:	e02c      	b.n	80080fe <_scanf_float+0x192>
 80080a4:	2b74      	cmp	r3, #116	@ 0x74
 80080a6:	d073      	beq.n	8008190 <_scanf_float+0x224>
 80080a8:	2b79      	cmp	r3, #121	@ 0x79
 80080aa:	e7f6      	b.n	800809a <_scanf_float+0x12e>
 80080ac:	6821      	ldr	r1, [r4, #0]
 80080ae:	05c8      	lsls	r0, r1, #23
 80080b0:	d51b      	bpl.n	80080ea <_scanf_float+0x17e>
 80080b2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80080b6:	6021      	str	r1, [r4, #0]
 80080b8:	f109 0901 	add.w	r9, r9, #1
 80080bc:	f1bb 0f00 	cmp.w	fp, #0
 80080c0:	d003      	beq.n	80080ca <_scanf_float+0x15e>
 80080c2:	3201      	adds	r2, #1
 80080c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80080c8:	60a2      	str	r2, [r4, #8]
 80080ca:	68a3      	ldr	r3, [r4, #8]
 80080cc:	3b01      	subs	r3, #1
 80080ce:	60a3      	str	r3, [r4, #8]
 80080d0:	6923      	ldr	r3, [r4, #16]
 80080d2:	3301      	adds	r3, #1
 80080d4:	6123      	str	r3, [r4, #16]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	3b01      	subs	r3, #1
 80080da:	2b00      	cmp	r3, #0
 80080dc:	607b      	str	r3, [r7, #4]
 80080de:	f340 8087 	ble.w	80081f0 <_scanf_float+0x284>
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	3301      	adds	r3, #1
 80080e6:	603b      	str	r3, [r7, #0]
 80080e8:	e765      	b.n	8007fb6 <_scanf_float+0x4a>
 80080ea:	eb1a 0105 	adds.w	r1, sl, r5
 80080ee:	f47f af6f 	bne.w	8007fd0 <_scanf_float+0x64>
 80080f2:	6822      	ldr	r2, [r4, #0]
 80080f4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80080f8:	6022      	str	r2, [r4, #0]
 80080fa:	460d      	mov	r5, r1
 80080fc:	468a      	mov	sl, r1
 80080fe:	f806 3b01 	strb.w	r3, [r6], #1
 8008102:	e7e2      	b.n	80080ca <_scanf_float+0x15e>
 8008104:	6822      	ldr	r2, [r4, #0]
 8008106:	0610      	lsls	r0, r2, #24
 8008108:	f57f af62 	bpl.w	8007fd0 <_scanf_float+0x64>
 800810c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008110:	6022      	str	r2, [r4, #0]
 8008112:	e7f4      	b.n	80080fe <_scanf_float+0x192>
 8008114:	f1ba 0f00 	cmp.w	sl, #0
 8008118:	d10e      	bne.n	8008138 <_scanf_float+0x1cc>
 800811a:	f1b9 0f00 	cmp.w	r9, #0
 800811e:	d10e      	bne.n	800813e <_scanf_float+0x1d2>
 8008120:	6822      	ldr	r2, [r4, #0]
 8008122:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008126:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800812a:	d108      	bne.n	800813e <_scanf_float+0x1d2>
 800812c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008130:	6022      	str	r2, [r4, #0]
 8008132:	f04f 0a01 	mov.w	sl, #1
 8008136:	e7e2      	b.n	80080fe <_scanf_float+0x192>
 8008138:	f1ba 0f02 	cmp.w	sl, #2
 800813c:	d055      	beq.n	80081ea <_scanf_float+0x27e>
 800813e:	2d01      	cmp	r5, #1
 8008140:	d002      	beq.n	8008148 <_scanf_float+0x1dc>
 8008142:	2d04      	cmp	r5, #4
 8008144:	f47f af44 	bne.w	8007fd0 <_scanf_float+0x64>
 8008148:	3501      	adds	r5, #1
 800814a:	b2ed      	uxtb	r5, r5
 800814c:	e7d7      	b.n	80080fe <_scanf_float+0x192>
 800814e:	f1ba 0f01 	cmp.w	sl, #1
 8008152:	f47f af3d 	bne.w	8007fd0 <_scanf_float+0x64>
 8008156:	f04f 0a02 	mov.w	sl, #2
 800815a:	e7d0      	b.n	80080fe <_scanf_float+0x192>
 800815c:	b97d      	cbnz	r5, 800817e <_scanf_float+0x212>
 800815e:	f1b9 0f00 	cmp.w	r9, #0
 8008162:	f47f af38 	bne.w	8007fd6 <_scanf_float+0x6a>
 8008166:	6822      	ldr	r2, [r4, #0]
 8008168:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800816c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008170:	f040 8108 	bne.w	8008384 <_scanf_float+0x418>
 8008174:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008178:	6022      	str	r2, [r4, #0]
 800817a:	2501      	movs	r5, #1
 800817c:	e7bf      	b.n	80080fe <_scanf_float+0x192>
 800817e:	2d03      	cmp	r5, #3
 8008180:	d0e2      	beq.n	8008148 <_scanf_float+0x1dc>
 8008182:	2d05      	cmp	r5, #5
 8008184:	e7de      	b.n	8008144 <_scanf_float+0x1d8>
 8008186:	2d02      	cmp	r5, #2
 8008188:	f47f af22 	bne.w	8007fd0 <_scanf_float+0x64>
 800818c:	2503      	movs	r5, #3
 800818e:	e7b6      	b.n	80080fe <_scanf_float+0x192>
 8008190:	2d06      	cmp	r5, #6
 8008192:	f47f af1d 	bne.w	8007fd0 <_scanf_float+0x64>
 8008196:	2507      	movs	r5, #7
 8008198:	e7b1      	b.n	80080fe <_scanf_float+0x192>
 800819a:	6822      	ldr	r2, [r4, #0]
 800819c:	0591      	lsls	r1, r2, #22
 800819e:	f57f af17 	bpl.w	8007fd0 <_scanf_float+0x64>
 80081a2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80081a6:	6022      	str	r2, [r4, #0]
 80081a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80081ac:	e7a7      	b.n	80080fe <_scanf_float+0x192>
 80081ae:	6822      	ldr	r2, [r4, #0]
 80081b0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80081b4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80081b8:	d006      	beq.n	80081c8 <_scanf_float+0x25c>
 80081ba:	0550      	lsls	r0, r2, #21
 80081bc:	f57f af08 	bpl.w	8007fd0 <_scanf_float+0x64>
 80081c0:	f1b9 0f00 	cmp.w	r9, #0
 80081c4:	f000 80de 	beq.w	8008384 <_scanf_float+0x418>
 80081c8:	0591      	lsls	r1, r2, #22
 80081ca:	bf58      	it	pl
 80081cc:	9902      	ldrpl	r1, [sp, #8]
 80081ce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80081d2:	bf58      	it	pl
 80081d4:	eba9 0101 	subpl.w	r1, r9, r1
 80081d8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80081dc:	bf58      	it	pl
 80081de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80081e2:	6022      	str	r2, [r4, #0]
 80081e4:	f04f 0900 	mov.w	r9, #0
 80081e8:	e789      	b.n	80080fe <_scanf_float+0x192>
 80081ea:	f04f 0a03 	mov.w	sl, #3
 80081ee:	e786      	b.n	80080fe <_scanf_float+0x192>
 80081f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80081f4:	4639      	mov	r1, r7
 80081f6:	4640      	mov	r0, r8
 80081f8:	4798      	blx	r3
 80081fa:	2800      	cmp	r0, #0
 80081fc:	f43f aedb 	beq.w	8007fb6 <_scanf_float+0x4a>
 8008200:	e6e6      	b.n	8007fd0 <_scanf_float+0x64>
 8008202:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008206:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800820a:	463a      	mov	r2, r7
 800820c:	4640      	mov	r0, r8
 800820e:	4798      	blx	r3
 8008210:	6923      	ldr	r3, [r4, #16]
 8008212:	3b01      	subs	r3, #1
 8008214:	6123      	str	r3, [r4, #16]
 8008216:	e6e8      	b.n	8007fea <_scanf_float+0x7e>
 8008218:	1e6b      	subs	r3, r5, #1
 800821a:	2b06      	cmp	r3, #6
 800821c:	d824      	bhi.n	8008268 <_scanf_float+0x2fc>
 800821e:	2d02      	cmp	r5, #2
 8008220:	d836      	bhi.n	8008290 <_scanf_float+0x324>
 8008222:	9b01      	ldr	r3, [sp, #4]
 8008224:	429e      	cmp	r6, r3
 8008226:	f67f aee4 	bls.w	8007ff2 <_scanf_float+0x86>
 800822a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800822e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008232:	463a      	mov	r2, r7
 8008234:	4640      	mov	r0, r8
 8008236:	4798      	blx	r3
 8008238:	6923      	ldr	r3, [r4, #16]
 800823a:	3b01      	subs	r3, #1
 800823c:	6123      	str	r3, [r4, #16]
 800823e:	e7f0      	b.n	8008222 <_scanf_float+0x2b6>
 8008240:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008244:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008248:	463a      	mov	r2, r7
 800824a:	4640      	mov	r0, r8
 800824c:	4798      	blx	r3
 800824e:	6923      	ldr	r3, [r4, #16]
 8008250:	3b01      	subs	r3, #1
 8008252:	6123      	str	r3, [r4, #16]
 8008254:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008258:	fa5f fa8a 	uxtb.w	sl, sl
 800825c:	f1ba 0f02 	cmp.w	sl, #2
 8008260:	d1ee      	bne.n	8008240 <_scanf_float+0x2d4>
 8008262:	3d03      	subs	r5, #3
 8008264:	b2ed      	uxtb	r5, r5
 8008266:	1b76      	subs	r6, r6, r5
 8008268:	6823      	ldr	r3, [r4, #0]
 800826a:	05da      	lsls	r2, r3, #23
 800826c:	d530      	bpl.n	80082d0 <_scanf_float+0x364>
 800826e:	055b      	lsls	r3, r3, #21
 8008270:	d511      	bpl.n	8008296 <_scanf_float+0x32a>
 8008272:	9b01      	ldr	r3, [sp, #4]
 8008274:	429e      	cmp	r6, r3
 8008276:	f67f aebc 	bls.w	8007ff2 <_scanf_float+0x86>
 800827a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800827e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008282:	463a      	mov	r2, r7
 8008284:	4640      	mov	r0, r8
 8008286:	4798      	blx	r3
 8008288:	6923      	ldr	r3, [r4, #16]
 800828a:	3b01      	subs	r3, #1
 800828c:	6123      	str	r3, [r4, #16]
 800828e:	e7f0      	b.n	8008272 <_scanf_float+0x306>
 8008290:	46aa      	mov	sl, r5
 8008292:	46b3      	mov	fp, r6
 8008294:	e7de      	b.n	8008254 <_scanf_float+0x2e8>
 8008296:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800829a:	6923      	ldr	r3, [r4, #16]
 800829c:	2965      	cmp	r1, #101	@ 0x65
 800829e:	f103 33ff 	add.w	r3, r3, #4294967295
 80082a2:	f106 35ff 	add.w	r5, r6, #4294967295
 80082a6:	6123      	str	r3, [r4, #16]
 80082a8:	d00c      	beq.n	80082c4 <_scanf_float+0x358>
 80082aa:	2945      	cmp	r1, #69	@ 0x45
 80082ac:	d00a      	beq.n	80082c4 <_scanf_float+0x358>
 80082ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082b2:	463a      	mov	r2, r7
 80082b4:	4640      	mov	r0, r8
 80082b6:	4798      	blx	r3
 80082b8:	6923      	ldr	r3, [r4, #16]
 80082ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80082be:	3b01      	subs	r3, #1
 80082c0:	1eb5      	subs	r5, r6, #2
 80082c2:	6123      	str	r3, [r4, #16]
 80082c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082c8:	463a      	mov	r2, r7
 80082ca:	4640      	mov	r0, r8
 80082cc:	4798      	blx	r3
 80082ce:	462e      	mov	r6, r5
 80082d0:	6822      	ldr	r2, [r4, #0]
 80082d2:	f012 0210 	ands.w	r2, r2, #16
 80082d6:	d001      	beq.n	80082dc <_scanf_float+0x370>
 80082d8:	2000      	movs	r0, #0
 80082da:	e68b      	b.n	8007ff4 <_scanf_float+0x88>
 80082dc:	7032      	strb	r2, [r6, #0]
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80082e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082e8:	d11c      	bne.n	8008324 <_scanf_float+0x3b8>
 80082ea:	9b02      	ldr	r3, [sp, #8]
 80082ec:	454b      	cmp	r3, r9
 80082ee:	eba3 0209 	sub.w	r2, r3, r9
 80082f2:	d123      	bne.n	800833c <_scanf_float+0x3d0>
 80082f4:	9901      	ldr	r1, [sp, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	4640      	mov	r0, r8
 80082fa:	f002 fc25 	bl	800ab48 <_strtod_r>
 80082fe:	9b03      	ldr	r3, [sp, #12]
 8008300:	6821      	ldr	r1, [r4, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f011 0f02 	tst.w	r1, #2
 8008308:	ec57 6b10 	vmov	r6, r7, d0
 800830c:	f103 0204 	add.w	r2, r3, #4
 8008310:	d01f      	beq.n	8008352 <_scanf_float+0x3e6>
 8008312:	9903      	ldr	r1, [sp, #12]
 8008314:	600a      	str	r2, [r1, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	e9c3 6700 	strd	r6, r7, [r3]
 800831c:	68e3      	ldr	r3, [r4, #12]
 800831e:	3301      	adds	r3, #1
 8008320:	60e3      	str	r3, [r4, #12]
 8008322:	e7d9      	b.n	80082d8 <_scanf_float+0x36c>
 8008324:	9b04      	ldr	r3, [sp, #16]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d0e4      	beq.n	80082f4 <_scanf_float+0x388>
 800832a:	9905      	ldr	r1, [sp, #20]
 800832c:	230a      	movs	r3, #10
 800832e:	3101      	adds	r1, #1
 8008330:	4640      	mov	r0, r8
 8008332:	f002 fc89 	bl	800ac48 <_strtol_r>
 8008336:	9b04      	ldr	r3, [sp, #16]
 8008338:	9e05      	ldr	r6, [sp, #20]
 800833a:	1ac2      	subs	r2, r0, r3
 800833c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008340:	429e      	cmp	r6, r3
 8008342:	bf28      	it	cs
 8008344:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008348:	4910      	ldr	r1, [pc, #64]	@ (800838c <_scanf_float+0x420>)
 800834a:	4630      	mov	r0, r6
 800834c:	f000 f8e4 	bl	8008518 <siprintf>
 8008350:	e7d0      	b.n	80082f4 <_scanf_float+0x388>
 8008352:	f011 0f04 	tst.w	r1, #4
 8008356:	9903      	ldr	r1, [sp, #12]
 8008358:	600a      	str	r2, [r1, #0]
 800835a:	d1dc      	bne.n	8008316 <_scanf_float+0x3aa>
 800835c:	681d      	ldr	r5, [r3, #0]
 800835e:	4632      	mov	r2, r6
 8008360:	463b      	mov	r3, r7
 8008362:	4630      	mov	r0, r6
 8008364:	4639      	mov	r1, r7
 8008366:	f7f8 fbf1 	bl	8000b4c <__aeabi_dcmpun>
 800836a:	b128      	cbz	r0, 8008378 <_scanf_float+0x40c>
 800836c:	4808      	ldr	r0, [pc, #32]	@ (8008390 <_scanf_float+0x424>)
 800836e:	f000 f9c5 	bl	80086fc <nanf>
 8008372:	ed85 0a00 	vstr	s0, [r5]
 8008376:	e7d1      	b.n	800831c <_scanf_float+0x3b0>
 8008378:	4630      	mov	r0, r6
 800837a:	4639      	mov	r1, r7
 800837c:	f7f8 fc44 	bl	8000c08 <__aeabi_d2f>
 8008380:	6028      	str	r0, [r5, #0]
 8008382:	e7cb      	b.n	800831c <_scanf_float+0x3b0>
 8008384:	f04f 0900 	mov.w	r9, #0
 8008388:	e629      	b.n	8007fde <_scanf_float+0x72>
 800838a:	bf00      	nop
 800838c:	0800d9a3 	.word	0x0800d9a3
 8008390:	0800d9e3 	.word	0x0800d9e3

08008394 <std>:
 8008394:	2300      	movs	r3, #0
 8008396:	b510      	push	{r4, lr}
 8008398:	4604      	mov	r4, r0
 800839a:	e9c0 3300 	strd	r3, r3, [r0]
 800839e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083a2:	6083      	str	r3, [r0, #8]
 80083a4:	8181      	strh	r1, [r0, #12]
 80083a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80083a8:	81c2      	strh	r2, [r0, #14]
 80083aa:	6183      	str	r3, [r0, #24]
 80083ac:	4619      	mov	r1, r3
 80083ae:	2208      	movs	r2, #8
 80083b0:	305c      	adds	r0, #92	@ 0x5c
 80083b2:	f000 f914 	bl	80085de <memset>
 80083b6:	4b0d      	ldr	r3, [pc, #52]	@ (80083ec <std+0x58>)
 80083b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80083ba:	4b0d      	ldr	r3, [pc, #52]	@ (80083f0 <std+0x5c>)
 80083bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80083be:	4b0d      	ldr	r3, [pc, #52]	@ (80083f4 <std+0x60>)
 80083c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80083c2:	4b0d      	ldr	r3, [pc, #52]	@ (80083f8 <std+0x64>)
 80083c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80083c6:	4b0d      	ldr	r3, [pc, #52]	@ (80083fc <std+0x68>)
 80083c8:	6224      	str	r4, [r4, #32]
 80083ca:	429c      	cmp	r4, r3
 80083cc:	d006      	beq.n	80083dc <std+0x48>
 80083ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80083d2:	4294      	cmp	r4, r2
 80083d4:	d002      	beq.n	80083dc <std+0x48>
 80083d6:	33d0      	adds	r3, #208	@ 0xd0
 80083d8:	429c      	cmp	r4, r3
 80083da:	d105      	bne.n	80083e8 <std+0x54>
 80083dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80083e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083e4:	f000 b978 	b.w	80086d8 <__retarget_lock_init_recursive>
 80083e8:	bd10      	pop	{r4, pc}
 80083ea:	bf00      	nop
 80083ec:	08008559 	.word	0x08008559
 80083f0:	0800857b 	.word	0x0800857b
 80083f4:	080085b3 	.word	0x080085b3
 80083f8:	080085d7 	.word	0x080085d7
 80083fc:	20000864 	.word	0x20000864

08008400 <stdio_exit_handler>:
 8008400:	4a02      	ldr	r2, [pc, #8]	@ (800840c <stdio_exit_handler+0xc>)
 8008402:	4903      	ldr	r1, [pc, #12]	@ (8008410 <stdio_exit_handler+0x10>)
 8008404:	4803      	ldr	r0, [pc, #12]	@ (8008414 <stdio_exit_handler+0x14>)
 8008406:	f000 b869 	b.w	80084dc <_fwalk_sglue>
 800840a:	bf00      	nop
 800840c:	20000058 	.word	0x20000058
 8008410:	0800b005 	.word	0x0800b005
 8008414:	20000068 	.word	0x20000068

08008418 <cleanup_stdio>:
 8008418:	6841      	ldr	r1, [r0, #4]
 800841a:	4b0c      	ldr	r3, [pc, #48]	@ (800844c <cleanup_stdio+0x34>)
 800841c:	4299      	cmp	r1, r3
 800841e:	b510      	push	{r4, lr}
 8008420:	4604      	mov	r4, r0
 8008422:	d001      	beq.n	8008428 <cleanup_stdio+0x10>
 8008424:	f002 fdee 	bl	800b004 <_fflush_r>
 8008428:	68a1      	ldr	r1, [r4, #8]
 800842a:	4b09      	ldr	r3, [pc, #36]	@ (8008450 <cleanup_stdio+0x38>)
 800842c:	4299      	cmp	r1, r3
 800842e:	d002      	beq.n	8008436 <cleanup_stdio+0x1e>
 8008430:	4620      	mov	r0, r4
 8008432:	f002 fde7 	bl	800b004 <_fflush_r>
 8008436:	68e1      	ldr	r1, [r4, #12]
 8008438:	4b06      	ldr	r3, [pc, #24]	@ (8008454 <cleanup_stdio+0x3c>)
 800843a:	4299      	cmp	r1, r3
 800843c:	d004      	beq.n	8008448 <cleanup_stdio+0x30>
 800843e:	4620      	mov	r0, r4
 8008440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008444:	f002 bdde 	b.w	800b004 <_fflush_r>
 8008448:	bd10      	pop	{r4, pc}
 800844a:	bf00      	nop
 800844c:	20000864 	.word	0x20000864
 8008450:	200008cc 	.word	0x200008cc
 8008454:	20000934 	.word	0x20000934

08008458 <global_stdio_init.part.0>:
 8008458:	b510      	push	{r4, lr}
 800845a:	4b0b      	ldr	r3, [pc, #44]	@ (8008488 <global_stdio_init.part.0+0x30>)
 800845c:	4c0b      	ldr	r4, [pc, #44]	@ (800848c <global_stdio_init.part.0+0x34>)
 800845e:	4a0c      	ldr	r2, [pc, #48]	@ (8008490 <global_stdio_init.part.0+0x38>)
 8008460:	601a      	str	r2, [r3, #0]
 8008462:	4620      	mov	r0, r4
 8008464:	2200      	movs	r2, #0
 8008466:	2104      	movs	r1, #4
 8008468:	f7ff ff94 	bl	8008394 <std>
 800846c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008470:	2201      	movs	r2, #1
 8008472:	2109      	movs	r1, #9
 8008474:	f7ff ff8e 	bl	8008394 <std>
 8008478:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800847c:	2202      	movs	r2, #2
 800847e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008482:	2112      	movs	r1, #18
 8008484:	f7ff bf86 	b.w	8008394 <std>
 8008488:	2000099c 	.word	0x2000099c
 800848c:	20000864 	.word	0x20000864
 8008490:	08008401 	.word	0x08008401

08008494 <__sfp_lock_acquire>:
 8008494:	4801      	ldr	r0, [pc, #4]	@ (800849c <__sfp_lock_acquire+0x8>)
 8008496:	f000 b920 	b.w	80086da <__retarget_lock_acquire_recursive>
 800849a:	bf00      	nop
 800849c:	200009a5 	.word	0x200009a5

080084a0 <__sfp_lock_release>:
 80084a0:	4801      	ldr	r0, [pc, #4]	@ (80084a8 <__sfp_lock_release+0x8>)
 80084a2:	f000 b91b 	b.w	80086dc <__retarget_lock_release_recursive>
 80084a6:	bf00      	nop
 80084a8:	200009a5 	.word	0x200009a5

080084ac <__sinit>:
 80084ac:	b510      	push	{r4, lr}
 80084ae:	4604      	mov	r4, r0
 80084b0:	f7ff fff0 	bl	8008494 <__sfp_lock_acquire>
 80084b4:	6a23      	ldr	r3, [r4, #32]
 80084b6:	b11b      	cbz	r3, 80084c0 <__sinit+0x14>
 80084b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084bc:	f7ff bff0 	b.w	80084a0 <__sfp_lock_release>
 80084c0:	4b04      	ldr	r3, [pc, #16]	@ (80084d4 <__sinit+0x28>)
 80084c2:	6223      	str	r3, [r4, #32]
 80084c4:	4b04      	ldr	r3, [pc, #16]	@ (80084d8 <__sinit+0x2c>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1f5      	bne.n	80084b8 <__sinit+0xc>
 80084cc:	f7ff ffc4 	bl	8008458 <global_stdio_init.part.0>
 80084d0:	e7f2      	b.n	80084b8 <__sinit+0xc>
 80084d2:	bf00      	nop
 80084d4:	08008419 	.word	0x08008419
 80084d8:	2000099c 	.word	0x2000099c

080084dc <_fwalk_sglue>:
 80084dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084e0:	4607      	mov	r7, r0
 80084e2:	4688      	mov	r8, r1
 80084e4:	4614      	mov	r4, r2
 80084e6:	2600      	movs	r6, #0
 80084e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084ec:	f1b9 0901 	subs.w	r9, r9, #1
 80084f0:	d505      	bpl.n	80084fe <_fwalk_sglue+0x22>
 80084f2:	6824      	ldr	r4, [r4, #0]
 80084f4:	2c00      	cmp	r4, #0
 80084f6:	d1f7      	bne.n	80084e8 <_fwalk_sglue+0xc>
 80084f8:	4630      	mov	r0, r6
 80084fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084fe:	89ab      	ldrh	r3, [r5, #12]
 8008500:	2b01      	cmp	r3, #1
 8008502:	d907      	bls.n	8008514 <_fwalk_sglue+0x38>
 8008504:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008508:	3301      	adds	r3, #1
 800850a:	d003      	beq.n	8008514 <_fwalk_sglue+0x38>
 800850c:	4629      	mov	r1, r5
 800850e:	4638      	mov	r0, r7
 8008510:	47c0      	blx	r8
 8008512:	4306      	orrs	r6, r0
 8008514:	3568      	adds	r5, #104	@ 0x68
 8008516:	e7e9      	b.n	80084ec <_fwalk_sglue+0x10>

08008518 <siprintf>:
 8008518:	b40e      	push	{r1, r2, r3}
 800851a:	b500      	push	{lr}
 800851c:	b09c      	sub	sp, #112	@ 0x70
 800851e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008520:	9002      	str	r0, [sp, #8]
 8008522:	9006      	str	r0, [sp, #24]
 8008524:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008528:	4809      	ldr	r0, [pc, #36]	@ (8008550 <siprintf+0x38>)
 800852a:	9107      	str	r1, [sp, #28]
 800852c:	9104      	str	r1, [sp, #16]
 800852e:	4909      	ldr	r1, [pc, #36]	@ (8008554 <siprintf+0x3c>)
 8008530:	f853 2b04 	ldr.w	r2, [r3], #4
 8008534:	9105      	str	r1, [sp, #20]
 8008536:	6800      	ldr	r0, [r0, #0]
 8008538:	9301      	str	r3, [sp, #4]
 800853a:	a902      	add	r1, sp, #8
 800853c:	f002 fbe2 	bl	800ad04 <_svfiprintf_r>
 8008540:	9b02      	ldr	r3, [sp, #8]
 8008542:	2200      	movs	r2, #0
 8008544:	701a      	strb	r2, [r3, #0]
 8008546:	b01c      	add	sp, #112	@ 0x70
 8008548:	f85d eb04 	ldr.w	lr, [sp], #4
 800854c:	b003      	add	sp, #12
 800854e:	4770      	bx	lr
 8008550:	20000064 	.word	0x20000064
 8008554:	ffff0208 	.word	0xffff0208

08008558 <__sread>:
 8008558:	b510      	push	{r4, lr}
 800855a:	460c      	mov	r4, r1
 800855c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008560:	f000 f86c 	bl	800863c <_read_r>
 8008564:	2800      	cmp	r0, #0
 8008566:	bfab      	itete	ge
 8008568:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800856a:	89a3      	ldrhlt	r3, [r4, #12]
 800856c:	181b      	addge	r3, r3, r0
 800856e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008572:	bfac      	ite	ge
 8008574:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008576:	81a3      	strhlt	r3, [r4, #12]
 8008578:	bd10      	pop	{r4, pc}

0800857a <__swrite>:
 800857a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800857e:	461f      	mov	r7, r3
 8008580:	898b      	ldrh	r3, [r1, #12]
 8008582:	05db      	lsls	r3, r3, #23
 8008584:	4605      	mov	r5, r0
 8008586:	460c      	mov	r4, r1
 8008588:	4616      	mov	r6, r2
 800858a:	d505      	bpl.n	8008598 <__swrite+0x1e>
 800858c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008590:	2302      	movs	r3, #2
 8008592:	2200      	movs	r2, #0
 8008594:	f000 f840 	bl	8008618 <_lseek_r>
 8008598:	89a3      	ldrh	r3, [r4, #12]
 800859a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800859e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085a2:	81a3      	strh	r3, [r4, #12]
 80085a4:	4632      	mov	r2, r6
 80085a6:	463b      	mov	r3, r7
 80085a8:	4628      	mov	r0, r5
 80085aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085ae:	f000 b857 	b.w	8008660 <_write_r>

080085b2 <__sseek>:
 80085b2:	b510      	push	{r4, lr}
 80085b4:	460c      	mov	r4, r1
 80085b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ba:	f000 f82d 	bl	8008618 <_lseek_r>
 80085be:	1c43      	adds	r3, r0, #1
 80085c0:	89a3      	ldrh	r3, [r4, #12]
 80085c2:	bf15      	itete	ne
 80085c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80085c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80085ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80085ce:	81a3      	strheq	r3, [r4, #12]
 80085d0:	bf18      	it	ne
 80085d2:	81a3      	strhne	r3, [r4, #12]
 80085d4:	bd10      	pop	{r4, pc}

080085d6 <__sclose>:
 80085d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085da:	f000 b80d 	b.w	80085f8 <_close_r>

080085de <memset>:
 80085de:	4402      	add	r2, r0
 80085e0:	4603      	mov	r3, r0
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d100      	bne.n	80085e8 <memset+0xa>
 80085e6:	4770      	bx	lr
 80085e8:	f803 1b01 	strb.w	r1, [r3], #1
 80085ec:	e7f9      	b.n	80085e2 <memset+0x4>
	...

080085f0 <_localeconv_r>:
 80085f0:	4800      	ldr	r0, [pc, #0]	@ (80085f4 <_localeconv_r+0x4>)
 80085f2:	4770      	bx	lr
 80085f4:	200001a4 	.word	0x200001a4

080085f8 <_close_r>:
 80085f8:	b538      	push	{r3, r4, r5, lr}
 80085fa:	4d06      	ldr	r5, [pc, #24]	@ (8008614 <_close_r+0x1c>)
 80085fc:	2300      	movs	r3, #0
 80085fe:	4604      	mov	r4, r0
 8008600:	4608      	mov	r0, r1
 8008602:	602b      	str	r3, [r5, #0]
 8008604:	f7fa f9cd 	bl	80029a2 <_close>
 8008608:	1c43      	adds	r3, r0, #1
 800860a:	d102      	bne.n	8008612 <_close_r+0x1a>
 800860c:	682b      	ldr	r3, [r5, #0]
 800860e:	b103      	cbz	r3, 8008612 <_close_r+0x1a>
 8008610:	6023      	str	r3, [r4, #0]
 8008612:	bd38      	pop	{r3, r4, r5, pc}
 8008614:	200009a0 	.word	0x200009a0

08008618 <_lseek_r>:
 8008618:	b538      	push	{r3, r4, r5, lr}
 800861a:	4d07      	ldr	r5, [pc, #28]	@ (8008638 <_lseek_r+0x20>)
 800861c:	4604      	mov	r4, r0
 800861e:	4608      	mov	r0, r1
 8008620:	4611      	mov	r1, r2
 8008622:	2200      	movs	r2, #0
 8008624:	602a      	str	r2, [r5, #0]
 8008626:	461a      	mov	r2, r3
 8008628:	f7fa f9e2 	bl	80029f0 <_lseek>
 800862c:	1c43      	adds	r3, r0, #1
 800862e:	d102      	bne.n	8008636 <_lseek_r+0x1e>
 8008630:	682b      	ldr	r3, [r5, #0]
 8008632:	b103      	cbz	r3, 8008636 <_lseek_r+0x1e>
 8008634:	6023      	str	r3, [r4, #0]
 8008636:	bd38      	pop	{r3, r4, r5, pc}
 8008638:	200009a0 	.word	0x200009a0

0800863c <_read_r>:
 800863c:	b538      	push	{r3, r4, r5, lr}
 800863e:	4d07      	ldr	r5, [pc, #28]	@ (800865c <_read_r+0x20>)
 8008640:	4604      	mov	r4, r0
 8008642:	4608      	mov	r0, r1
 8008644:	4611      	mov	r1, r2
 8008646:	2200      	movs	r2, #0
 8008648:	602a      	str	r2, [r5, #0]
 800864a:	461a      	mov	r2, r3
 800864c:	f7fa f970 	bl	8002930 <_read>
 8008650:	1c43      	adds	r3, r0, #1
 8008652:	d102      	bne.n	800865a <_read_r+0x1e>
 8008654:	682b      	ldr	r3, [r5, #0]
 8008656:	b103      	cbz	r3, 800865a <_read_r+0x1e>
 8008658:	6023      	str	r3, [r4, #0]
 800865a:	bd38      	pop	{r3, r4, r5, pc}
 800865c:	200009a0 	.word	0x200009a0

08008660 <_write_r>:
 8008660:	b538      	push	{r3, r4, r5, lr}
 8008662:	4d07      	ldr	r5, [pc, #28]	@ (8008680 <_write_r+0x20>)
 8008664:	4604      	mov	r4, r0
 8008666:	4608      	mov	r0, r1
 8008668:	4611      	mov	r1, r2
 800866a:	2200      	movs	r2, #0
 800866c:	602a      	str	r2, [r5, #0]
 800866e:	461a      	mov	r2, r3
 8008670:	f7fa f97b 	bl	800296a <_write>
 8008674:	1c43      	adds	r3, r0, #1
 8008676:	d102      	bne.n	800867e <_write_r+0x1e>
 8008678:	682b      	ldr	r3, [r5, #0]
 800867a:	b103      	cbz	r3, 800867e <_write_r+0x1e>
 800867c:	6023      	str	r3, [r4, #0]
 800867e:	bd38      	pop	{r3, r4, r5, pc}
 8008680:	200009a0 	.word	0x200009a0

08008684 <__errno>:
 8008684:	4b01      	ldr	r3, [pc, #4]	@ (800868c <__errno+0x8>)
 8008686:	6818      	ldr	r0, [r3, #0]
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	20000064 	.word	0x20000064

08008690 <__libc_init_array>:
 8008690:	b570      	push	{r4, r5, r6, lr}
 8008692:	4d0d      	ldr	r5, [pc, #52]	@ (80086c8 <__libc_init_array+0x38>)
 8008694:	4c0d      	ldr	r4, [pc, #52]	@ (80086cc <__libc_init_array+0x3c>)
 8008696:	1b64      	subs	r4, r4, r5
 8008698:	10a4      	asrs	r4, r4, #2
 800869a:	2600      	movs	r6, #0
 800869c:	42a6      	cmp	r6, r4
 800869e:	d109      	bne.n	80086b4 <__libc_init_array+0x24>
 80086a0:	4d0b      	ldr	r5, [pc, #44]	@ (80086d0 <__libc_init_array+0x40>)
 80086a2:	4c0c      	ldr	r4, [pc, #48]	@ (80086d4 <__libc_init_array+0x44>)
 80086a4:	f003 fb72 	bl	800bd8c <_init>
 80086a8:	1b64      	subs	r4, r4, r5
 80086aa:	10a4      	asrs	r4, r4, #2
 80086ac:	2600      	movs	r6, #0
 80086ae:	42a6      	cmp	r6, r4
 80086b0:	d105      	bne.n	80086be <__libc_init_array+0x2e>
 80086b2:	bd70      	pop	{r4, r5, r6, pc}
 80086b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80086b8:	4798      	blx	r3
 80086ba:	3601      	adds	r6, #1
 80086bc:	e7ee      	b.n	800869c <__libc_init_array+0xc>
 80086be:	f855 3b04 	ldr.w	r3, [r5], #4
 80086c2:	4798      	blx	r3
 80086c4:	3601      	adds	r6, #1
 80086c6:	e7f2      	b.n	80086ae <__libc_init_array+0x1e>
 80086c8:	0800dd8c 	.word	0x0800dd8c
 80086cc:	0800dd8c 	.word	0x0800dd8c
 80086d0:	0800dd8c 	.word	0x0800dd8c
 80086d4:	0800dd90 	.word	0x0800dd90

080086d8 <__retarget_lock_init_recursive>:
 80086d8:	4770      	bx	lr

080086da <__retarget_lock_acquire_recursive>:
 80086da:	4770      	bx	lr

080086dc <__retarget_lock_release_recursive>:
 80086dc:	4770      	bx	lr

080086de <memcpy>:
 80086de:	440a      	add	r2, r1
 80086e0:	4291      	cmp	r1, r2
 80086e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80086e6:	d100      	bne.n	80086ea <memcpy+0xc>
 80086e8:	4770      	bx	lr
 80086ea:	b510      	push	{r4, lr}
 80086ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086f4:	4291      	cmp	r1, r2
 80086f6:	d1f9      	bne.n	80086ec <memcpy+0xe>
 80086f8:	bd10      	pop	{r4, pc}
	...

080086fc <nanf>:
 80086fc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008704 <nanf+0x8>
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	7fc00000 	.word	0x7fc00000

08008708 <__assert_func>:
 8008708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800870a:	4614      	mov	r4, r2
 800870c:	461a      	mov	r2, r3
 800870e:	4b09      	ldr	r3, [pc, #36]	@ (8008734 <__assert_func+0x2c>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4605      	mov	r5, r0
 8008714:	68d8      	ldr	r0, [r3, #12]
 8008716:	b954      	cbnz	r4, 800872e <__assert_func+0x26>
 8008718:	4b07      	ldr	r3, [pc, #28]	@ (8008738 <__assert_func+0x30>)
 800871a:	461c      	mov	r4, r3
 800871c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008720:	9100      	str	r1, [sp, #0]
 8008722:	462b      	mov	r3, r5
 8008724:	4905      	ldr	r1, [pc, #20]	@ (800873c <__assert_func+0x34>)
 8008726:	f002 fc95 	bl	800b054 <fiprintf>
 800872a:	f002 fce9 	bl	800b100 <abort>
 800872e:	4b04      	ldr	r3, [pc, #16]	@ (8008740 <__assert_func+0x38>)
 8008730:	e7f4      	b.n	800871c <__assert_func+0x14>
 8008732:	bf00      	nop
 8008734:	20000064 	.word	0x20000064
 8008738:	0800d9e3 	.word	0x0800d9e3
 800873c:	0800d9b5 	.word	0x0800d9b5
 8008740:	0800d9a8 	.word	0x0800d9a8

08008744 <quorem>:
 8008744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008748:	6903      	ldr	r3, [r0, #16]
 800874a:	690c      	ldr	r4, [r1, #16]
 800874c:	42a3      	cmp	r3, r4
 800874e:	4607      	mov	r7, r0
 8008750:	db7e      	blt.n	8008850 <quorem+0x10c>
 8008752:	3c01      	subs	r4, #1
 8008754:	f101 0814 	add.w	r8, r1, #20
 8008758:	00a3      	lsls	r3, r4, #2
 800875a:	f100 0514 	add.w	r5, r0, #20
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008764:	9301      	str	r3, [sp, #4]
 8008766:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800876a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800876e:	3301      	adds	r3, #1
 8008770:	429a      	cmp	r2, r3
 8008772:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008776:	fbb2 f6f3 	udiv	r6, r2, r3
 800877a:	d32e      	bcc.n	80087da <quorem+0x96>
 800877c:	f04f 0a00 	mov.w	sl, #0
 8008780:	46c4      	mov	ip, r8
 8008782:	46ae      	mov	lr, r5
 8008784:	46d3      	mov	fp, sl
 8008786:	f85c 3b04 	ldr.w	r3, [ip], #4
 800878a:	b298      	uxth	r0, r3
 800878c:	fb06 a000 	mla	r0, r6, r0, sl
 8008790:	0c02      	lsrs	r2, r0, #16
 8008792:	0c1b      	lsrs	r3, r3, #16
 8008794:	fb06 2303 	mla	r3, r6, r3, r2
 8008798:	f8de 2000 	ldr.w	r2, [lr]
 800879c:	b280      	uxth	r0, r0
 800879e:	b292      	uxth	r2, r2
 80087a0:	1a12      	subs	r2, r2, r0
 80087a2:	445a      	add	r2, fp
 80087a4:	f8de 0000 	ldr.w	r0, [lr]
 80087a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80087b2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80087b6:	b292      	uxth	r2, r2
 80087b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80087bc:	45e1      	cmp	r9, ip
 80087be:	f84e 2b04 	str.w	r2, [lr], #4
 80087c2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80087c6:	d2de      	bcs.n	8008786 <quorem+0x42>
 80087c8:	9b00      	ldr	r3, [sp, #0]
 80087ca:	58eb      	ldr	r3, [r5, r3]
 80087cc:	b92b      	cbnz	r3, 80087da <quorem+0x96>
 80087ce:	9b01      	ldr	r3, [sp, #4]
 80087d0:	3b04      	subs	r3, #4
 80087d2:	429d      	cmp	r5, r3
 80087d4:	461a      	mov	r2, r3
 80087d6:	d32f      	bcc.n	8008838 <quorem+0xf4>
 80087d8:	613c      	str	r4, [r7, #16]
 80087da:	4638      	mov	r0, r7
 80087dc:	f001 f9c4 	bl	8009b68 <__mcmp>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	db25      	blt.n	8008830 <quorem+0xec>
 80087e4:	4629      	mov	r1, r5
 80087e6:	2000      	movs	r0, #0
 80087e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80087ec:	f8d1 c000 	ldr.w	ip, [r1]
 80087f0:	fa1f fe82 	uxth.w	lr, r2
 80087f4:	fa1f f38c 	uxth.w	r3, ip
 80087f8:	eba3 030e 	sub.w	r3, r3, lr
 80087fc:	4403      	add	r3, r0
 80087fe:	0c12      	lsrs	r2, r2, #16
 8008800:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008804:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008808:	b29b      	uxth	r3, r3
 800880a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800880e:	45c1      	cmp	r9, r8
 8008810:	f841 3b04 	str.w	r3, [r1], #4
 8008814:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008818:	d2e6      	bcs.n	80087e8 <quorem+0xa4>
 800881a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800881e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008822:	b922      	cbnz	r2, 800882e <quorem+0xea>
 8008824:	3b04      	subs	r3, #4
 8008826:	429d      	cmp	r5, r3
 8008828:	461a      	mov	r2, r3
 800882a:	d30b      	bcc.n	8008844 <quorem+0x100>
 800882c:	613c      	str	r4, [r7, #16]
 800882e:	3601      	adds	r6, #1
 8008830:	4630      	mov	r0, r6
 8008832:	b003      	add	sp, #12
 8008834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008838:	6812      	ldr	r2, [r2, #0]
 800883a:	3b04      	subs	r3, #4
 800883c:	2a00      	cmp	r2, #0
 800883e:	d1cb      	bne.n	80087d8 <quorem+0x94>
 8008840:	3c01      	subs	r4, #1
 8008842:	e7c6      	b.n	80087d2 <quorem+0x8e>
 8008844:	6812      	ldr	r2, [r2, #0]
 8008846:	3b04      	subs	r3, #4
 8008848:	2a00      	cmp	r2, #0
 800884a:	d1ef      	bne.n	800882c <quorem+0xe8>
 800884c:	3c01      	subs	r4, #1
 800884e:	e7ea      	b.n	8008826 <quorem+0xe2>
 8008850:	2000      	movs	r0, #0
 8008852:	e7ee      	b.n	8008832 <quorem+0xee>
 8008854:	0000      	movs	r0, r0
	...

08008858 <_dtoa_r>:
 8008858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800885c:	69c7      	ldr	r7, [r0, #28]
 800885e:	b099      	sub	sp, #100	@ 0x64
 8008860:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008864:	ec55 4b10 	vmov	r4, r5, d0
 8008868:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800886a:	9109      	str	r1, [sp, #36]	@ 0x24
 800886c:	4683      	mov	fp, r0
 800886e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008870:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008872:	b97f      	cbnz	r7, 8008894 <_dtoa_r+0x3c>
 8008874:	2010      	movs	r0, #16
 8008876:	f000 fdfd 	bl	8009474 <malloc>
 800887a:	4602      	mov	r2, r0
 800887c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008880:	b920      	cbnz	r0, 800888c <_dtoa_r+0x34>
 8008882:	4ba7      	ldr	r3, [pc, #668]	@ (8008b20 <_dtoa_r+0x2c8>)
 8008884:	21ef      	movs	r1, #239	@ 0xef
 8008886:	48a7      	ldr	r0, [pc, #668]	@ (8008b24 <_dtoa_r+0x2cc>)
 8008888:	f7ff ff3e 	bl	8008708 <__assert_func>
 800888c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008890:	6007      	str	r7, [r0, #0]
 8008892:	60c7      	str	r7, [r0, #12]
 8008894:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008898:	6819      	ldr	r1, [r3, #0]
 800889a:	b159      	cbz	r1, 80088b4 <_dtoa_r+0x5c>
 800889c:	685a      	ldr	r2, [r3, #4]
 800889e:	604a      	str	r2, [r1, #4]
 80088a0:	2301      	movs	r3, #1
 80088a2:	4093      	lsls	r3, r2
 80088a4:	608b      	str	r3, [r1, #8]
 80088a6:	4658      	mov	r0, fp
 80088a8:	f000 feda 	bl	8009660 <_Bfree>
 80088ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80088b0:	2200      	movs	r2, #0
 80088b2:	601a      	str	r2, [r3, #0]
 80088b4:	1e2b      	subs	r3, r5, #0
 80088b6:	bfb9      	ittee	lt
 80088b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80088bc:	9303      	strlt	r3, [sp, #12]
 80088be:	2300      	movge	r3, #0
 80088c0:	6033      	strge	r3, [r6, #0]
 80088c2:	9f03      	ldr	r7, [sp, #12]
 80088c4:	4b98      	ldr	r3, [pc, #608]	@ (8008b28 <_dtoa_r+0x2d0>)
 80088c6:	bfbc      	itt	lt
 80088c8:	2201      	movlt	r2, #1
 80088ca:	6032      	strlt	r2, [r6, #0]
 80088cc:	43bb      	bics	r3, r7
 80088ce:	d112      	bne.n	80088f6 <_dtoa_r+0x9e>
 80088d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80088d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80088d6:	6013      	str	r3, [r2, #0]
 80088d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80088dc:	4323      	orrs	r3, r4
 80088de:	f000 854d 	beq.w	800937c <_dtoa_r+0xb24>
 80088e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80088e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008b3c <_dtoa_r+0x2e4>
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 854f 	beq.w	800938c <_dtoa_r+0xb34>
 80088ee:	f10a 0303 	add.w	r3, sl, #3
 80088f2:	f000 bd49 	b.w	8009388 <_dtoa_r+0xb30>
 80088f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80088fa:	2200      	movs	r2, #0
 80088fc:	ec51 0b17 	vmov	r0, r1, d7
 8008900:	2300      	movs	r3, #0
 8008902:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008906:	f7f8 f8ef 	bl	8000ae8 <__aeabi_dcmpeq>
 800890a:	4680      	mov	r8, r0
 800890c:	b158      	cbz	r0, 8008926 <_dtoa_r+0xce>
 800890e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008910:	2301      	movs	r3, #1
 8008912:	6013      	str	r3, [r2, #0]
 8008914:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008916:	b113      	cbz	r3, 800891e <_dtoa_r+0xc6>
 8008918:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800891a:	4b84      	ldr	r3, [pc, #528]	@ (8008b2c <_dtoa_r+0x2d4>)
 800891c:	6013      	str	r3, [r2, #0]
 800891e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008b40 <_dtoa_r+0x2e8>
 8008922:	f000 bd33 	b.w	800938c <_dtoa_r+0xb34>
 8008926:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800892a:	aa16      	add	r2, sp, #88	@ 0x58
 800892c:	a917      	add	r1, sp, #92	@ 0x5c
 800892e:	4658      	mov	r0, fp
 8008930:	f001 fa3a 	bl	8009da8 <__d2b>
 8008934:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008938:	4681      	mov	r9, r0
 800893a:	2e00      	cmp	r6, #0
 800893c:	d077      	beq.n	8008a2e <_dtoa_r+0x1d6>
 800893e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008940:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008948:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800894c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008950:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008954:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008958:	4619      	mov	r1, r3
 800895a:	2200      	movs	r2, #0
 800895c:	4b74      	ldr	r3, [pc, #464]	@ (8008b30 <_dtoa_r+0x2d8>)
 800895e:	f7f7 fca3 	bl	80002a8 <__aeabi_dsub>
 8008962:	a369      	add	r3, pc, #420	@ (adr r3, 8008b08 <_dtoa_r+0x2b0>)
 8008964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008968:	f7f7 fe56 	bl	8000618 <__aeabi_dmul>
 800896c:	a368      	add	r3, pc, #416	@ (adr r3, 8008b10 <_dtoa_r+0x2b8>)
 800896e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008972:	f7f7 fc9b 	bl	80002ac <__adddf3>
 8008976:	4604      	mov	r4, r0
 8008978:	4630      	mov	r0, r6
 800897a:	460d      	mov	r5, r1
 800897c:	f7f7 fde2 	bl	8000544 <__aeabi_i2d>
 8008980:	a365      	add	r3, pc, #404	@ (adr r3, 8008b18 <_dtoa_r+0x2c0>)
 8008982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008986:	f7f7 fe47 	bl	8000618 <__aeabi_dmul>
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	4620      	mov	r0, r4
 8008990:	4629      	mov	r1, r5
 8008992:	f7f7 fc8b 	bl	80002ac <__adddf3>
 8008996:	4604      	mov	r4, r0
 8008998:	460d      	mov	r5, r1
 800899a:	f7f8 f8ed 	bl	8000b78 <__aeabi_d2iz>
 800899e:	2200      	movs	r2, #0
 80089a0:	4607      	mov	r7, r0
 80089a2:	2300      	movs	r3, #0
 80089a4:	4620      	mov	r0, r4
 80089a6:	4629      	mov	r1, r5
 80089a8:	f7f8 f8a8 	bl	8000afc <__aeabi_dcmplt>
 80089ac:	b140      	cbz	r0, 80089c0 <_dtoa_r+0x168>
 80089ae:	4638      	mov	r0, r7
 80089b0:	f7f7 fdc8 	bl	8000544 <__aeabi_i2d>
 80089b4:	4622      	mov	r2, r4
 80089b6:	462b      	mov	r3, r5
 80089b8:	f7f8 f896 	bl	8000ae8 <__aeabi_dcmpeq>
 80089bc:	b900      	cbnz	r0, 80089c0 <_dtoa_r+0x168>
 80089be:	3f01      	subs	r7, #1
 80089c0:	2f16      	cmp	r7, #22
 80089c2:	d851      	bhi.n	8008a68 <_dtoa_r+0x210>
 80089c4:	4b5b      	ldr	r3, [pc, #364]	@ (8008b34 <_dtoa_r+0x2dc>)
 80089c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089d2:	f7f8 f893 	bl	8000afc <__aeabi_dcmplt>
 80089d6:	2800      	cmp	r0, #0
 80089d8:	d048      	beq.n	8008a6c <_dtoa_r+0x214>
 80089da:	3f01      	subs	r7, #1
 80089dc:	2300      	movs	r3, #0
 80089de:	9312      	str	r3, [sp, #72]	@ 0x48
 80089e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80089e2:	1b9b      	subs	r3, r3, r6
 80089e4:	1e5a      	subs	r2, r3, #1
 80089e6:	bf44      	itt	mi
 80089e8:	f1c3 0801 	rsbmi	r8, r3, #1
 80089ec:	2300      	movmi	r3, #0
 80089ee:	9208      	str	r2, [sp, #32]
 80089f0:	bf54      	ite	pl
 80089f2:	f04f 0800 	movpl.w	r8, #0
 80089f6:	9308      	strmi	r3, [sp, #32]
 80089f8:	2f00      	cmp	r7, #0
 80089fa:	db39      	blt.n	8008a70 <_dtoa_r+0x218>
 80089fc:	9b08      	ldr	r3, [sp, #32]
 80089fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008a00:	443b      	add	r3, r7
 8008a02:	9308      	str	r3, [sp, #32]
 8008a04:	2300      	movs	r3, #0
 8008a06:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a0a:	2b09      	cmp	r3, #9
 8008a0c:	d864      	bhi.n	8008ad8 <_dtoa_r+0x280>
 8008a0e:	2b05      	cmp	r3, #5
 8008a10:	bfc4      	itt	gt
 8008a12:	3b04      	subgt	r3, #4
 8008a14:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a18:	f1a3 0302 	sub.w	r3, r3, #2
 8008a1c:	bfcc      	ite	gt
 8008a1e:	2400      	movgt	r4, #0
 8008a20:	2401      	movle	r4, #1
 8008a22:	2b03      	cmp	r3, #3
 8008a24:	d863      	bhi.n	8008aee <_dtoa_r+0x296>
 8008a26:	e8df f003 	tbb	[pc, r3]
 8008a2a:	372a      	.short	0x372a
 8008a2c:	5535      	.short	0x5535
 8008a2e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008a32:	441e      	add	r6, r3
 8008a34:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008a38:	2b20      	cmp	r3, #32
 8008a3a:	bfc1      	itttt	gt
 8008a3c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008a40:	409f      	lslgt	r7, r3
 8008a42:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008a46:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008a4a:	bfd6      	itet	le
 8008a4c:	f1c3 0320 	rsble	r3, r3, #32
 8008a50:	ea47 0003 	orrgt.w	r0, r7, r3
 8008a54:	fa04 f003 	lslle.w	r0, r4, r3
 8008a58:	f7f7 fd64 	bl	8000524 <__aeabi_ui2d>
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008a62:	3e01      	subs	r6, #1
 8008a64:	9214      	str	r2, [sp, #80]	@ 0x50
 8008a66:	e777      	b.n	8008958 <_dtoa_r+0x100>
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e7b8      	b.n	80089de <_dtoa_r+0x186>
 8008a6c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008a6e:	e7b7      	b.n	80089e0 <_dtoa_r+0x188>
 8008a70:	427b      	negs	r3, r7
 8008a72:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a74:	2300      	movs	r3, #0
 8008a76:	eba8 0807 	sub.w	r8, r8, r7
 8008a7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a7c:	e7c4      	b.n	8008a08 <_dtoa_r+0x1b0>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	dc35      	bgt.n	8008af4 <_dtoa_r+0x29c>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	9307      	str	r3, [sp, #28]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a92:	e00b      	b.n	8008aac <_dtoa_r+0x254>
 8008a94:	2301      	movs	r3, #1
 8008a96:	e7f3      	b.n	8008a80 <_dtoa_r+0x228>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a9e:	18fb      	adds	r3, r7, r3
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	9307      	str	r3, [sp, #28]
 8008aa8:	bfb8      	it	lt
 8008aaa:	2301      	movlt	r3, #1
 8008aac:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	2204      	movs	r2, #4
 8008ab4:	f102 0514 	add.w	r5, r2, #20
 8008ab8:	429d      	cmp	r5, r3
 8008aba:	d91f      	bls.n	8008afc <_dtoa_r+0x2a4>
 8008abc:	6041      	str	r1, [r0, #4]
 8008abe:	4658      	mov	r0, fp
 8008ac0:	f000 fd8e 	bl	80095e0 <_Balloc>
 8008ac4:	4682      	mov	sl, r0
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	d13c      	bne.n	8008b44 <_dtoa_r+0x2ec>
 8008aca:	4b1b      	ldr	r3, [pc, #108]	@ (8008b38 <_dtoa_r+0x2e0>)
 8008acc:	4602      	mov	r2, r0
 8008ace:	f240 11af 	movw	r1, #431	@ 0x1af
 8008ad2:	e6d8      	b.n	8008886 <_dtoa_r+0x2e>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e7e0      	b.n	8008a9a <_dtoa_r+0x242>
 8008ad8:	2401      	movs	r4, #1
 8008ada:	2300      	movs	r3, #0
 8008adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ade:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	9307      	str	r3, [sp, #28]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	2312      	movs	r3, #18
 8008aec:	e7d0      	b.n	8008a90 <_dtoa_r+0x238>
 8008aee:	2301      	movs	r3, #1
 8008af0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008af2:	e7f5      	b.n	8008ae0 <_dtoa_r+0x288>
 8008af4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008af6:	9300      	str	r3, [sp, #0]
 8008af8:	9307      	str	r3, [sp, #28]
 8008afa:	e7d7      	b.n	8008aac <_dtoa_r+0x254>
 8008afc:	3101      	adds	r1, #1
 8008afe:	0052      	lsls	r2, r2, #1
 8008b00:	e7d8      	b.n	8008ab4 <_dtoa_r+0x25c>
 8008b02:	bf00      	nop
 8008b04:	f3af 8000 	nop.w
 8008b08:	636f4361 	.word	0x636f4361
 8008b0c:	3fd287a7 	.word	0x3fd287a7
 8008b10:	8b60c8b3 	.word	0x8b60c8b3
 8008b14:	3fc68a28 	.word	0x3fc68a28
 8008b18:	509f79fb 	.word	0x509f79fb
 8008b1c:	3fd34413 	.word	0x3fd34413
 8008b20:	0800d900 	.word	0x0800d900
 8008b24:	0800d9f1 	.word	0x0800d9f1
 8008b28:	7ff00000 	.word	0x7ff00000
 8008b2c:	0800d980 	.word	0x0800d980
 8008b30:	3ff80000 	.word	0x3ff80000
 8008b34:	0800dae8 	.word	0x0800dae8
 8008b38:	0800da49 	.word	0x0800da49
 8008b3c:	0800d9ed 	.word	0x0800d9ed
 8008b40:	0800d97f 	.word	0x0800d97f
 8008b44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b48:	6018      	str	r0, [r3, #0]
 8008b4a:	9b07      	ldr	r3, [sp, #28]
 8008b4c:	2b0e      	cmp	r3, #14
 8008b4e:	f200 80a4 	bhi.w	8008c9a <_dtoa_r+0x442>
 8008b52:	2c00      	cmp	r4, #0
 8008b54:	f000 80a1 	beq.w	8008c9a <_dtoa_r+0x442>
 8008b58:	2f00      	cmp	r7, #0
 8008b5a:	dd33      	ble.n	8008bc4 <_dtoa_r+0x36c>
 8008b5c:	4bad      	ldr	r3, [pc, #692]	@ (8008e14 <_dtoa_r+0x5bc>)
 8008b5e:	f007 020f 	and.w	r2, r7, #15
 8008b62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b66:	ed93 7b00 	vldr	d7, [r3]
 8008b6a:	05f8      	lsls	r0, r7, #23
 8008b6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008b70:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008b74:	d516      	bpl.n	8008ba4 <_dtoa_r+0x34c>
 8008b76:	4ba8      	ldr	r3, [pc, #672]	@ (8008e18 <_dtoa_r+0x5c0>)
 8008b78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b80:	f7f7 fe74 	bl	800086c <__aeabi_ddiv>
 8008b84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b88:	f004 040f 	and.w	r4, r4, #15
 8008b8c:	2603      	movs	r6, #3
 8008b8e:	4da2      	ldr	r5, [pc, #648]	@ (8008e18 <_dtoa_r+0x5c0>)
 8008b90:	b954      	cbnz	r4, 8008ba8 <_dtoa_r+0x350>
 8008b92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b9a:	f7f7 fe67 	bl	800086c <__aeabi_ddiv>
 8008b9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ba2:	e028      	b.n	8008bf6 <_dtoa_r+0x39e>
 8008ba4:	2602      	movs	r6, #2
 8008ba6:	e7f2      	b.n	8008b8e <_dtoa_r+0x336>
 8008ba8:	07e1      	lsls	r1, r4, #31
 8008baa:	d508      	bpl.n	8008bbe <_dtoa_r+0x366>
 8008bac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008bb4:	f7f7 fd30 	bl	8000618 <__aeabi_dmul>
 8008bb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bbc:	3601      	adds	r6, #1
 8008bbe:	1064      	asrs	r4, r4, #1
 8008bc0:	3508      	adds	r5, #8
 8008bc2:	e7e5      	b.n	8008b90 <_dtoa_r+0x338>
 8008bc4:	f000 80d2 	beq.w	8008d6c <_dtoa_r+0x514>
 8008bc8:	427c      	negs	r4, r7
 8008bca:	4b92      	ldr	r3, [pc, #584]	@ (8008e14 <_dtoa_r+0x5bc>)
 8008bcc:	4d92      	ldr	r5, [pc, #584]	@ (8008e18 <_dtoa_r+0x5c0>)
 8008bce:	f004 020f 	and.w	r2, r4, #15
 8008bd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bde:	f7f7 fd1b 	bl	8000618 <__aeabi_dmul>
 8008be2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008be6:	1124      	asrs	r4, r4, #4
 8008be8:	2300      	movs	r3, #0
 8008bea:	2602      	movs	r6, #2
 8008bec:	2c00      	cmp	r4, #0
 8008bee:	f040 80b2 	bne.w	8008d56 <_dtoa_r+0x4fe>
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1d3      	bne.n	8008b9e <_dtoa_r+0x346>
 8008bf6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008bf8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f000 80b7 	beq.w	8008d70 <_dtoa_r+0x518>
 8008c02:	4b86      	ldr	r3, [pc, #536]	@ (8008e1c <_dtoa_r+0x5c4>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	4620      	mov	r0, r4
 8008c08:	4629      	mov	r1, r5
 8008c0a:	f7f7 ff77 	bl	8000afc <__aeabi_dcmplt>
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	f000 80ae 	beq.w	8008d70 <_dtoa_r+0x518>
 8008c14:	9b07      	ldr	r3, [sp, #28]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f000 80aa 	beq.w	8008d70 <_dtoa_r+0x518>
 8008c1c:	9b00      	ldr	r3, [sp, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	dd37      	ble.n	8008c92 <_dtoa_r+0x43a>
 8008c22:	1e7b      	subs	r3, r7, #1
 8008c24:	9304      	str	r3, [sp, #16]
 8008c26:	4620      	mov	r0, r4
 8008c28:	4b7d      	ldr	r3, [pc, #500]	@ (8008e20 <_dtoa_r+0x5c8>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	4629      	mov	r1, r5
 8008c2e:	f7f7 fcf3 	bl	8000618 <__aeabi_dmul>
 8008c32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c36:	9c00      	ldr	r4, [sp, #0]
 8008c38:	3601      	adds	r6, #1
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	f7f7 fc82 	bl	8000544 <__aeabi_i2d>
 8008c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c44:	f7f7 fce8 	bl	8000618 <__aeabi_dmul>
 8008c48:	4b76      	ldr	r3, [pc, #472]	@ (8008e24 <_dtoa_r+0x5cc>)
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f7f7 fb2e 	bl	80002ac <__adddf3>
 8008c50:	4605      	mov	r5, r0
 8008c52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008c56:	2c00      	cmp	r4, #0
 8008c58:	f040 808d 	bne.w	8008d76 <_dtoa_r+0x51e>
 8008c5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c60:	4b71      	ldr	r3, [pc, #452]	@ (8008e28 <_dtoa_r+0x5d0>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	f7f7 fb20 	bl	80002a8 <__aeabi_dsub>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c70:	462a      	mov	r2, r5
 8008c72:	4633      	mov	r3, r6
 8008c74:	f7f7 ff60 	bl	8000b38 <__aeabi_dcmpgt>
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	f040 828b 	bne.w	8009194 <_dtoa_r+0x93c>
 8008c7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c82:	462a      	mov	r2, r5
 8008c84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008c88:	f7f7 ff38 	bl	8000afc <__aeabi_dcmplt>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	f040 8128 	bne.w	8008ee2 <_dtoa_r+0x68a>
 8008c92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008c96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008c9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f2c0 815a 	blt.w	8008f56 <_dtoa_r+0x6fe>
 8008ca2:	2f0e      	cmp	r7, #14
 8008ca4:	f300 8157 	bgt.w	8008f56 <_dtoa_r+0x6fe>
 8008ca8:	4b5a      	ldr	r3, [pc, #360]	@ (8008e14 <_dtoa_r+0x5bc>)
 8008caa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008cae:	ed93 7b00 	vldr	d7, [r3]
 8008cb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	ed8d 7b00 	vstr	d7, [sp]
 8008cba:	da03      	bge.n	8008cc4 <_dtoa_r+0x46c>
 8008cbc:	9b07      	ldr	r3, [sp, #28]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	f340 8101 	ble.w	8008ec6 <_dtoa_r+0x66e>
 8008cc4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008cc8:	4656      	mov	r6, sl
 8008cca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cce:	4620      	mov	r0, r4
 8008cd0:	4629      	mov	r1, r5
 8008cd2:	f7f7 fdcb 	bl	800086c <__aeabi_ddiv>
 8008cd6:	f7f7 ff4f 	bl	8000b78 <__aeabi_d2iz>
 8008cda:	4680      	mov	r8, r0
 8008cdc:	f7f7 fc32 	bl	8000544 <__aeabi_i2d>
 8008ce0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ce4:	f7f7 fc98 	bl	8000618 <__aeabi_dmul>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	4620      	mov	r0, r4
 8008cee:	4629      	mov	r1, r5
 8008cf0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008cf4:	f7f7 fad8 	bl	80002a8 <__aeabi_dsub>
 8008cf8:	f806 4b01 	strb.w	r4, [r6], #1
 8008cfc:	9d07      	ldr	r5, [sp, #28]
 8008cfe:	eba6 040a 	sub.w	r4, r6, sl
 8008d02:	42a5      	cmp	r5, r4
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	f040 8117 	bne.w	8008f3a <_dtoa_r+0x6e2>
 8008d0c:	f7f7 face 	bl	80002ac <__adddf3>
 8008d10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d14:	4604      	mov	r4, r0
 8008d16:	460d      	mov	r5, r1
 8008d18:	f7f7 ff0e 	bl	8000b38 <__aeabi_dcmpgt>
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	f040 80f9 	bne.w	8008f14 <_dtoa_r+0x6bc>
 8008d22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d26:	4620      	mov	r0, r4
 8008d28:	4629      	mov	r1, r5
 8008d2a:	f7f7 fedd 	bl	8000ae8 <__aeabi_dcmpeq>
 8008d2e:	b118      	cbz	r0, 8008d38 <_dtoa_r+0x4e0>
 8008d30:	f018 0f01 	tst.w	r8, #1
 8008d34:	f040 80ee 	bne.w	8008f14 <_dtoa_r+0x6bc>
 8008d38:	4649      	mov	r1, r9
 8008d3a:	4658      	mov	r0, fp
 8008d3c:	f000 fc90 	bl	8009660 <_Bfree>
 8008d40:	2300      	movs	r3, #0
 8008d42:	7033      	strb	r3, [r6, #0]
 8008d44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d46:	3701      	adds	r7, #1
 8008d48:	601f      	str	r7, [r3, #0]
 8008d4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f000 831d 	beq.w	800938c <_dtoa_r+0xb34>
 8008d52:	601e      	str	r6, [r3, #0]
 8008d54:	e31a      	b.n	800938c <_dtoa_r+0xb34>
 8008d56:	07e2      	lsls	r2, r4, #31
 8008d58:	d505      	bpl.n	8008d66 <_dtoa_r+0x50e>
 8008d5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d5e:	f7f7 fc5b 	bl	8000618 <__aeabi_dmul>
 8008d62:	3601      	adds	r6, #1
 8008d64:	2301      	movs	r3, #1
 8008d66:	1064      	asrs	r4, r4, #1
 8008d68:	3508      	adds	r5, #8
 8008d6a:	e73f      	b.n	8008bec <_dtoa_r+0x394>
 8008d6c:	2602      	movs	r6, #2
 8008d6e:	e742      	b.n	8008bf6 <_dtoa_r+0x39e>
 8008d70:	9c07      	ldr	r4, [sp, #28]
 8008d72:	9704      	str	r7, [sp, #16]
 8008d74:	e761      	b.n	8008c3a <_dtoa_r+0x3e2>
 8008d76:	4b27      	ldr	r3, [pc, #156]	@ (8008e14 <_dtoa_r+0x5bc>)
 8008d78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d82:	4454      	add	r4, sl
 8008d84:	2900      	cmp	r1, #0
 8008d86:	d053      	beq.n	8008e30 <_dtoa_r+0x5d8>
 8008d88:	4928      	ldr	r1, [pc, #160]	@ (8008e2c <_dtoa_r+0x5d4>)
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	f7f7 fd6e 	bl	800086c <__aeabi_ddiv>
 8008d90:	4633      	mov	r3, r6
 8008d92:	462a      	mov	r2, r5
 8008d94:	f7f7 fa88 	bl	80002a8 <__aeabi_dsub>
 8008d98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008d9c:	4656      	mov	r6, sl
 8008d9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008da2:	f7f7 fee9 	bl	8000b78 <__aeabi_d2iz>
 8008da6:	4605      	mov	r5, r0
 8008da8:	f7f7 fbcc 	bl	8000544 <__aeabi_i2d>
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008db4:	f7f7 fa78 	bl	80002a8 <__aeabi_dsub>
 8008db8:	3530      	adds	r5, #48	@ 0x30
 8008dba:	4602      	mov	r2, r0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008dc2:	f806 5b01 	strb.w	r5, [r6], #1
 8008dc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008dca:	f7f7 fe97 	bl	8000afc <__aeabi_dcmplt>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d171      	bne.n	8008eb6 <_dtoa_r+0x65e>
 8008dd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dd6:	4911      	ldr	r1, [pc, #68]	@ (8008e1c <_dtoa_r+0x5c4>)
 8008dd8:	2000      	movs	r0, #0
 8008dda:	f7f7 fa65 	bl	80002a8 <__aeabi_dsub>
 8008dde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008de2:	f7f7 fe8b 	bl	8000afc <__aeabi_dcmplt>
 8008de6:	2800      	cmp	r0, #0
 8008de8:	f040 8095 	bne.w	8008f16 <_dtoa_r+0x6be>
 8008dec:	42a6      	cmp	r6, r4
 8008dee:	f43f af50 	beq.w	8008c92 <_dtoa_r+0x43a>
 8008df2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008df6:	4b0a      	ldr	r3, [pc, #40]	@ (8008e20 <_dtoa_r+0x5c8>)
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f7f7 fc0d 	bl	8000618 <__aeabi_dmul>
 8008dfe:	4b08      	ldr	r3, [pc, #32]	@ (8008e20 <_dtoa_r+0x5c8>)
 8008e00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e04:	2200      	movs	r2, #0
 8008e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e0a:	f7f7 fc05 	bl	8000618 <__aeabi_dmul>
 8008e0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e12:	e7c4      	b.n	8008d9e <_dtoa_r+0x546>
 8008e14:	0800dae8 	.word	0x0800dae8
 8008e18:	0800dac0 	.word	0x0800dac0
 8008e1c:	3ff00000 	.word	0x3ff00000
 8008e20:	40240000 	.word	0x40240000
 8008e24:	401c0000 	.word	0x401c0000
 8008e28:	40140000 	.word	0x40140000
 8008e2c:	3fe00000 	.word	0x3fe00000
 8008e30:	4631      	mov	r1, r6
 8008e32:	4628      	mov	r0, r5
 8008e34:	f7f7 fbf0 	bl	8000618 <__aeabi_dmul>
 8008e38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e3c:	9415      	str	r4, [sp, #84]	@ 0x54
 8008e3e:	4656      	mov	r6, sl
 8008e40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e44:	f7f7 fe98 	bl	8000b78 <__aeabi_d2iz>
 8008e48:	4605      	mov	r5, r0
 8008e4a:	f7f7 fb7b 	bl	8000544 <__aeabi_i2d>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	460b      	mov	r3, r1
 8008e52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e56:	f7f7 fa27 	bl	80002a8 <__aeabi_dsub>
 8008e5a:	3530      	adds	r5, #48	@ 0x30
 8008e5c:	f806 5b01 	strb.w	r5, [r6], #1
 8008e60:	4602      	mov	r2, r0
 8008e62:	460b      	mov	r3, r1
 8008e64:	42a6      	cmp	r6, r4
 8008e66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e6a:	f04f 0200 	mov.w	r2, #0
 8008e6e:	d124      	bne.n	8008eba <_dtoa_r+0x662>
 8008e70:	4bac      	ldr	r3, [pc, #688]	@ (8009124 <_dtoa_r+0x8cc>)
 8008e72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e76:	f7f7 fa19 	bl	80002ac <__adddf3>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e82:	f7f7 fe59 	bl	8000b38 <__aeabi_dcmpgt>
 8008e86:	2800      	cmp	r0, #0
 8008e88:	d145      	bne.n	8008f16 <_dtoa_r+0x6be>
 8008e8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e8e:	49a5      	ldr	r1, [pc, #660]	@ (8009124 <_dtoa_r+0x8cc>)
 8008e90:	2000      	movs	r0, #0
 8008e92:	f7f7 fa09 	bl	80002a8 <__aeabi_dsub>
 8008e96:	4602      	mov	r2, r0
 8008e98:	460b      	mov	r3, r1
 8008e9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e9e:	f7f7 fe2d 	bl	8000afc <__aeabi_dcmplt>
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	f43f aef5 	beq.w	8008c92 <_dtoa_r+0x43a>
 8008ea8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008eaa:	1e73      	subs	r3, r6, #1
 8008eac:	9315      	str	r3, [sp, #84]	@ 0x54
 8008eae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008eb2:	2b30      	cmp	r3, #48	@ 0x30
 8008eb4:	d0f8      	beq.n	8008ea8 <_dtoa_r+0x650>
 8008eb6:	9f04      	ldr	r7, [sp, #16]
 8008eb8:	e73e      	b.n	8008d38 <_dtoa_r+0x4e0>
 8008eba:	4b9b      	ldr	r3, [pc, #620]	@ (8009128 <_dtoa_r+0x8d0>)
 8008ebc:	f7f7 fbac 	bl	8000618 <__aeabi_dmul>
 8008ec0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ec4:	e7bc      	b.n	8008e40 <_dtoa_r+0x5e8>
 8008ec6:	d10c      	bne.n	8008ee2 <_dtoa_r+0x68a>
 8008ec8:	4b98      	ldr	r3, [pc, #608]	@ (800912c <_dtoa_r+0x8d4>)
 8008eca:	2200      	movs	r2, #0
 8008ecc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ed0:	f7f7 fba2 	bl	8000618 <__aeabi_dmul>
 8008ed4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ed8:	f7f7 fe24 	bl	8000b24 <__aeabi_dcmpge>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	f000 8157 	beq.w	8009190 <_dtoa_r+0x938>
 8008ee2:	2400      	movs	r4, #0
 8008ee4:	4625      	mov	r5, r4
 8008ee6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ee8:	43db      	mvns	r3, r3
 8008eea:	9304      	str	r3, [sp, #16]
 8008eec:	4656      	mov	r6, sl
 8008eee:	2700      	movs	r7, #0
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	4658      	mov	r0, fp
 8008ef4:	f000 fbb4 	bl	8009660 <_Bfree>
 8008ef8:	2d00      	cmp	r5, #0
 8008efa:	d0dc      	beq.n	8008eb6 <_dtoa_r+0x65e>
 8008efc:	b12f      	cbz	r7, 8008f0a <_dtoa_r+0x6b2>
 8008efe:	42af      	cmp	r7, r5
 8008f00:	d003      	beq.n	8008f0a <_dtoa_r+0x6b2>
 8008f02:	4639      	mov	r1, r7
 8008f04:	4658      	mov	r0, fp
 8008f06:	f000 fbab 	bl	8009660 <_Bfree>
 8008f0a:	4629      	mov	r1, r5
 8008f0c:	4658      	mov	r0, fp
 8008f0e:	f000 fba7 	bl	8009660 <_Bfree>
 8008f12:	e7d0      	b.n	8008eb6 <_dtoa_r+0x65e>
 8008f14:	9704      	str	r7, [sp, #16]
 8008f16:	4633      	mov	r3, r6
 8008f18:	461e      	mov	r6, r3
 8008f1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f1e:	2a39      	cmp	r2, #57	@ 0x39
 8008f20:	d107      	bne.n	8008f32 <_dtoa_r+0x6da>
 8008f22:	459a      	cmp	sl, r3
 8008f24:	d1f8      	bne.n	8008f18 <_dtoa_r+0x6c0>
 8008f26:	9a04      	ldr	r2, [sp, #16]
 8008f28:	3201      	adds	r2, #1
 8008f2a:	9204      	str	r2, [sp, #16]
 8008f2c:	2230      	movs	r2, #48	@ 0x30
 8008f2e:	f88a 2000 	strb.w	r2, [sl]
 8008f32:	781a      	ldrb	r2, [r3, #0]
 8008f34:	3201      	adds	r2, #1
 8008f36:	701a      	strb	r2, [r3, #0]
 8008f38:	e7bd      	b.n	8008eb6 <_dtoa_r+0x65e>
 8008f3a:	4b7b      	ldr	r3, [pc, #492]	@ (8009128 <_dtoa_r+0x8d0>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f7f7 fb6b 	bl	8000618 <__aeabi_dmul>
 8008f42:	2200      	movs	r2, #0
 8008f44:	2300      	movs	r3, #0
 8008f46:	4604      	mov	r4, r0
 8008f48:	460d      	mov	r5, r1
 8008f4a:	f7f7 fdcd 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	f43f aebb 	beq.w	8008cca <_dtoa_r+0x472>
 8008f54:	e6f0      	b.n	8008d38 <_dtoa_r+0x4e0>
 8008f56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008f58:	2a00      	cmp	r2, #0
 8008f5a:	f000 80db 	beq.w	8009114 <_dtoa_r+0x8bc>
 8008f5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f60:	2a01      	cmp	r2, #1
 8008f62:	f300 80bf 	bgt.w	80090e4 <_dtoa_r+0x88c>
 8008f66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008f68:	2a00      	cmp	r2, #0
 8008f6a:	f000 80b7 	beq.w	80090dc <_dtoa_r+0x884>
 8008f6e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008f72:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f74:	4646      	mov	r6, r8
 8008f76:	9a08      	ldr	r2, [sp, #32]
 8008f78:	2101      	movs	r1, #1
 8008f7a:	441a      	add	r2, r3
 8008f7c:	4658      	mov	r0, fp
 8008f7e:	4498      	add	r8, r3
 8008f80:	9208      	str	r2, [sp, #32]
 8008f82:	f000 fc6b 	bl	800985c <__i2b>
 8008f86:	4605      	mov	r5, r0
 8008f88:	b15e      	cbz	r6, 8008fa2 <_dtoa_r+0x74a>
 8008f8a:	9b08      	ldr	r3, [sp, #32]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	dd08      	ble.n	8008fa2 <_dtoa_r+0x74a>
 8008f90:	42b3      	cmp	r3, r6
 8008f92:	9a08      	ldr	r2, [sp, #32]
 8008f94:	bfa8      	it	ge
 8008f96:	4633      	movge	r3, r6
 8008f98:	eba8 0803 	sub.w	r8, r8, r3
 8008f9c:	1af6      	subs	r6, r6, r3
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	9308      	str	r3, [sp, #32]
 8008fa2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fa4:	b1f3      	cbz	r3, 8008fe4 <_dtoa_r+0x78c>
 8008fa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f000 80b7 	beq.w	800911c <_dtoa_r+0x8c4>
 8008fae:	b18c      	cbz	r4, 8008fd4 <_dtoa_r+0x77c>
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	4622      	mov	r2, r4
 8008fb4:	4658      	mov	r0, fp
 8008fb6:	f000 fd11 	bl	80099dc <__pow5mult>
 8008fba:	464a      	mov	r2, r9
 8008fbc:	4601      	mov	r1, r0
 8008fbe:	4605      	mov	r5, r0
 8008fc0:	4658      	mov	r0, fp
 8008fc2:	f000 fc61 	bl	8009888 <__multiply>
 8008fc6:	4649      	mov	r1, r9
 8008fc8:	9004      	str	r0, [sp, #16]
 8008fca:	4658      	mov	r0, fp
 8008fcc:	f000 fb48 	bl	8009660 <_Bfree>
 8008fd0:	9b04      	ldr	r3, [sp, #16]
 8008fd2:	4699      	mov	r9, r3
 8008fd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fd6:	1b1a      	subs	r2, r3, r4
 8008fd8:	d004      	beq.n	8008fe4 <_dtoa_r+0x78c>
 8008fda:	4649      	mov	r1, r9
 8008fdc:	4658      	mov	r0, fp
 8008fde:	f000 fcfd 	bl	80099dc <__pow5mult>
 8008fe2:	4681      	mov	r9, r0
 8008fe4:	2101      	movs	r1, #1
 8008fe6:	4658      	mov	r0, fp
 8008fe8:	f000 fc38 	bl	800985c <__i2b>
 8008fec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fee:	4604      	mov	r4, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 81cf 	beq.w	8009394 <_dtoa_r+0xb3c>
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	4601      	mov	r1, r0
 8008ffa:	4658      	mov	r0, fp
 8008ffc:	f000 fcee 	bl	80099dc <__pow5mult>
 8009000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009002:	2b01      	cmp	r3, #1
 8009004:	4604      	mov	r4, r0
 8009006:	f300 8095 	bgt.w	8009134 <_dtoa_r+0x8dc>
 800900a:	9b02      	ldr	r3, [sp, #8]
 800900c:	2b00      	cmp	r3, #0
 800900e:	f040 8087 	bne.w	8009120 <_dtoa_r+0x8c8>
 8009012:	9b03      	ldr	r3, [sp, #12]
 8009014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009018:	2b00      	cmp	r3, #0
 800901a:	f040 8089 	bne.w	8009130 <_dtoa_r+0x8d8>
 800901e:	9b03      	ldr	r3, [sp, #12]
 8009020:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009024:	0d1b      	lsrs	r3, r3, #20
 8009026:	051b      	lsls	r3, r3, #20
 8009028:	b12b      	cbz	r3, 8009036 <_dtoa_r+0x7de>
 800902a:	9b08      	ldr	r3, [sp, #32]
 800902c:	3301      	adds	r3, #1
 800902e:	9308      	str	r3, [sp, #32]
 8009030:	f108 0801 	add.w	r8, r8, #1
 8009034:	2301      	movs	r3, #1
 8009036:	930a      	str	r3, [sp, #40]	@ 0x28
 8009038:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800903a:	2b00      	cmp	r3, #0
 800903c:	f000 81b0 	beq.w	80093a0 <_dtoa_r+0xb48>
 8009040:	6923      	ldr	r3, [r4, #16]
 8009042:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009046:	6918      	ldr	r0, [r3, #16]
 8009048:	f000 fbbc 	bl	80097c4 <__hi0bits>
 800904c:	f1c0 0020 	rsb	r0, r0, #32
 8009050:	9b08      	ldr	r3, [sp, #32]
 8009052:	4418      	add	r0, r3
 8009054:	f010 001f 	ands.w	r0, r0, #31
 8009058:	d077      	beq.n	800914a <_dtoa_r+0x8f2>
 800905a:	f1c0 0320 	rsb	r3, r0, #32
 800905e:	2b04      	cmp	r3, #4
 8009060:	dd6b      	ble.n	800913a <_dtoa_r+0x8e2>
 8009062:	9b08      	ldr	r3, [sp, #32]
 8009064:	f1c0 001c 	rsb	r0, r0, #28
 8009068:	4403      	add	r3, r0
 800906a:	4480      	add	r8, r0
 800906c:	4406      	add	r6, r0
 800906e:	9308      	str	r3, [sp, #32]
 8009070:	f1b8 0f00 	cmp.w	r8, #0
 8009074:	dd05      	ble.n	8009082 <_dtoa_r+0x82a>
 8009076:	4649      	mov	r1, r9
 8009078:	4642      	mov	r2, r8
 800907a:	4658      	mov	r0, fp
 800907c:	f000 fd08 	bl	8009a90 <__lshift>
 8009080:	4681      	mov	r9, r0
 8009082:	9b08      	ldr	r3, [sp, #32]
 8009084:	2b00      	cmp	r3, #0
 8009086:	dd05      	ble.n	8009094 <_dtoa_r+0x83c>
 8009088:	4621      	mov	r1, r4
 800908a:	461a      	mov	r2, r3
 800908c:	4658      	mov	r0, fp
 800908e:	f000 fcff 	bl	8009a90 <__lshift>
 8009092:	4604      	mov	r4, r0
 8009094:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009096:	2b00      	cmp	r3, #0
 8009098:	d059      	beq.n	800914e <_dtoa_r+0x8f6>
 800909a:	4621      	mov	r1, r4
 800909c:	4648      	mov	r0, r9
 800909e:	f000 fd63 	bl	8009b68 <__mcmp>
 80090a2:	2800      	cmp	r0, #0
 80090a4:	da53      	bge.n	800914e <_dtoa_r+0x8f6>
 80090a6:	1e7b      	subs	r3, r7, #1
 80090a8:	9304      	str	r3, [sp, #16]
 80090aa:	4649      	mov	r1, r9
 80090ac:	2300      	movs	r3, #0
 80090ae:	220a      	movs	r2, #10
 80090b0:	4658      	mov	r0, fp
 80090b2:	f000 faf7 	bl	80096a4 <__multadd>
 80090b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090b8:	4681      	mov	r9, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f000 8172 	beq.w	80093a4 <_dtoa_r+0xb4c>
 80090c0:	2300      	movs	r3, #0
 80090c2:	4629      	mov	r1, r5
 80090c4:	220a      	movs	r2, #10
 80090c6:	4658      	mov	r0, fp
 80090c8:	f000 faec 	bl	80096a4 <__multadd>
 80090cc:	9b00      	ldr	r3, [sp, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	4605      	mov	r5, r0
 80090d2:	dc67      	bgt.n	80091a4 <_dtoa_r+0x94c>
 80090d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	dc41      	bgt.n	800915e <_dtoa_r+0x906>
 80090da:	e063      	b.n	80091a4 <_dtoa_r+0x94c>
 80090dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80090de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80090e2:	e746      	b.n	8008f72 <_dtoa_r+0x71a>
 80090e4:	9b07      	ldr	r3, [sp, #28]
 80090e6:	1e5c      	subs	r4, r3, #1
 80090e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090ea:	42a3      	cmp	r3, r4
 80090ec:	bfbf      	itttt	lt
 80090ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80090f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80090f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80090f4:	1ae3      	sublt	r3, r4, r3
 80090f6:	bfb4      	ite	lt
 80090f8:	18d2      	addlt	r2, r2, r3
 80090fa:	1b1c      	subge	r4, r3, r4
 80090fc:	9b07      	ldr	r3, [sp, #28]
 80090fe:	bfbc      	itt	lt
 8009100:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009102:	2400      	movlt	r4, #0
 8009104:	2b00      	cmp	r3, #0
 8009106:	bfb5      	itete	lt
 8009108:	eba8 0603 	sublt.w	r6, r8, r3
 800910c:	9b07      	ldrge	r3, [sp, #28]
 800910e:	2300      	movlt	r3, #0
 8009110:	4646      	movge	r6, r8
 8009112:	e730      	b.n	8008f76 <_dtoa_r+0x71e>
 8009114:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009116:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009118:	4646      	mov	r6, r8
 800911a:	e735      	b.n	8008f88 <_dtoa_r+0x730>
 800911c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800911e:	e75c      	b.n	8008fda <_dtoa_r+0x782>
 8009120:	2300      	movs	r3, #0
 8009122:	e788      	b.n	8009036 <_dtoa_r+0x7de>
 8009124:	3fe00000 	.word	0x3fe00000
 8009128:	40240000 	.word	0x40240000
 800912c:	40140000 	.word	0x40140000
 8009130:	9b02      	ldr	r3, [sp, #8]
 8009132:	e780      	b.n	8009036 <_dtoa_r+0x7de>
 8009134:	2300      	movs	r3, #0
 8009136:	930a      	str	r3, [sp, #40]	@ 0x28
 8009138:	e782      	b.n	8009040 <_dtoa_r+0x7e8>
 800913a:	d099      	beq.n	8009070 <_dtoa_r+0x818>
 800913c:	9a08      	ldr	r2, [sp, #32]
 800913e:	331c      	adds	r3, #28
 8009140:	441a      	add	r2, r3
 8009142:	4498      	add	r8, r3
 8009144:	441e      	add	r6, r3
 8009146:	9208      	str	r2, [sp, #32]
 8009148:	e792      	b.n	8009070 <_dtoa_r+0x818>
 800914a:	4603      	mov	r3, r0
 800914c:	e7f6      	b.n	800913c <_dtoa_r+0x8e4>
 800914e:	9b07      	ldr	r3, [sp, #28]
 8009150:	9704      	str	r7, [sp, #16]
 8009152:	2b00      	cmp	r3, #0
 8009154:	dc20      	bgt.n	8009198 <_dtoa_r+0x940>
 8009156:	9300      	str	r3, [sp, #0]
 8009158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800915a:	2b02      	cmp	r3, #2
 800915c:	dd1e      	ble.n	800919c <_dtoa_r+0x944>
 800915e:	9b00      	ldr	r3, [sp, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	f47f aec0 	bne.w	8008ee6 <_dtoa_r+0x68e>
 8009166:	4621      	mov	r1, r4
 8009168:	2205      	movs	r2, #5
 800916a:	4658      	mov	r0, fp
 800916c:	f000 fa9a 	bl	80096a4 <__multadd>
 8009170:	4601      	mov	r1, r0
 8009172:	4604      	mov	r4, r0
 8009174:	4648      	mov	r0, r9
 8009176:	f000 fcf7 	bl	8009b68 <__mcmp>
 800917a:	2800      	cmp	r0, #0
 800917c:	f77f aeb3 	ble.w	8008ee6 <_dtoa_r+0x68e>
 8009180:	4656      	mov	r6, sl
 8009182:	2331      	movs	r3, #49	@ 0x31
 8009184:	f806 3b01 	strb.w	r3, [r6], #1
 8009188:	9b04      	ldr	r3, [sp, #16]
 800918a:	3301      	adds	r3, #1
 800918c:	9304      	str	r3, [sp, #16]
 800918e:	e6ae      	b.n	8008eee <_dtoa_r+0x696>
 8009190:	9c07      	ldr	r4, [sp, #28]
 8009192:	9704      	str	r7, [sp, #16]
 8009194:	4625      	mov	r5, r4
 8009196:	e7f3      	b.n	8009180 <_dtoa_r+0x928>
 8009198:	9b07      	ldr	r3, [sp, #28]
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800919e:	2b00      	cmp	r3, #0
 80091a0:	f000 8104 	beq.w	80093ac <_dtoa_r+0xb54>
 80091a4:	2e00      	cmp	r6, #0
 80091a6:	dd05      	ble.n	80091b4 <_dtoa_r+0x95c>
 80091a8:	4629      	mov	r1, r5
 80091aa:	4632      	mov	r2, r6
 80091ac:	4658      	mov	r0, fp
 80091ae:	f000 fc6f 	bl	8009a90 <__lshift>
 80091b2:	4605      	mov	r5, r0
 80091b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d05a      	beq.n	8009270 <_dtoa_r+0xa18>
 80091ba:	6869      	ldr	r1, [r5, #4]
 80091bc:	4658      	mov	r0, fp
 80091be:	f000 fa0f 	bl	80095e0 <_Balloc>
 80091c2:	4606      	mov	r6, r0
 80091c4:	b928      	cbnz	r0, 80091d2 <_dtoa_r+0x97a>
 80091c6:	4b84      	ldr	r3, [pc, #528]	@ (80093d8 <_dtoa_r+0xb80>)
 80091c8:	4602      	mov	r2, r0
 80091ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80091ce:	f7ff bb5a 	b.w	8008886 <_dtoa_r+0x2e>
 80091d2:	692a      	ldr	r2, [r5, #16]
 80091d4:	3202      	adds	r2, #2
 80091d6:	0092      	lsls	r2, r2, #2
 80091d8:	f105 010c 	add.w	r1, r5, #12
 80091dc:	300c      	adds	r0, #12
 80091de:	f7ff fa7e 	bl	80086de <memcpy>
 80091e2:	2201      	movs	r2, #1
 80091e4:	4631      	mov	r1, r6
 80091e6:	4658      	mov	r0, fp
 80091e8:	f000 fc52 	bl	8009a90 <__lshift>
 80091ec:	f10a 0301 	add.w	r3, sl, #1
 80091f0:	9307      	str	r3, [sp, #28]
 80091f2:	9b00      	ldr	r3, [sp, #0]
 80091f4:	4453      	add	r3, sl
 80091f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091f8:	9b02      	ldr	r3, [sp, #8]
 80091fa:	f003 0301 	and.w	r3, r3, #1
 80091fe:	462f      	mov	r7, r5
 8009200:	930a      	str	r3, [sp, #40]	@ 0x28
 8009202:	4605      	mov	r5, r0
 8009204:	9b07      	ldr	r3, [sp, #28]
 8009206:	4621      	mov	r1, r4
 8009208:	3b01      	subs	r3, #1
 800920a:	4648      	mov	r0, r9
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	f7ff fa99 	bl	8008744 <quorem>
 8009212:	4639      	mov	r1, r7
 8009214:	9002      	str	r0, [sp, #8]
 8009216:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800921a:	4648      	mov	r0, r9
 800921c:	f000 fca4 	bl	8009b68 <__mcmp>
 8009220:	462a      	mov	r2, r5
 8009222:	9008      	str	r0, [sp, #32]
 8009224:	4621      	mov	r1, r4
 8009226:	4658      	mov	r0, fp
 8009228:	f000 fcba 	bl	8009ba0 <__mdiff>
 800922c:	68c2      	ldr	r2, [r0, #12]
 800922e:	4606      	mov	r6, r0
 8009230:	bb02      	cbnz	r2, 8009274 <_dtoa_r+0xa1c>
 8009232:	4601      	mov	r1, r0
 8009234:	4648      	mov	r0, r9
 8009236:	f000 fc97 	bl	8009b68 <__mcmp>
 800923a:	4602      	mov	r2, r0
 800923c:	4631      	mov	r1, r6
 800923e:	4658      	mov	r0, fp
 8009240:	920e      	str	r2, [sp, #56]	@ 0x38
 8009242:	f000 fa0d 	bl	8009660 <_Bfree>
 8009246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009248:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800924a:	9e07      	ldr	r6, [sp, #28]
 800924c:	ea43 0102 	orr.w	r1, r3, r2
 8009250:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009252:	4319      	orrs	r1, r3
 8009254:	d110      	bne.n	8009278 <_dtoa_r+0xa20>
 8009256:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800925a:	d029      	beq.n	80092b0 <_dtoa_r+0xa58>
 800925c:	9b08      	ldr	r3, [sp, #32]
 800925e:	2b00      	cmp	r3, #0
 8009260:	dd02      	ble.n	8009268 <_dtoa_r+0xa10>
 8009262:	9b02      	ldr	r3, [sp, #8]
 8009264:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009268:	9b00      	ldr	r3, [sp, #0]
 800926a:	f883 8000 	strb.w	r8, [r3]
 800926e:	e63f      	b.n	8008ef0 <_dtoa_r+0x698>
 8009270:	4628      	mov	r0, r5
 8009272:	e7bb      	b.n	80091ec <_dtoa_r+0x994>
 8009274:	2201      	movs	r2, #1
 8009276:	e7e1      	b.n	800923c <_dtoa_r+0x9e4>
 8009278:	9b08      	ldr	r3, [sp, #32]
 800927a:	2b00      	cmp	r3, #0
 800927c:	db04      	blt.n	8009288 <_dtoa_r+0xa30>
 800927e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009280:	430b      	orrs	r3, r1
 8009282:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009284:	430b      	orrs	r3, r1
 8009286:	d120      	bne.n	80092ca <_dtoa_r+0xa72>
 8009288:	2a00      	cmp	r2, #0
 800928a:	dded      	ble.n	8009268 <_dtoa_r+0xa10>
 800928c:	4649      	mov	r1, r9
 800928e:	2201      	movs	r2, #1
 8009290:	4658      	mov	r0, fp
 8009292:	f000 fbfd 	bl	8009a90 <__lshift>
 8009296:	4621      	mov	r1, r4
 8009298:	4681      	mov	r9, r0
 800929a:	f000 fc65 	bl	8009b68 <__mcmp>
 800929e:	2800      	cmp	r0, #0
 80092a0:	dc03      	bgt.n	80092aa <_dtoa_r+0xa52>
 80092a2:	d1e1      	bne.n	8009268 <_dtoa_r+0xa10>
 80092a4:	f018 0f01 	tst.w	r8, #1
 80092a8:	d0de      	beq.n	8009268 <_dtoa_r+0xa10>
 80092aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80092ae:	d1d8      	bne.n	8009262 <_dtoa_r+0xa0a>
 80092b0:	9a00      	ldr	r2, [sp, #0]
 80092b2:	2339      	movs	r3, #57	@ 0x39
 80092b4:	7013      	strb	r3, [r2, #0]
 80092b6:	4633      	mov	r3, r6
 80092b8:	461e      	mov	r6, r3
 80092ba:	3b01      	subs	r3, #1
 80092bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80092c0:	2a39      	cmp	r2, #57	@ 0x39
 80092c2:	d052      	beq.n	800936a <_dtoa_r+0xb12>
 80092c4:	3201      	adds	r2, #1
 80092c6:	701a      	strb	r2, [r3, #0]
 80092c8:	e612      	b.n	8008ef0 <_dtoa_r+0x698>
 80092ca:	2a00      	cmp	r2, #0
 80092cc:	dd07      	ble.n	80092de <_dtoa_r+0xa86>
 80092ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80092d2:	d0ed      	beq.n	80092b0 <_dtoa_r+0xa58>
 80092d4:	9a00      	ldr	r2, [sp, #0]
 80092d6:	f108 0301 	add.w	r3, r8, #1
 80092da:	7013      	strb	r3, [r2, #0]
 80092dc:	e608      	b.n	8008ef0 <_dtoa_r+0x698>
 80092de:	9b07      	ldr	r3, [sp, #28]
 80092e0:	9a07      	ldr	r2, [sp, #28]
 80092e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80092e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d028      	beq.n	800933e <_dtoa_r+0xae6>
 80092ec:	4649      	mov	r1, r9
 80092ee:	2300      	movs	r3, #0
 80092f0:	220a      	movs	r2, #10
 80092f2:	4658      	mov	r0, fp
 80092f4:	f000 f9d6 	bl	80096a4 <__multadd>
 80092f8:	42af      	cmp	r7, r5
 80092fa:	4681      	mov	r9, r0
 80092fc:	f04f 0300 	mov.w	r3, #0
 8009300:	f04f 020a 	mov.w	r2, #10
 8009304:	4639      	mov	r1, r7
 8009306:	4658      	mov	r0, fp
 8009308:	d107      	bne.n	800931a <_dtoa_r+0xac2>
 800930a:	f000 f9cb 	bl	80096a4 <__multadd>
 800930e:	4607      	mov	r7, r0
 8009310:	4605      	mov	r5, r0
 8009312:	9b07      	ldr	r3, [sp, #28]
 8009314:	3301      	adds	r3, #1
 8009316:	9307      	str	r3, [sp, #28]
 8009318:	e774      	b.n	8009204 <_dtoa_r+0x9ac>
 800931a:	f000 f9c3 	bl	80096a4 <__multadd>
 800931e:	4629      	mov	r1, r5
 8009320:	4607      	mov	r7, r0
 8009322:	2300      	movs	r3, #0
 8009324:	220a      	movs	r2, #10
 8009326:	4658      	mov	r0, fp
 8009328:	f000 f9bc 	bl	80096a4 <__multadd>
 800932c:	4605      	mov	r5, r0
 800932e:	e7f0      	b.n	8009312 <_dtoa_r+0xaba>
 8009330:	9b00      	ldr	r3, [sp, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	bfcc      	ite	gt
 8009336:	461e      	movgt	r6, r3
 8009338:	2601      	movle	r6, #1
 800933a:	4456      	add	r6, sl
 800933c:	2700      	movs	r7, #0
 800933e:	4649      	mov	r1, r9
 8009340:	2201      	movs	r2, #1
 8009342:	4658      	mov	r0, fp
 8009344:	f000 fba4 	bl	8009a90 <__lshift>
 8009348:	4621      	mov	r1, r4
 800934a:	4681      	mov	r9, r0
 800934c:	f000 fc0c 	bl	8009b68 <__mcmp>
 8009350:	2800      	cmp	r0, #0
 8009352:	dcb0      	bgt.n	80092b6 <_dtoa_r+0xa5e>
 8009354:	d102      	bne.n	800935c <_dtoa_r+0xb04>
 8009356:	f018 0f01 	tst.w	r8, #1
 800935a:	d1ac      	bne.n	80092b6 <_dtoa_r+0xa5e>
 800935c:	4633      	mov	r3, r6
 800935e:	461e      	mov	r6, r3
 8009360:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009364:	2a30      	cmp	r2, #48	@ 0x30
 8009366:	d0fa      	beq.n	800935e <_dtoa_r+0xb06>
 8009368:	e5c2      	b.n	8008ef0 <_dtoa_r+0x698>
 800936a:	459a      	cmp	sl, r3
 800936c:	d1a4      	bne.n	80092b8 <_dtoa_r+0xa60>
 800936e:	9b04      	ldr	r3, [sp, #16]
 8009370:	3301      	adds	r3, #1
 8009372:	9304      	str	r3, [sp, #16]
 8009374:	2331      	movs	r3, #49	@ 0x31
 8009376:	f88a 3000 	strb.w	r3, [sl]
 800937a:	e5b9      	b.n	8008ef0 <_dtoa_r+0x698>
 800937c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800937e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80093dc <_dtoa_r+0xb84>
 8009382:	b11b      	cbz	r3, 800938c <_dtoa_r+0xb34>
 8009384:	f10a 0308 	add.w	r3, sl, #8
 8009388:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800938a:	6013      	str	r3, [r2, #0]
 800938c:	4650      	mov	r0, sl
 800938e:	b019      	add	sp, #100	@ 0x64
 8009390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009396:	2b01      	cmp	r3, #1
 8009398:	f77f ae37 	ble.w	800900a <_dtoa_r+0x7b2>
 800939c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800939e:	930a      	str	r3, [sp, #40]	@ 0x28
 80093a0:	2001      	movs	r0, #1
 80093a2:	e655      	b.n	8009050 <_dtoa_r+0x7f8>
 80093a4:	9b00      	ldr	r3, [sp, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f77f aed6 	ble.w	8009158 <_dtoa_r+0x900>
 80093ac:	4656      	mov	r6, sl
 80093ae:	4621      	mov	r1, r4
 80093b0:	4648      	mov	r0, r9
 80093b2:	f7ff f9c7 	bl	8008744 <quorem>
 80093b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80093ba:	f806 8b01 	strb.w	r8, [r6], #1
 80093be:	9b00      	ldr	r3, [sp, #0]
 80093c0:	eba6 020a 	sub.w	r2, r6, sl
 80093c4:	4293      	cmp	r3, r2
 80093c6:	ddb3      	ble.n	8009330 <_dtoa_r+0xad8>
 80093c8:	4649      	mov	r1, r9
 80093ca:	2300      	movs	r3, #0
 80093cc:	220a      	movs	r2, #10
 80093ce:	4658      	mov	r0, fp
 80093d0:	f000 f968 	bl	80096a4 <__multadd>
 80093d4:	4681      	mov	r9, r0
 80093d6:	e7ea      	b.n	80093ae <_dtoa_r+0xb56>
 80093d8:	0800da49 	.word	0x0800da49
 80093dc:	0800d9e4 	.word	0x0800d9e4

080093e0 <_free_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4605      	mov	r5, r0
 80093e4:	2900      	cmp	r1, #0
 80093e6:	d041      	beq.n	800946c <_free_r+0x8c>
 80093e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093ec:	1f0c      	subs	r4, r1, #4
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	bfb8      	it	lt
 80093f2:	18e4      	addlt	r4, r4, r3
 80093f4:	f000 f8e8 	bl	80095c8 <__malloc_lock>
 80093f8:	4a1d      	ldr	r2, [pc, #116]	@ (8009470 <_free_r+0x90>)
 80093fa:	6813      	ldr	r3, [r2, #0]
 80093fc:	b933      	cbnz	r3, 800940c <_free_r+0x2c>
 80093fe:	6063      	str	r3, [r4, #4]
 8009400:	6014      	str	r4, [r2, #0]
 8009402:	4628      	mov	r0, r5
 8009404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009408:	f000 b8e4 	b.w	80095d4 <__malloc_unlock>
 800940c:	42a3      	cmp	r3, r4
 800940e:	d908      	bls.n	8009422 <_free_r+0x42>
 8009410:	6820      	ldr	r0, [r4, #0]
 8009412:	1821      	adds	r1, r4, r0
 8009414:	428b      	cmp	r3, r1
 8009416:	bf01      	itttt	eq
 8009418:	6819      	ldreq	r1, [r3, #0]
 800941a:	685b      	ldreq	r3, [r3, #4]
 800941c:	1809      	addeq	r1, r1, r0
 800941e:	6021      	streq	r1, [r4, #0]
 8009420:	e7ed      	b.n	80093fe <_free_r+0x1e>
 8009422:	461a      	mov	r2, r3
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	b10b      	cbz	r3, 800942c <_free_r+0x4c>
 8009428:	42a3      	cmp	r3, r4
 800942a:	d9fa      	bls.n	8009422 <_free_r+0x42>
 800942c:	6811      	ldr	r1, [r2, #0]
 800942e:	1850      	adds	r0, r2, r1
 8009430:	42a0      	cmp	r0, r4
 8009432:	d10b      	bne.n	800944c <_free_r+0x6c>
 8009434:	6820      	ldr	r0, [r4, #0]
 8009436:	4401      	add	r1, r0
 8009438:	1850      	adds	r0, r2, r1
 800943a:	4283      	cmp	r3, r0
 800943c:	6011      	str	r1, [r2, #0]
 800943e:	d1e0      	bne.n	8009402 <_free_r+0x22>
 8009440:	6818      	ldr	r0, [r3, #0]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	6053      	str	r3, [r2, #4]
 8009446:	4408      	add	r0, r1
 8009448:	6010      	str	r0, [r2, #0]
 800944a:	e7da      	b.n	8009402 <_free_r+0x22>
 800944c:	d902      	bls.n	8009454 <_free_r+0x74>
 800944e:	230c      	movs	r3, #12
 8009450:	602b      	str	r3, [r5, #0]
 8009452:	e7d6      	b.n	8009402 <_free_r+0x22>
 8009454:	6820      	ldr	r0, [r4, #0]
 8009456:	1821      	adds	r1, r4, r0
 8009458:	428b      	cmp	r3, r1
 800945a:	bf04      	itt	eq
 800945c:	6819      	ldreq	r1, [r3, #0]
 800945e:	685b      	ldreq	r3, [r3, #4]
 8009460:	6063      	str	r3, [r4, #4]
 8009462:	bf04      	itt	eq
 8009464:	1809      	addeq	r1, r1, r0
 8009466:	6021      	streq	r1, [r4, #0]
 8009468:	6054      	str	r4, [r2, #4]
 800946a:	e7ca      	b.n	8009402 <_free_r+0x22>
 800946c:	bd38      	pop	{r3, r4, r5, pc}
 800946e:	bf00      	nop
 8009470:	200009ac 	.word	0x200009ac

08009474 <malloc>:
 8009474:	4b02      	ldr	r3, [pc, #8]	@ (8009480 <malloc+0xc>)
 8009476:	4601      	mov	r1, r0
 8009478:	6818      	ldr	r0, [r3, #0]
 800947a:	f000 b825 	b.w	80094c8 <_malloc_r>
 800947e:	bf00      	nop
 8009480:	20000064 	.word	0x20000064

08009484 <sbrk_aligned>:
 8009484:	b570      	push	{r4, r5, r6, lr}
 8009486:	4e0f      	ldr	r6, [pc, #60]	@ (80094c4 <sbrk_aligned+0x40>)
 8009488:	460c      	mov	r4, r1
 800948a:	6831      	ldr	r1, [r6, #0]
 800948c:	4605      	mov	r5, r0
 800948e:	b911      	cbnz	r1, 8009496 <sbrk_aligned+0x12>
 8009490:	f001 fe1e 	bl	800b0d0 <_sbrk_r>
 8009494:	6030      	str	r0, [r6, #0]
 8009496:	4621      	mov	r1, r4
 8009498:	4628      	mov	r0, r5
 800949a:	f001 fe19 	bl	800b0d0 <_sbrk_r>
 800949e:	1c43      	adds	r3, r0, #1
 80094a0:	d103      	bne.n	80094aa <sbrk_aligned+0x26>
 80094a2:	f04f 34ff 	mov.w	r4, #4294967295
 80094a6:	4620      	mov	r0, r4
 80094a8:	bd70      	pop	{r4, r5, r6, pc}
 80094aa:	1cc4      	adds	r4, r0, #3
 80094ac:	f024 0403 	bic.w	r4, r4, #3
 80094b0:	42a0      	cmp	r0, r4
 80094b2:	d0f8      	beq.n	80094a6 <sbrk_aligned+0x22>
 80094b4:	1a21      	subs	r1, r4, r0
 80094b6:	4628      	mov	r0, r5
 80094b8:	f001 fe0a 	bl	800b0d0 <_sbrk_r>
 80094bc:	3001      	adds	r0, #1
 80094be:	d1f2      	bne.n	80094a6 <sbrk_aligned+0x22>
 80094c0:	e7ef      	b.n	80094a2 <sbrk_aligned+0x1e>
 80094c2:	bf00      	nop
 80094c4:	200009a8 	.word	0x200009a8

080094c8 <_malloc_r>:
 80094c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094cc:	1ccd      	adds	r5, r1, #3
 80094ce:	f025 0503 	bic.w	r5, r5, #3
 80094d2:	3508      	adds	r5, #8
 80094d4:	2d0c      	cmp	r5, #12
 80094d6:	bf38      	it	cc
 80094d8:	250c      	movcc	r5, #12
 80094da:	2d00      	cmp	r5, #0
 80094dc:	4606      	mov	r6, r0
 80094de:	db01      	blt.n	80094e4 <_malloc_r+0x1c>
 80094e0:	42a9      	cmp	r1, r5
 80094e2:	d904      	bls.n	80094ee <_malloc_r+0x26>
 80094e4:	230c      	movs	r3, #12
 80094e6:	6033      	str	r3, [r6, #0]
 80094e8:	2000      	movs	r0, #0
 80094ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80095c4 <_malloc_r+0xfc>
 80094f2:	f000 f869 	bl	80095c8 <__malloc_lock>
 80094f6:	f8d8 3000 	ldr.w	r3, [r8]
 80094fa:	461c      	mov	r4, r3
 80094fc:	bb44      	cbnz	r4, 8009550 <_malloc_r+0x88>
 80094fe:	4629      	mov	r1, r5
 8009500:	4630      	mov	r0, r6
 8009502:	f7ff ffbf 	bl	8009484 <sbrk_aligned>
 8009506:	1c43      	adds	r3, r0, #1
 8009508:	4604      	mov	r4, r0
 800950a:	d158      	bne.n	80095be <_malloc_r+0xf6>
 800950c:	f8d8 4000 	ldr.w	r4, [r8]
 8009510:	4627      	mov	r7, r4
 8009512:	2f00      	cmp	r7, #0
 8009514:	d143      	bne.n	800959e <_malloc_r+0xd6>
 8009516:	2c00      	cmp	r4, #0
 8009518:	d04b      	beq.n	80095b2 <_malloc_r+0xea>
 800951a:	6823      	ldr	r3, [r4, #0]
 800951c:	4639      	mov	r1, r7
 800951e:	4630      	mov	r0, r6
 8009520:	eb04 0903 	add.w	r9, r4, r3
 8009524:	f001 fdd4 	bl	800b0d0 <_sbrk_r>
 8009528:	4581      	cmp	r9, r0
 800952a:	d142      	bne.n	80095b2 <_malloc_r+0xea>
 800952c:	6821      	ldr	r1, [r4, #0]
 800952e:	1a6d      	subs	r5, r5, r1
 8009530:	4629      	mov	r1, r5
 8009532:	4630      	mov	r0, r6
 8009534:	f7ff ffa6 	bl	8009484 <sbrk_aligned>
 8009538:	3001      	adds	r0, #1
 800953a:	d03a      	beq.n	80095b2 <_malloc_r+0xea>
 800953c:	6823      	ldr	r3, [r4, #0]
 800953e:	442b      	add	r3, r5
 8009540:	6023      	str	r3, [r4, #0]
 8009542:	f8d8 3000 	ldr.w	r3, [r8]
 8009546:	685a      	ldr	r2, [r3, #4]
 8009548:	bb62      	cbnz	r2, 80095a4 <_malloc_r+0xdc>
 800954a:	f8c8 7000 	str.w	r7, [r8]
 800954e:	e00f      	b.n	8009570 <_malloc_r+0xa8>
 8009550:	6822      	ldr	r2, [r4, #0]
 8009552:	1b52      	subs	r2, r2, r5
 8009554:	d420      	bmi.n	8009598 <_malloc_r+0xd0>
 8009556:	2a0b      	cmp	r2, #11
 8009558:	d917      	bls.n	800958a <_malloc_r+0xc2>
 800955a:	1961      	adds	r1, r4, r5
 800955c:	42a3      	cmp	r3, r4
 800955e:	6025      	str	r5, [r4, #0]
 8009560:	bf18      	it	ne
 8009562:	6059      	strne	r1, [r3, #4]
 8009564:	6863      	ldr	r3, [r4, #4]
 8009566:	bf08      	it	eq
 8009568:	f8c8 1000 	streq.w	r1, [r8]
 800956c:	5162      	str	r2, [r4, r5]
 800956e:	604b      	str	r3, [r1, #4]
 8009570:	4630      	mov	r0, r6
 8009572:	f000 f82f 	bl	80095d4 <__malloc_unlock>
 8009576:	f104 000b 	add.w	r0, r4, #11
 800957a:	1d23      	adds	r3, r4, #4
 800957c:	f020 0007 	bic.w	r0, r0, #7
 8009580:	1ac2      	subs	r2, r0, r3
 8009582:	bf1c      	itt	ne
 8009584:	1a1b      	subne	r3, r3, r0
 8009586:	50a3      	strne	r3, [r4, r2]
 8009588:	e7af      	b.n	80094ea <_malloc_r+0x22>
 800958a:	6862      	ldr	r2, [r4, #4]
 800958c:	42a3      	cmp	r3, r4
 800958e:	bf0c      	ite	eq
 8009590:	f8c8 2000 	streq.w	r2, [r8]
 8009594:	605a      	strne	r2, [r3, #4]
 8009596:	e7eb      	b.n	8009570 <_malloc_r+0xa8>
 8009598:	4623      	mov	r3, r4
 800959a:	6864      	ldr	r4, [r4, #4]
 800959c:	e7ae      	b.n	80094fc <_malloc_r+0x34>
 800959e:	463c      	mov	r4, r7
 80095a0:	687f      	ldr	r7, [r7, #4]
 80095a2:	e7b6      	b.n	8009512 <_malloc_r+0x4a>
 80095a4:	461a      	mov	r2, r3
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	42a3      	cmp	r3, r4
 80095aa:	d1fb      	bne.n	80095a4 <_malloc_r+0xdc>
 80095ac:	2300      	movs	r3, #0
 80095ae:	6053      	str	r3, [r2, #4]
 80095b0:	e7de      	b.n	8009570 <_malloc_r+0xa8>
 80095b2:	230c      	movs	r3, #12
 80095b4:	6033      	str	r3, [r6, #0]
 80095b6:	4630      	mov	r0, r6
 80095b8:	f000 f80c 	bl	80095d4 <__malloc_unlock>
 80095bc:	e794      	b.n	80094e8 <_malloc_r+0x20>
 80095be:	6005      	str	r5, [r0, #0]
 80095c0:	e7d6      	b.n	8009570 <_malloc_r+0xa8>
 80095c2:	bf00      	nop
 80095c4:	200009ac 	.word	0x200009ac

080095c8 <__malloc_lock>:
 80095c8:	4801      	ldr	r0, [pc, #4]	@ (80095d0 <__malloc_lock+0x8>)
 80095ca:	f7ff b886 	b.w	80086da <__retarget_lock_acquire_recursive>
 80095ce:	bf00      	nop
 80095d0:	200009a4 	.word	0x200009a4

080095d4 <__malloc_unlock>:
 80095d4:	4801      	ldr	r0, [pc, #4]	@ (80095dc <__malloc_unlock+0x8>)
 80095d6:	f7ff b881 	b.w	80086dc <__retarget_lock_release_recursive>
 80095da:	bf00      	nop
 80095dc:	200009a4 	.word	0x200009a4

080095e0 <_Balloc>:
 80095e0:	b570      	push	{r4, r5, r6, lr}
 80095e2:	69c6      	ldr	r6, [r0, #28]
 80095e4:	4604      	mov	r4, r0
 80095e6:	460d      	mov	r5, r1
 80095e8:	b976      	cbnz	r6, 8009608 <_Balloc+0x28>
 80095ea:	2010      	movs	r0, #16
 80095ec:	f7ff ff42 	bl	8009474 <malloc>
 80095f0:	4602      	mov	r2, r0
 80095f2:	61e0      	str	r0, [r4, #28]
 80095f4:	b920      	cbnz	r0, 8009600 <_Balloc+0x20>
 80095f6:	4b18      	ldr	r3, [pc, #96]	@ (8009658 <_Balloc+0x78>)
 80095f8:	4818      	ldr	r0, [pc, #96]	@ (800965c <_Balloc+0x7c>)
 80095fa:	216b      	movs	r1, #107	@ 0x6b
 80095fc:	f7ff f884 	bl	8008708 <__assert_func>
 8009600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009604:	6006      	str	r6, [r0, #0]
 8009606:	60c6      	str	r6, [r0, #12]
 8009608:	69e6      	ldr	r6, [r4, #28]
 800960a:	68f3      	ldr	r3, [r6, #12]
 800960c:	b183      	cbz	r3, 8009630 <_Balloc+0x50>
 800960e:	69e3      	ldr	r3, [r4, #28]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009616:	b9b8      	cbnz	r0, 8009648 <_Balloc+0x68>
 8009618:	2101      	movs	r1, #1
 800961a:	fa01 f605 	lsl.w	r6, r1, r5
 800961e:	1d72      	adds	r2, r6, #5
 8009620:	0092      	lsls	r2, r2, #2
 8009622:	4620      	mov	r0, r4
 8009624:	f001 fd73 	bl	800b10e <_calloc_r>
 8009628:	b160      	cbz	r0, 8009644 <_Balloc+0x64>
 800962a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800962e:	e00e      	b.n	800964e <_Balloc+0x6e>
 8009630:	2221      	movs	r2, #33	@ 0x21
 8009632:	2104      	movs	r1, #4
 8009634:	4620      	mov	r0, r4
 8009636:	f001 fd6a 	bl	800b10e <_calloc_r>
 800963a:	69e3      	ldr	r3, [r4, #28]
 800963c:	60f0      	str	r0, [r6, #12]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1e4      	bne.n	800960e <_Balloc+0x2e>
 8009644:	2000      	movs	r0, #0
 8009646:	bd70      	pop	{r4, r5, r6, pc}
 8009648:	6802      	ldr	r2, [r0, #0]
 800964a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800964e:	2300      	movs	r3, #0
 8009650:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009654:	e7f7      	b.n	8009646 <_Balloc+0x66>
 8009656:	bf00      	nop
 8009658:	0800d900 	.word	0x0800d900
 800965c:	0800da5a 	.word	0x0800da5a

08009660 <_Bfree>:
 8009660:	b570      	push	{r4, r5, r6, lr}
 8009662:	69c6      	ldr	r6, [r0, #28]
 8009664:	4605      	mov	r5, r0
 8009666:	460c      	mov	r4, r1
 8009668:	b976      	cbnz	r6, 8009688 <_Bfree+0x28>
 800966a:	2010      	movs	r0, #16
 800966c:	f7ff ff02 	bl	8009474 <malloc>
 8009670:	4602      	mov	r2, r0
 8009672:	61e8      	str	r0, [r5, #28]
 8009674:	b920      	cbnz	r0, 8009680 <_Bfree+0x20>
 8009676:	4b09      	ldr	r3, [pc, #36]	@ (800969c <_Bfree+0x3c>)
 8009678:	4809      	ldr	r0, [pc, #36]	@ (80096a0 <_Bfree+0x40>)
 800967a:	218f      	movs	r1, #143	@ 0x8f
 800967c:	f7ff f844 	bl	8008708 <__assert_func>
 8009680:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009684:	6006      	str	r6, [r0, #0]
 8009686:	60c6      	str	r6, [r0, #12]
 8009688:	b13c      	cbz	r4, 800969a <_Bfree+0x3a>
 800968a:	69eb      	ldr	r3, [r5, #28]
 800968c:	6862      	ldr	r2, [r4, #4]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009694:	6021      	str	r1, [r4, #0]
 8009696:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800969a:	bd70      	pop	{r4, r5, r6, pc}
 800969c:	0800d900 	.word	0x0800d900
 80096a0:	0800da5a 	.word	0x0800da5a

080096a4 <__multadd>:
 80096a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a8:	690d      	ldr	r5, [r1, #16]
 80096aa:	4607      	mov	r7, r0
 80096ac:	460c      	mov	r4, r1
 80096ae:	461e      	mov	r6, r3
 80096b0:	f101 0c14 	add.w	ip, r1, #20
 80096b4:	2000      	movs	r0, #0
 80096b6:	f8dc 3000 	ldr.w	r3, [ip]
 80096ba:	b299      	uxth	r1, r3
 80096bc:	fb02 6101 	mla	r1, r2, r1, r6
 80096c0:	0c1e      	lsrs	r6, r3, #16
 80096c2:	0c0b      	lsrs	r3, r1, #16
 80096c4:	fb02 3306 	mla	r3, r2, r6, r3
 80096c8:	b289      	uxth	r1, r1
 80096ca:	3001      	adds	r0, #1
 80096cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096d0:	4285      	cmp	r5, r0
 80096d2:	f84c 1b04 	str.w	r1, [ip], #4
 80096d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096da:	dcec      	bgt.n	80096b6 <__multadd+0x12>
 80096dc:	b30e      	cbz	r6, 8009722 <__multadd+0x7e>
 80096de:	68a3      	ldr	r3, [r4, #8]
 80096e0:	42ab      	cmp	r3, r5
 80096e2:	dc19      	bgt.n	8009718 <__multadd+0x74>
 80096e4:	6861      	ldr	r1, [r4, #4]
 80096e6:	4638      	mov	r0, r7
 80096e8:	3101      	adds	r1, #1
 80096ea:	f7ff ff79 	bl	80095e0 <_Balloc>
 80096ee:	4680      	mov	r8, r0
 80096f0:	b928      	cbnz	r0, 80096fe <__multadd+0x5a>
 80096f2:	4602      	mov	r2, r0
 80096f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009728 <__multadd+0x84>)
 80096f6:	480d      	ldr	r0, [pc, #52]	@ (800972c <__multadd+0x88>)
 80096f8:	21ba      	movs	r1, #186	@ 0xba
 80096fa:	f7ff f805 	bl	8008708 <__assert_func>
 80096fe:	6922      	ldr	r2, [r4, #16]
 8009700:	3202      	adds	r2, #2
 8009702:	f104 010c 	add.w	r1, r4, #12
 8009706:	0092      	lsls	r2, r2, #2
 8009708:	300c      	adds	r0, #12
 800970a:	f7fe ffe8 	bl	80086de <memcpy>
 800970e:	4621      	mov	r1, r4
 8009710:	4638      	mov	r0, r7
 8009712:	f7ff ffa5 	bl	8009660 <_Bfree>
 8009716:	4644      	mov	r4, r8
 8009718:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800971c:	3501      	adds	r5, #1
 800971e:	615e      	str	r6, [r3, #20]
 8009720:	6125      	str	r5, [r4, #16]
 8009722:	4620      	mov	r0, r4
 8009724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009728:	0800da49 	.word	0x0800da49
 800972c:	0800da5a 	.word	0x0800da5a

08009730 <__s2b>:
 8009730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009734:	460c      	mov	r4, r1
 8009736:	4615      	mov	r5, r2
 8009738:	461f      	mov	r7, r3
 800973a:	2209      	movs	r2, #9
 800973c:	3308      	adds	r3, #8
 800973e:	4606      	mov	r6, r0
 8009740:	fb93 f3f2 	sdiv	r3, r3, r2
 8009744:	2100      	movs	r1, #0
 8009746:	2201      	movs	r2, #1
 8009748:	429a      	cmp	r2, r3
 800974a:	db09      	blt.n	8009760 <__s2b+0x30>
 800974c:	4630      	mov	r0, r6
 800974e:	f7ff ff47 	bl	80095e0 <_Balloc>
 8009752:	b940      	cbnz	r0, 8009766 <__s2b+0x36>
 8009754:	4602      	mov	r2, r0
 8009756:	4b19      	ldr	r3, [pc, #100]	@ (80097bc <__s2b+0x8c>)
 8009758:	4819      	ldr	r0, [pc, #100]	@ (80097c0 <__s2b+0x90>)
 800975a:	21d3      	movs	r1, #211	@ 0xd3
 800975c:	f7fe ffd4 	bl	8008708 <__assert_func>
 8009760:	0052      	lsls	r2, r2, #1
 8009762:	3101      	adds	r1, #1
 8009764:	e7f0      	b.n	8009748 <__s2b+0x18>
 8009766:	9b08      	ldr	r3, [sp, #32]
 8009768:	6143      	str	r3, [r0, #20]
 800976a:	2d09      	cmp	r5, #9
 800976c:	f04f 0301 	mov.w	r3, #1
 8009770:	6103      	str	r3, [r0, #16]
 8009772:	dd16      	ble.n	80097a2 <__s2b+0x72>
 8009774:	f104 0909 	add.w	r9, r4, #9
 8009778:	46c8      	mov	r8, r9
 800977a:	442c      	add	r4, r5
 800977c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009780:	4601      	mov	r1, r0
 8009782:	3b30      	subs	r3, #48	@ 0x30
 8009784:	220a      	movs	r2, #10
 8009786:	4630      	mov	r0, r6
 8009788:	f7ff ff8c 	bl	80096a4 <__multadd>
 800978c:	45a0      	cmp	r8, r4
 800978e:	d1f5      	bne.n	800977c <__s2b+0x4c>
 8009790:	f1a5 0408 	sub.w	r4, r5, #8
 8009794:	444c      	add	r4, r9
 8009796:	1b2d      	subs	r5, r5, r4
 8009798:	1963      	adds	r3, r4, r5
 800979a:	42bb      	cmp	r3, r7
 800979c:	db04      	blt.n	80097a8 <__s2b+0x78>
 800979e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097a2:	340a      	adds	r4, #10
 80097a4:	2509      	movs	r5, #9
 80097a6:	e7f6      	b.n	8009796 <__s2b+0x66>
 80097a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80097ac:	4601      	mov	r1, r0
 80097ae:	3b30      	subs	r3, #48	@ 0x30
 80097b0:	220a      	movs	r2, #10
 80097b2:	4630      	mov	r0, r6
 80097b4:	f7ff ff76 	bl	80096a4 <__multadd>
 80097b8:	e7ee      	b.n	8009798 <__s2b+0x68>
 80097ba:	bf00      	nop
 80097bc:	0800da49 	.word	0x0800da49
 80097c0:	0800da5a 	.word	0x0800da5a

080097c4 <__hi0bits>:
 80097c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80097c8:	4603      	mov	r3, r0
 80097ca:	bf36      	itet	cc
 80097cc:	0403      	lslcc	r3, r0, #16
 80097ce:	2000      	movcs	r0, #0
 80097d0:	2010      	movcc	r0, #16
 80097d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097d6:	bf3c      	itt	cc
 80097d8:	021b      	lslcc	r3, r3, #8
 80097da:	3008      	addcc	r0, #8
 80097dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097e0:	bf3c      	itt	cc
 80097e2:	011b      	lslcc	r3, r3, #4
 80097e4:	3004      	addcc	r0, #4
 80097e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097ea:	bf3c      	itt	cc
 80097ec:	009b      	lslcc	r3, r3, #2
 80097ee:	3002      	addcc	r0, #2
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	db05      	blt.n	8009800 <__hi0bits+0x3c>
 80097f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80097f8:	f100 0001 	add.w	r0, r0, #1
 80097fc:	bf08      	it	eq
 80097fe:	2020      	moveq	r0, #32
 8009800:	4770      	bx	lr

08009802 <__lo0bits>:
 8009802:	6803      	ldr	r3, [r0, #0]
 8009804:	4602      	mov	r2, r0
 8009806:	f013 0007 	ands.w	r0, r3, #7
 800980a:	d00b      	beq.n	8009824 <__lo0bits+0x22>
 800980c:	07d9      	lsls	r1, r3, #31
 800980e:	d421      	bmi.n	8009854 <__lo0bits+0x52>
 8009810:	0798      	lsls	r0, r3, #30
 8009812:	bf49      	itett	mi
 8009814:	085b      	lsrmi	r3, r3, #1
 8009816:	089b      	lsrpl	r3, r3, #2
 8009818:	2001      	movmi	r0, #1
 800981a:	6013      	strmi	r3, [r2, #0]
 800981c:	bf5c      	itt	pl
 800981e:	6013      	strpl	r3, [r2, #0]
 8009820:	2002      	movpl	r0, #2
 8009822:	4770      	bx	lr
 8009824:	b299      	uxth	r1, r3
 8009826:	b909      	cbnz	r1, 800982c <__lo0bits+0x2a>
 8009828:	0c1b      	lsrs	r3, r3, #16
 800982a:	2010      	movs	r0, #16
 800982c:	b2d9      	uxtb	r1, r3
 800982e:	b909      	cbnz	r1, 8009834 <__lo0bits+0x32>
 8009830:	3008      	adds	r0, #8
 8009832:	0a1b      	lsrs	r3, r3, #8
 8009834:	0719      	lsls	r1, r3, #28
 8009836:	bf04      	itt	eq
 8009838:	091b      	lsreq	r3, r3, #4
 800983a:	3004      	addeq	r0, #4
 800983c:	0799      	lsls	r1, r3, #30
 800983e:	bf04      	itt	eq
 8009840:	089b      	lsreq	r3, r3, #2
 8009842:	3002      	addeq	r0, #2
 8009844:	07d9      	lsls	r1, r3, #31
 8009846:	d403      	bmi.n	8009850 <__lo0bits+0x4e>
 8009848:	085b      	lsrs	r3, r3, #1
 800984a:	f100 0001 	add.w	r0, r0, #1
 800984e:	d003      	beq.n	8009858 <__lo0bits+0x56>
 8009850:	6013      	str	r3, [r2, #0]
 8009852:	4770      	bx	lr
 8009854:	2000      	movs	r0, #0
 8009856:	4770      	bx	lr
 8009858:	2020      	movs	r0, #32
 800985a:	4770      	bx	lr

0800985c <__i2b>:
 800985c:	b510      	push	{r4, lr}
 800985e:	460c      	mov	r4, r1
 8009860:	2101      	movs	r1, #1
 8009862:	f7ff febd 	bl	80095e0 <_Balloc>
 8009866:	4602      	mov	r2, r0
 8009868:	b928      	cbnz	r0, 8009876 <__i2b+0x1a>
 800986a:	4b05      	ldr	r3, [pc, #20]	@ (8009880 <__i2b+0x24>)
 800986c:	4805      	ldr	r0, [pc, #20]	@ (8009884 <__i2b+0x28>)
 800986e:	f240 1145 	movw	r1, #325	@ 0x145
 8009872:	f7fe ff49 	bl	8008708 <__assert_func>
 8009876:	2301      	movs	r3, #1
 8009878:	6144      	str	r4, [r0, #20]
 800987a:	6103      	str	r3, [r0, #16]
 800987c:	bd10      	pop	{r4, pc}
 800987e:	bf00      	nop
 8009880:	0800da49 	.word	0x0800da49
 8009884:	0800da5a 	.word	0x0800da5a

08009888 <__multiply>:
 8009888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800988c:	4614      	mov	r4, r2
 800988e:	690a      	ldr	r2, [r1, #16]
 8009890:	6923      	ldr	r3, [r4, #16]
 8009892:	429a      	cmp	r2, r3
 8009894:	bfa8      	it	ge
 8009896:	4623      	movge	r3, r4
 8009898:	460f      	mov	r7, r1
 800989a:	bfa4      	itt	ge
 800989c:	460c      	movge	r4, r1
 800989e:	461f      	movge	r7, r3
 80098a0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80098a4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80098a8:	68a3      	ldr	r3, [r4, #8]
 80098aa:	6861      	ldr	r1, [r4, #4]
 80098ac:	eb0a 0609 	add.w	r6, sl, r9
 80098b0:	42b3      	cmp	r3, r6
 80098b2:	b085      	sub	sp, #20
 80098b4:	bfb8      	it	lt
 80098b6:	3101      	addlt	r1, #1
 80098b8:	f7ff fe92 	bl	80095e0 <_Balloc>
 80098bc:	b930      	cbnz	r0, 80098cc <__multiply+0x44>
 80098be:	4602      	mov	r2, r0
 80098c0:	4b44      	ldr	r3, [pc, #272]	@ (80099d4 <__multiply+0x14c>)
 80098c2:	4845      	ldr	r0, [pc, #276]	@ (80099d8 <__multiply+0x150>)
 80098c4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80098c8:	f7fe ff1e 	bl	8008708 <__assert_func>
 80098cc:	f100 0514 	add.w	r5, r0, #20
 80098d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098d4:	462b      	mov	r3, r5
 80098d6:	2200      	movs	r2, #0
 80098d8:	4543      	cmp	r3, r8
 80098da:	d321      	bcc.n	8009920 <__multiply+0x98>
 80098dc:	f107 0114 	add.w	r1, r7, #20
 80098e0:	f104 0214 	add.w	r2, r4, #20
 80098e4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80098e8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80098ec:	9302      	str	r3, [sp, #8]
 80098ee:	1b13      	subs	r3, r2, r4
 80098f0:	3b15      	subs	r3, #21
 80098f2:	f023 0303 	bic.w	r3, r3, #3
 80098f6:	3304      	adds	r3, #4
 80098f8:	f104 0715 	add.w	r7, r4, #21
 80098fc:	42ba      	cmp	r2, r7
 80098fe:	bf38      	it	cc
 8009900:	2304      	movcc	r3, #4
 8009902:	9301      	str	r3, [sp, #4]
 8009904:	9b02      	ldr	r3, [sp, #8]
 8009906:	9103      	str	r1, [sp, #12]
 8009908:	428b      	cmp	r3, r1
 800990a:	d80c      	bhi.n	8009926 <__multiply+0x9e>
 800990c:	2e00      	cmp	r6, #0
 800990e:	dd03      	ble.n	8009918 <__multiply+0x90>
 8009910:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009914:	2b00      	cmp	r3, #0
 8009916:	d05b      	beq.n	80099d0 <__multiply+0x148>
 8009918:	6106      	str	r6, [r0, #16]
 800991a:	b005      	add	sp, #20
 800991c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009920:	f843 2b04 	str.w	r2, [r3], #4
 8009924:	e7d8      	b.n	80098d8 <__multiply+0x50>
 8009926:	f8b1 a000 	ldrh.w	sl, [r1]
 800992a:	f1ba 0f00 	cmp.w	sl, #0
 800992e:	d024      	beq.n	800997a <__multiply+0xf2>
 8009930:	f104 0e14 	add.w	lr, r4, #20
 8009934:	46a9      	mov	r9, r5
 8009936:	f04f 0c00 	mov.w	ip, #0
 800993a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800993e:	f8d9 3000 	ldr.w	r3, [r9]
 8009942:	fa1f fb87 	uxth.w	fp, r7
 8009946:	b29b      	uxth	r3, r3
 8009948:	fb0a 330b 	mla	r3, sl, fp, r3
 800994c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009950:	f8d9 7000 	ldr.w	r7, [r9]
 8009954:	4463      	add	r3, ip
 8009956:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800995a:	fb0a c70b 	mla	r7, sl, fp, ip
 800995e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009962:	b29b      	uxth	r3, r3
 8009964:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009968:	4572      	cmp	r2, lr
 800996a:	f849 3b04 	str.w	r3, [r9], #4
 800996e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009972:	d8e2      	bhi.n	800993a <__multiply+0xb2>
 8009974:	9b01      	ldr	r3, [sp, #4]
 8009976:	f845 c003 	str.w	ip, [r5, r3]
 800997a:	9b03      	ldr	r3, [sp, #12]
 800997c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009980:	3104      	adds	r1, #4
 8009982:	f1b9 0f00 	cmp.w	r9, #0
 8009986:	d021      	beq.n	80099cc <__multiply+0x144>
 8009988:	682b      	ldr	r3, [r5, #0]
 800998a:	f104 0c14 	add.w	ip, r4, #20
 800998e:	46ae      	mov	lr, r5
 8009990:	f04f 0a00 	mov.w	sl, #0
 8009994:	f8bc b000 	ldrh.w	fp, [ip]
 8009998:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800999c:	fb09 770b 	mla	r7, r9, fp, r7
 80099a0:	4457      	add	r7, sl
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80099a8:	f84e 3b04 	str.w	r3, [lr], #4
 80099ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80099b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80099b4:	f8be 3000 	ldrh.w	r3, [lr]
 80099b8:	fb09 330a 	mla	r3, r9, sl, r3
 80099bc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80099c0:	4562      	cmp	r2, ip
 80099c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80099c6:	d8e5      	bhi.n	8009994 <__multiply+0x10c>
 80099c8:	9f01      	ldr	r7, [sp, #4]
 80099ca:	51eb      	str	r3, [r5, r7]
 80099cc:	3504      	adds	r5, #4
 80099ce:	e799      	b.n	8009904 <__multiply+0x7c>
 80099d0:	3e01      	subs	r6, #1
 80099d2:	e79b      	b.n	800990c <__multiply+0x84>
 80099d4:	0800da49 	.word	0x0800da49
 80099d8:	0800da5a 	.word	0x0800da5a

080099dc <__pow5mult>:
 80099dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099e0:	4615      	mov	r5, r2
 80099e2:	f012 0203 	ands.w	r2, r2, #3
 80099e6:	4607      	mov	r7, r0
 80099e8:	460e      	mov	r6, r1
 80099ea:	d007      	beq.n	80099fc <__pow5mult+0x20>
 80099ec:	4c25      	ldr	r4, [pc, #148]	@ (8009a84 <__pow5mult+0xa8>)
 80099ee:	3a01      	subs	r2, #1
 80099f0:	2300      	movs	r3, #0
 80099f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099f6:	f7ff fe55 	bl	80096a4 <__multadd>
 80099fa:	4606      	mov	r6, r0
 80099fc:	10ad      	asrs	r5, r5, #2
 80099fe:	d03d      	beq.n	8009a7c <__pow5mult+0xa0>
 8009a00:	69fc      	ldr	r4, [r7, #28]
 8009a02:	b97c      	cbnz	r4, 8009a24 <__pow5mult+0x48>
 8009a04:	2010      	movs	r0, #16
 8009a06:	f7ff fd35 	bl	8009474 <malloc>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	61f8      	str	r0, [r7, #28]
 8009a0e:	b928      	cbnz	r0, 8009a1c <__pow5mult+0x40>
 8009a10:	4b1d      	ldr	r3, [pc, #116]	@ (8009a88 <__pow5mult+0xac>)
 8009a12:	481e      	ldr	r0, [pc, #120]	@ (8009a8c <__pow5mult+0xb0>)
 8009a14:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009a18:	f7fe fe76 	bl	8008708 <__assert_func>
 8009a1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a20:	6004      	str	r4, [r0, #0]
 8009a22:	60c4      	str	r4, [r0, #12]
 8009a24:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009a28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a2c:	b94c      	cbnz	r4, 8009a42 <__pow5mult+0x66>
 8009a2e:	f240 2171 	movw	r1, #625	@ 0x271
 8009a32:	4638      	mov	r0, r7
 8009a34:	f7ff ff12 	bl	800985c <__i2b>
 8009a38:	2300      	movs	r3, #0
 8009a3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a3e:	4604      	mov	r4, r0
 8009a40:	6003      	str	r3, [r0, #0]
 8009a42:	f04f 0900 	mov.w	r9, #0
 8009a46:	07eb      	lsls	r3, r5, #31
 8009a48:	d50a      	bpl.n	8009a60 <__pow5mult+0x84>
 8009a4a:	4631      	mov	r1, r6
 8009a4c:	4622      	mov	r2, r4
 8009a4e:	4638      	mov	r0, r7
 8009a50:	f7ff ff1a 	bl	8009888 <__multiply>
 8009a54:	4631      	mov	r1, r6
 8009a56:	4680      	mov	r8, r0
 8009a58:	4638      	mov	r0, r7
 8009a5a:	f7ff fe01 	bl	8009660 <_Bfree>
 8009a5e:	4646      	mov	r6, r8
 8009a60:	106d      	asrs	r5, r5, #1
 8009a62:	d00b      	beq.n	8009a7c <__pow5mult+0xa0>
 8009a64:	6820      	ldr	r0, [r4, #0]
 8009a66:	b938      	cbnz	r0, 8009a78 <__pow5mult+0x9c>
 8009a68:	4622      	mov	r2, r4
 8009a6a:	4621      	mov	r1, r4
 8009a6c:	4638      	mov	r0, r7
 8009a6e:	f7ff ff0b 	bl	8009888 <__multiply>
 8009a72:	6020      	str	r0, [r4, #0]
 8009a74:	f8c0 9000 	str.w	r9, [r0]
 8009a78:	4604      	mov	r4, r0
 8009a7a:	e7e4      	b.n	8009a46 <__pow5mult+0x6a>
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a82:	bf00      	nop
 8009a84:	0800dab4 	.word	0x0800dab4
 8009a88:	0800d900 	.word	0x0800d900
 8009a8c:	0800da5a 	.word	0x0800da5a

08009a90 <__lshift>:
 8009a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a94:	460c      	mov	r4, r1
 8009a96:	6849      	ldr	r1, [r1, #4]
 8009a98:	6923      	ldr	r3, [r4, #16]
 8009a9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a9e:	68a3      	ldr	r3, [r4, #8]
 8009aa0:	4607      	mov	r7, r0
 8009aa2:	4691      	mov	r9, r2
 8009aa4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009aa8:	f108 0601 	add.w	r6, r8, #1
 8009aac:	42b3      	cmp	r3, r6
 8009aae:	db0b      	blt.n	8009ac8 <__lshift+0x38>
 8009ab0:	4638      	mov	r0, r7
 8009ab2:	f7ff fd95 	bl	80095e0 <_Balloc>
 8009ab6:	4605      	mov	r5, r0
 8009ab8:	b948      	cbnz	r0, 8009ace <__lshift+0x3e>
 8009aba:	4602      	mov	r2, r0
 8009abc:	4b28      	ldr	r3, [pc, #160]	@ (8009b60 <__lshift+0xd0>)
 8009abe:	4829      	ldr	r0, [pc, #164]	@ (8009b64 <__lshift+0xd4>)
 8009ac0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009ac4:	f7fe fe20 	bl	8008708 <__assert_func>
 8009ac8:	3101      	adds	r1, #1
 8009aca:	005b      	lsls	r3, r3, #1
 8009acc:	e7ee      	b.n	8009aac <__lshift+0x1c>
 8009ace:	2300      	movs	r3, #0
 8009ad0:	f100 0114 	add.w	r1, r0, #20
 8009ad4:	f100 0210 	add.w	r2, r0, #16
 8009ad8:	4618      	mov	r0, r3
 8009ada:	4553      	cmp	r3, sl
 8009adc:	db33      	blt.n	8009b46 <__lshift+0xb6>
 8009ade:	6920      	ldr	r0, [r4, #16]
 8009ae0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ae4:	f104 0314 	add.w	r3, r4, #20
 8009ae8:	f019 091f 	ands.w	r9, r9, #31
 8009aec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009af0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009af4:	d02b      	beq.n	8009b4e <__lshift+0xbe>
 8009af6:	f1c9 0e20 	rsb	lr, r9, #32
 8009afa:	468a      	mov	sl, r1
 8009afc:	2200      	movs	r2, #0
 8009afe:	6818      	ldr	r0, [r3, #0]
 8009b00:	fa00 f009 	lsl.w	r0, r0, r9
 8009b04:	4310      	orrs	r0, r2
 8009b06:	f84a 0b04 	str.w	r0, [sl], #4
 8009b0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b0e:	459c      	cmp	ip, r3
 8009b10:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b14:	d8f3      	bhi.n	8009afe <__lshift+0x6e>
 8009b16:	ebac 0304 	sub.w	r3, ip, r4
 8009b1a:	3b15      	subs	r3, #21
 8009b1c:	f023 0303 	bic.w	r3, r3, #3
 8009b20:	3304      	adds	r3, #4
 8009b22:	f104 0015 	add.w	r0, r4, #21
 8009b26:	4584      	cmp	ip, r0
 8009b28:	bf38      	it	cc
 8009b2a:	2304      	movcc	r3, #4
 8009b2c:	50ca      	str	r2, [r1, r3]
 8009b2e:	b10a      	cbz	r2, 8009b34 <__lshift+0xa4>
 8009b30:	f108 0602 	add.w	r6, r8, #2
 8009b34:	3e01      	subs	r6, #1
 8009b36:	4638      	mov	r0, r7
 8009b38:	612e      	str	r6, [r5, #16]
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	f7ff fd90 	bl	8009660 <_Bfree>
 8009b40:	4628      	mov	r0, r5
 8009b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b46:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	e7c5      	b.n	8009ada <__lshift+0x4a>
 8009b4e:	3904      	subs	r1, #4
 8009b50:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b54:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b58:	459c      	cmp	ip, r3
 8009b5a:	d8f9      	bhi.n	8009b50 <__lshift+0xc0>
 8009b5c:	e7ea      	b.n	8009b34 <__lshift+0xa4>
 8009b5e:	bf00      	nop
 8009b60:	0800da49 	.word	0x0800da49
 8009b64:	0800da5a 	.word	0x0800da5a

08009b68 <__mcmp>:
 8009b68:	690a      	ldr	r2, [r1, #16]
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	6900      	ldr	r0, [r0, #16]
 8009b6e:	1a80      	subs	r0, r0, r2
 8009b70:	b530      	push	{r4, r5, lr}
 8009b72:	d10e      	bne.n	8009b92 <__mcmp+0x2a>
 8009b74:	3314      	adds	r3, #20
 8009b76:	3114      	adds	r1, #20
 8009b78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009b7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009b80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b88:	4295      	cmp	r5, r2
 8009b8a:	d003      	beq.n	8009b94 <__mcmp+0x2c>
 8009b8c:	d205      	bcs.n	8009b9a <__mcmp+0x32>
 8009b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b92:	bd30      	pop	{r4, r5, pc}
 8009b94:	42a3      	cmp	r3, r4
 8009b96:	d3f3      	bcc.n	8009b80 <__mcmp+0x18>
 8009b98:	e7fb      	b.n	8009b92 <__mcmp+0x2a>
 8009b9a:	2001      	movs	r0, #1
 8009b9c:	e7f9      	b.n	8009b92 <__mcmp+0x2a>
	...

08009ba0 <__mdiff>:
 8009ba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba4:	4689      	mov	r9, r1
 8009ba6:	4606      	mov	r6, r0
 8009ba8:	4611      	mov	r1, r2
 8009baa:	4648      	mov	r0, r9
 8009bac:	4614      	mov	r4, r2
 8009bae:	f7ff ffdb 	bl	8009b68 <__mcmp>
 8009bb2:	1e05      	subs	r5, r0, #0
 8009bb4:	d112      	bne.n	8009bdc <__mdiff+0x3c>
 8009bb6:	4629      	mov	r1, r5
 8009bb8:	4630      	mov	r0, r6
 8009bba:	f7ff fd11 	bl	80095e0 <_Balloc>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	b928      	cbnz	r0, 8009bce <__mdiff+0x2e>
 8009bc2:	4b3f      	ldr	r3, [pc, #252]	@ (8009cc0 <__mdiff+0x120>)
 8009bc4:	f240 2137 	movw	r1, #567	@ 0x237
 8009bc8:	483e      	ldr	r0, [pc, #248]	@ (8009cc4 <__mdiff+0x124>)
 8009bca:	f7fe fd9d 	bl	8008708 <__assert_func>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	b003      	add	sp, #12
 8009bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bdc:	bfbc      	itt	lt
 8009bde:	464b      	movlt	r3, r9
 8009be0:	46a1      	movlt	r9, r4
 8009be2:	4630      	mov	r0, r6
 8009be4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009be8:	bfba      	itte	lt
 8009bea:	461c      	movlt	r4, r3
 8009bec:	2501      	movlt	r5, #1
 8009bee:	2500      	movge	r5, #0
 8009bf0:	f7ff fcf6 	bl	80095e0 <_Balloc>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	b918      	cbnz	r0, 8009c00 <__mdiff+0x60>
 8009bf8:	4b31      	ldr	r3, [pc, #196]	@ (8009cc0 <__mdiff+0x120>)
 8009bfa:	f240 2145 	movw	r1, #581	@ 0x245
 8009bfe:	e7e3      	b.n	8009bc8 <__mdiff+0x28>
 8009c00:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009c04:	6926      	ldr	r6, [r4, #16]
 8009c06:	60c5      	str	r5, [r0, #12]
 8009c08:	f109 0310 	add.w	r3, r9, #16
 8009c0c:	f109 0514 	add.w	r5, r9, #20
 8009c10:	f104 0e14 	add.w	lr, r4, #20
 8009c14:	f100 0b14 	add.w	fp, r0, #20
 8009c18:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009c1c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009c20:	9301      	str	r3, [sp, #4]
 8009c22:	46d9      	mov	r9, fp
 8009c24:	f04f 0c00 	mov.w	ip, #0
 8009c28:	9b01      	ldr	r3, [sp, #4]
 8009c2a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009c2e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009c32:	9301      	str	r3, [sp, #4]
 8009c34:	fa1f f38a 	uxth.w	r3, sl
 8009c38:	4619      	mov	r1, r3
 8009c3a:	b283      	uxth	r3, r0
 8009c3c:	1acb      	subs	r3, r1, r3
 8009c3e:	0c00      	lsrs	r0, r0, #16
 8009c40:	4463      	add	r3, ip
 8009c42:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009c46:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009c50:	4576      	cmp	r6, lr
 8009c52:	f849 3b04 	str.w	r3, [r9], #4
 8009c56:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c5a:	d8e5      	bhi.n	8009c28 <__mdiff+0x88>
 8009c5c:	1b33      	subs	r3, r6, r4
 8009c5e:	3b15      	subs	r3, #21
 8009c60:	f023 0303 	bic.w	r3, r3, #3
 8009c64:	3415      	adds	r4, #21
 8009c66:	3304      	adds	r3, #4
 8009c68:	42a6      	cmp	r6, r4
 8009c6a:	bf38      	it	cc
 8009c6c:	2304      	movcc	r3, #4
 8009c6e:	441d      	add	r5, r3
 8009c70:	445b      	add	r3, fp
 8009c72:	461e      	mov	r6, r3
 8009c74:	462c      	mov	r4, r5
 8009c76:	4544      	cmp	r4, r8
 8009c78:	d30e      	bcc.n	8009c98 <__mdiff+0xf8>
 8009c7a:	f108 0103 	add.w	r1, r8, #3
 8009c7e:	1b49      	subs	r1, r1, r5
 8009c80:	f021 0103 	bic.w	r1, r1, #3
 8009c84:	3d03      	subs	r5, #3
 8009c86:	45a8      	cmp	r8, r5
 8009c88:	bf38      	it	cc
 8009c8a:	2100      	movcc	r1, #0
 8009c8c:	440b      	add	r3, r1
 8009c8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c92:	b191      	cbz	r1, 8009cba <__mdiff+0x11a>
 8009c94:	6117      	str	r7, [r2, #16]
 8009c96:	e79d      	b.n	8009bd4 <__mdiff+0x34>
 8009c98:	f854 1b04 	ldr.w	r1, [r4], #4
 8009c9c:	46e6      	mov	lr, ip
 8009c9e:	0c08      	lsrs	r0, r1, #16
 8009ca0:	fa1c fc81 	uxtah	ip, ip, r1
 8009ca4:	4471      	add	r1, lr
 8009ca6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009caa:	b289      	uxth	r1, r1
 8009cac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009cb0:	f846 1b04 	str.w	r1, [r6], #4
 8009cb4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009cb8:	e7dd      	b.n	8009c76 <__mdiff+0xd6>
 8009cba:	3f01      	subs	r7, #1
 8009cbc:	e7e7      	b.n	8009c8e <__mdiff+0xee>
 8009cbe:	bf00      	nop
 8009cc0:	0800da49 	.word	0x0800da49
 8009cc4:	0800da5a 	.word	0x0800da5a

08009cc8 <__ulp>:
 8009cc8:	b082      	sub	sp, #8
 8009cca:	ed8d 0b00 	vstr	d0, [sp]
 8009cce:	9a01      	ldr	r2, [sp, #4]
 8009cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8009d10 <__ulp+0x48>)
 8009cd2:	4013      	ands	r3, r2
 8009cd4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	dc08      	bgt.n	8009cee <__ulp+0x26>
 8009cdc:	425b      	negs	r3, r3
 8009cde:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009ce2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009ce6:	da04      	bge.n	8009cf2 <__ulp+0x2a>
 8009ce8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009cec:	4113      	asrs	r3, r2
 8009cee:	2200      	movs	r2, #0
 8009cf0:	e008      	b.n	8009d04 <__ulp+0x3c>
 8009cf2:	f1a2 0314 	sub.w	r3, r2, #20
 8009cf6:	2b1e      	cmp	r3, #30
 8009cf8:	bfda      	itte	le
 8009cfa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009cfe:	40da      	lsrle	r2, r3
 8009d00:	2201      	movgt	r2, #1
 8009d02:	2300      	movs	r3, #0
 8009d04:	4619      	mov	r1, r3
 8009d06:	4610      	mov	r0, r2
 8009d08:	ec41 0b10 	vmov	d0, r0, r1
 8009d0c:	b002      	add	sp, #8
 8009d0e:	4770      	bx	lr
 8009d10:	7ff00000 	.word	0x7ff00000

08009d14 <__b2d>:
 8009d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d18:	6906      	ldr	r6, [r0, #16]
 8009d1a:	f100 0814 	add.w	r8, r0, #20
 8009d1e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009d22:	1f37      	subs	r7, r6, #4
 8009d24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009d28:	4610      	mov	r0, r2
 8009d2a:	f7ff fd4b 	bl	80097c4 <__hi0bits>
 8009d2e:	f1c0 0320 	rsb	r3, r0, #32
 8009d32:	280a      	cmp	r0, #10
 8009d34:	600b      	str	r3, [r1, #0]
 8009d36:	491b      	ldr	r1, [pc, #108]	@ (8009da4 <__b2d+0x90>)
 8009d38:	dc15      	bgt.n	8009d66 <__b2d+0x52>
 8009d3a:	f1c0 0c0b 	rsb	ip, r0, #11
 8009d3e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009d42:	45b8      	cmp	r8, r7
 8009d44:	ea43 0501 	orr.w	r5, r3, r1
 8009d48:	bf34      	ite	cc
 8009d4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009d4e:	2300      	movcs	r3, #0
 8009d50:	3015      	adds	r0, #21
 8009d52:	fa02 f000 	lsl.w	r0, r2, r0
 8009d56:	fa23 f30c 	lsr.w	r3, r3, ip
 8009d5a:	4303      	orrs	r3, r0
 8009d5c:	461c      	mov	r4, r3
 8009d5e:	ec45 4b10 	vmov	d0, r4, r5
 8009d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d66:	45b8      	cmp	r8, r7
 8009d68:	bf3a      	itte	cc
 8009d6a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009d6e:	f1a6 0708 	subcc.w	r7, r6, #8
 8009d72:	2300      	movcs	r3, #0
 8009d74:	380b      	subs	r0, #11
 8009d76:	d012      	beq.n	8009d9e <__b2d+0x8a>
 8009d78:	f1c0 0120 	rsb	r1, r0, #32
 8009d7c:	fa23 f401 	lsr.w	r4, r3, r1
 8009d80:	4082      	lsls	r2, r0
 8009d82:	4322      	orrs	r2, r4
 8009d84:	4547      	cmp	r7, r8
 8009d86:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009d8a:	bf8c      	ite	hi
 8009d8c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009d90:	2200      	movls	r2, #0
 8009d92:	4083      	lsls	r3, r0
 8009d94:	40ca      	lsrs	r2, r1
 8009d96:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	e7de      	b.n	8009d5c <__b2d+0x48>
 8009d9e:	ea42 0501 	orr.w	r5, r2, r1
 8009da2:	e7db      	b.n	8009d5c <__b2d+0x48>
 8009da4:	3ff00000 	.word	0x3ff00000

08009da8 <__d2b>:
 8009da8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009dac:	460f      	mov	r7, r1
 8009dae:	2101      	movs	r1, #1
 8009db0:	ec59 8b10 	vmov	r8, r9, d0
 8009db4:	4616      	mov	r6, r2
 8009db6:	f7ff fc13 	bl	80095e0 <_Balloc>
 8009dba:	4604      	mov	r4, r0
 8009dbc:	b930      	cbnz	r0, 8009dcc <__d2b+0x24>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	4b23      	ldr	r3, [pc, #140]	@ (8009e50 <__d2b+0xa8>)
 8009dc2:	4824      	ldr	r0, [pc, #144]	@ (8009e54 <__d2b+0xac>)
 8009dc4:	f240 310f 	movw	r1, #783	@ 0x30f
 8009dc8:	f7fe fc9e 	bl	8008708 <__assert_func>
 8009dcc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009dd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009dd4:	b10d      	cbz	r5, 8009dda <__d2b+0x32>
 8009dd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009dda:	9301      	str	r3, [sp, #4]
 8009ddc:	f1b8 0300 	subs.w	r3, r8, #0
 8009de0:	d023      	beq.n	8009e2a <__d2b+0x82>
 8009de2:	4668      	mov	r0, sp
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	f7ff fd0c 	bl	8009802 <__lo0bits>
 8009dea:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009dee:	b1d0      	cbz	r0, 8009e26 <__d2b+0x7e>
 8009df0:	f1c0 0320 	rsb	r3, r0, #32
 8009df4:	fa02 f303 	lsl.w	r3, r2, r3
 8009df8:	430b      	orrs	r3, r1
 8009dfa:	40c2      	lsrs	r2, r0
 8009dfc:	6163      	str	r3, [r4, #20]
 8009dfe:	9201      	str	r2, [sp, #4]
 8009e00:	9b01      	ldr	r3, [sp, #4]
 8009e02:	61a3      	str	r3, [r4, #24]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	bf0c      	ite	eq
 8009e08:	2201      	moveq	r2, #1
 8009e0a:	2202      	movne	r2, #2
 8009e0c:	6122      	str	r2, [r4, #16]
 8009e0e:	b1a5      	cbz	r5, 8009e3a <__d2b+0x92>
 8009e10:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009e14:	4405      	add	r5, r0
 8009e16:	603d      	str	r5, [r7, #0]
 8009e18:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009e1c:	6030      	str	r0, [r6, #0]
 8009e1e:	4620      	mov	r0, r4
 8009e20:	b003      	add	sp, #12
 8009e22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e26:	6161      	str	r1, [r4, #20]
 8009e28:	e7ea      	b.n	8009e00 <__d2b+0x58>
 8009e2a:	a801      	add	r0, sp, #4
 8009e2c:	f7ff fce9 	bl	8009802 <__lo0bits>
 8009e30:	9b01      	ldr	r3, [sp, #4]
 8009e32:	6163      	str	r3, [r4, #20]
 8009e34:	3020      	adds	r0, #32
 8009e36:	2201      	movs	r2, #1
 8009e38:	e7e8      	b.n	8009e0c <__d2b+0x64>
 8009e3a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e3e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009e42:	6038      	str	r0, [r7, #0]
 8009e44:	6918      	ldr	r0, [r3, #16]
 8009e46:	f7ff fcbd 	bl	80097c4 <__hi0bits>
 8009e4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e4e:	e7e5      	b.n	8009e1c <__d2b+0x74>
 8009e50:	0800da49 	.word	0x0800da49
 8009e54:	0800da5a 	.word	0x0800da5a

08009e58 <__ratio>:
 8009e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e5c:	b085      	sub	sp, #20
 8009e5e:	e9cd 1000 	strd	r1, r0, [sp]
 8009e62:	a902      	add	r1, sp, #8
 8009e64:	f7ff ff56 	bl	8009d14 <__b2d>
 8009e68:	9800      	ldr	r0, [sp, #0]
 8009e6a:	a903      	add	r1, sp, #12
 8009e6c:	ec55 4b10 	vmov	r4, r5, d0
 8009e70:	f7ff ff50 	bl	8009d14 <__b2d>
 8009e74:	9b01      	ldr	r3, [sp, #4]
 8009e76:	6919      	ldr	r1, [r3, #16]
 8009e78:	9b00      	ldr	r3, [sp, #0]
 8009e7a:	691b      	ldr	r3, [r3, #16]
 8009e7c:	1ac9      	subs	r1, r1, r3
 8009e7e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009e82:	1a9b      	subs	r3, r3, r2
 8009e84:	ec5b ab10 	vmov	sl, fp, d0
 8009e88:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	bfce      	itee	gt
 8009e90:	462a      	movgt	r2, r5
 8009e92:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e96:	465a      	movle	r2, fp
 8009e98:	462f      	mov	r7, r5
 8009e9a:	46d9      	mov	r9, fp
 8009e9c:	bfcc      	ite	gt
 8009e9e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009ea2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009ea6:	464b      	mov	r3, r9
 8009ea8:	4652      	mov	r2, sl
 8009eaa:	4620      	mov	r0, r4
 8009eac:	4639      	mov	r1, r7
 8009eae:	f7f6 fcdd 	bl	800086c <__aeabi_ddiv>
 8009eb2:	ec41 0b10 	vmov	d0, r0, r1
 8009eb6:	b005      	add	sp, #20
 8009eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ebc <__copybits>:
 8009ebc:	3901      	subs	r1, #1
 8009ebe:	b570      	push	{r4, r5, r6, lr}
 8009ec0:	1149      	asrs	r1, r1, #5
 8009ec2:	6914      	ldr	r4, [r2, #16]
 8009ec4:	3101      	adds	r1, #1
 8009ec6:	f102 0314 	add.w	r3, r2, #20
 8009eca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ece:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ed2:	1f05      	subs	r5, r0, #4
 8009ed4:	42a3      	cmp	r3, r4
 8009ed6:	d30c      	bcc.n	8009ef2 <__copybits+0x36>
 8009ed8:	1aa3      	subs	r3, r4, r2
 8009eda:	3b11      	subs	r3, #17
 8009edc:	f023 0303 	bic.w	r3, r3, #3
 8009ee0:	3211      	adds	r2, #17
 8009ee2:	42a2      	cmp	r2, r4
 8009ee4:	bf88      	it	hi
 8009ee6:	2300      	movhi	r3, #0
 8009ee8:	4418      	add	r0, r3
 8009eea:	2300      	movs	r3, #0
 8009eec:	4288      	cmp	r0, r1
 8009eee:	d305      	bcc.n	8009efc <__copybits+0x40>
 8009ef0:	bd70      	pop	{r4, r5, r6, pc}
 8009ef2:	f853 6b04 	ldr.w	r6, [r3], #4
 8009ef6:	f845 6f04 	str.w	r6, [r5, #4]!
 8009efa:	e7eb      	b.n	8009ed4 <__copybits+0x18>
 8009efc:	f840 3b04 	str.w	r3, [r0], #4
 8009f00:	e7f4      	b.n	8009eec <__copybits+0x30>

08009f02 <__any_on>:
 8009f02:	f100 0214 	add.w	r2, r0, #20
 8009f06:	6900      	ldr	r0, [r0, #16]
 8009f08:	114b      	asrs	r3, r1, #5
 8009f0a:	4298      	cmp	r0, r3
 8009f0c:	b510      	push	{r4, lr}
 8009f0e:	db11      	blt.n	8009f34 <__any_on+0x32>
 8009f10:	dd0a      	ble.n	8009f28 <__any_on+0x26>
 8009f12:	f011 011f 	ands.w	r1, r1, #31
 8009f16:	d007      	beq.n	8009f28 <__any_on+0x26>
 8009f18:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009f1c:	fa24 f001 	lsr.w	r0, r4, r1
 8009f20:	fa00 f101 	lsl.w	r1, r0, r1
 8009f24:	428c      	cmp	r4, r1
 8009f26:	d10b      	bne.n	8009f40 <__any_on+0x3e>
 8009f28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d803      	bhi.n	8009f38 <__any_on+0x36>
 8009f30:	2000      	movs	r0, #0
 8009f32:	bd10      	pop	{r4, pc}
 8009f34:	4603      	mov	r3, r0
 8009f36:	e7f7      	b.n	8009f28 <__any_on+0x26>
 8009f38:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f3c:	2900      	cmp	r1, #0
 8009f3e:	d0f5      	beq.n	8009f2c <__any_on+0x2a>
 8009f40:	2001      	movs	r0, #1
 8009f42:	e7f6      	b.n	8009f32 <__any_on+0x30>

08009f44 <sulp>:
 8009f44:	b570      	push	{r4, r5, r6, lr}
 8009f46:	4604      	mov	r4, r0
 8009f48:	460d      	mov	r5, r1
 8009f4a:	ec45 4b10 	vmov	d0, r4, r5
 8009f4e:	4616      	mov	r6, r2
 8009f50:	f7ff feba 	bl	8009cc8 <__ulp>
 8009f54:	ec51 0b10 	vmov	r0, r1, d0
 8009f58:	b17e      	cbz	r6, 8009f7a <sulp+0x36>
 8009f5a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009f5e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	dd09      	ble.n	8009f7a <sulp+0x36>
 8009f66:	051b      	lsls	r3, r3, #20
 8009f68:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009f6c:	2400      	movs	r4, #0
 8009f6e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009f72:	4622      	mov	r2, r4
 8009f74:	462b      	mov	r3, r5
 8009f76:	f7f6 fb4f 	bl	8000618 <__aeabi_dmul>
 8009f7a:	ec41 0b10 	vmov	d0, r0, r1
 8009f7e:	bd70      	pop	{r4, r5, r6, pc}

08009f80 <_strtod_l>:
 8009f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f84:	b09f      	sub	sp, #124	@ 0x7c
 8009f86:	460c      	mov	r4, r1
 8009f88:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	921a      	str	r2, [sp, #104]	@ 0x68
 8009f8e:	9005      	str	r0, [sp, #20]
 8009f90:	f04f 0a00 	mov.w	sl, #0
 8009f94:	f04f 0b00 	mov.w	fp, #0
 8009f98:	460a      	mov	r2, r1
 8009f9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f9c:	7811      	ldrb	r1, [r2, #0]
 8009f9e:	292b      	cmp	r1, #43	@ 0x2b
 8009fa0:	d04a      	beq.n	800a038 <_strtod_l+0xb8>
 8009fa2:	d838      	bhi.n	800a016 <_strtod_l+0x96>
 8009fa4:	290d      	cmp	r1, #13
 8009fa6:	d832      	bhi.n	800a00e <_strtod_l+0x8e>
 8009fa8:	2908      	cmp	r1, #8
 8009faa:	d832      	bhi.n	800a012 <_strtod_l+0x92>
 8009fac:	2900      	cmp	r1, #0
 8009fae:	d03b      	beq.n	800a028 <_strtod_l+0xa8>
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009fb4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009fb6:	782a      	ldrb	r2, [r5, #0]
 8009fb8:	2a30      	cmp	r2, #48	@ 0x30
 8009fba:	f040 80b3 	bne.w	800a124 <_strtod_l+0x1a4>
 8009fbe:	786a      	ldrb	r2, [r5, #1]
 8009fc0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009fc4:	2a58      	cmp	r2, #88	@ 0x58
 8009fc6:	d16e      	bne.n	800a0a6 <_strtod_l+0x126>
 8009fc8:	9302      	str	r3, [sp, #8]
 8009fca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fcc:	9301      	str	r3, [sp, #4]
 8009fce:	ab1a      	add	r3, sp, #104	@ 0x68
 8009fd0:	9300      	str	r3, [sp, #0]
 8009fd2:	4a8e      	ldr	r2, [pc, #568]	@ (800a20c <_strtod_l+0x28c>)
 8009fd4:	9805      	ldr	r0, [sp, #20]
 8009fd6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009fd8:	a919      	add	r1, sp, #100	@ 0x64
 8009fda:	f001 f913 	bl	800b204 <__gethex>
 8009fde:	f010 060f 	ands.w	r6, r0, #15
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	d005      	beq.n	8009ff2 <_strtod_l+0x72>
 8009fe6:	2e06      	cmp	r6, #6
 8009fe8:	d128      	bne.n	800a03c <_strtod_l+0xbc>
 8009fea:	3501      	adds	r5, #1
 8009fec:	2300      	movs	r3, #0
 8009fee:	9519      	str	r5, [sp, #100]	@ 0x64
 8009ff0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ff2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f040 858e 	bne.w	800ab16 <_strtod_l+0xb96>
 8009ffa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ffc:	b1cb      	cbz	r3, 800a032 <_strtod_l+0xb2>
 8009ffe:	4652      	mov	r2, sl
 800a000:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a004:	ec43 2b10 	vmov	d0, r2, r3
 800a008:	b01f      	add	sp, #124	@ 0x7c
 800a00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a00e:	2920      	cmp	r1, #32
 800a010:	d1ce      	bne.n	8009fb0 <_strtod_l+0x30>
 800a012:	3201      	adds	r2, #1
 800a014:	e7c1      	b.n	8009f9a <_strtod_l+0x1a>
 800a016:	292d      	cmp	r1, #45	@ 0x2d
 800a018:	d1ca      	bne.n	8009fb0 <_strtod_l+0x30>
 800a01a:	2101      	movs	r1, #1
 800a01c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a01e:	1c51      	adds	r1, r2, #1
 800a020:	9119      	str	r1, [sp, #100]	@ 0x64
 800a022:	7852      	ldrb	r2, [r2, #1]
 800a024:	2a00      	cmp	r2, #0
 800a026:	d1c5      	bne.n	8009fb4 <_strtod_l+0x34>
 800a028:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a02a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f040 8570 	bne.w	800ab12 <_strtod_l+0xb92>
 800a032:	4652      	mov	r2, sl
 800a034:	465b      	mov	r3, fp
 800a036:	e7e5      	b.n	800a004 <_strtod_l+0x84>
 800a038:	2100      	movs	r1, #0
 800a03a:	e7ef      	b.n	800a01c <_strtod_l+0x9c>
 800a03c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a03e:	b13a      	cbz	r2, 800a050 <_strtod_l+0xd0>
 800a040:	2135      	movs	r1, #53	@ 0x35
 800a042:	a81c      	add	r0, sp, #112	@ 0x70
 800a044:	f7ff ff3a 	bl	8009ebc <__copybits>
 800a048:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a04a:	9805      	ldr	r0, [sp, #20]
 800a04c:	f7ff fb08 	bl	8009660 <_Bfree>
 800a050:	3e01      	subs	r6, #1
 800a052:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a054:	2e04      	cmp	r6, #4
 800a056:	d806      	bhi.n	800a066 <_strtod_l+0xe6>
 800a058:	e8df f006 	tbb	[pc, r6]
 800a05c:	201d0314 	.word	0x201d0314
 800a060:	14          	.byte	0x14
 800a061:	00          	.byte	0x00
 800a062:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a066:	05e1      	lsls	r1, r4, #23
 800a068:	bf48      	it	mi
 800a06a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a06e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a072:	0d1b      	lsrs	r3, r3, #20
 800a074:	051b      	lsls	r3, r3, #20
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1bb      	bne.n	8009ff2 <_strtod_l+0x72>
 800a07a:	f7fe fb03 	bl	8008684 <__errno>
 800a07e:	2322      	movs	r3, #34	@ 0x22
 800a080:	6003      	str	r3, [r0, #0]
 800a082:	e7b6      	b.n	8009ff2 <_strtod_l+0x72>
 800a084:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a088:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a08c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a090:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a094:	e7e7      	b.n	800a066 <_strtod_l+0xe6>
 800a096:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a214 <_strtod_l+0x294>
 800a09a:	e7e4      	b.n	800a066 <_strtod_l+0xe6>
 800a09c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a0a0:	f04f 3aff 	mov.w	sl, #4294967295
 800a0a4:	e7df      	b.n	800a066 <_strtod_l+0xe6>
 800a0a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0a8:	1c5a      	adds	r2, r3, #1
 800a0aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0ac:	785b      	ldrb	r3, [r3, #1]
 800a0ae:	2b30      	cmp	r3, #48	@ 0x30
 800a0b0:	d0f9      	beq.n	800a0a6 <_strtod_l+0x126>
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d09d      	beq.n	8009ff2 <_strtod_l+0x72>
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800a0be:	2300      	movs	r3, #0
 800a0c0:	9308      	str	r3, [sp, #32]
 800a0c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0c4:	461f      	mov	r7, r3
 800a0c6:	220a      	movs	r2, #10
 800a0c8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a0ca:	7805      	ldrb	r5, [r0, #0]
 800a0cc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a0d0:	b2d9      	uxtb	r1, r3
 800a0d2:	2909      	cmp	r1, #9
 800a0d4:	d928      	bls.n	800a128 <_strtod_l+0x1a8>
 800a0d6:	494e      	ldr	r1, [pc, #312]	@ (800a210 <_strtod_l+0x290>)
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f000 ffe7 	bl	800b0ac <strncmp>
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	d032      	beq.n	800a148 <_strtod_l+0x1c8>
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	462a      	mov	r2, r5
 800a0e6:	4681      	mov	r9, r0
 800a0e8:	463d      	mov	r5, r7
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2a65      	cmp	r2, #101	@ 0x65
 800a0ee:	d001      	beq.n	800a0f4 <_strtod_l+0x174>
 800a0f0:	2a45      	cmp	r2, #69	@ 0x45
 800a0f2:	d114      	bne.n	800a11e <_strtod_l+0x19e>
 800a0f4:	b91d      	cbnz	r5, 800a0fe <_strtod_l+0x17e>
 800a0f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0f8:	4302      	orrs	r2, r0
 800a0fa:	d095      	beq.n	800a028 <_strtod_l+0xa8>
 800a0fc:	2500      	movs	r5, #0
 800a0fe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a100:	1c62      	adds	r2, r4, #1
 800a102:	9219      	str	r2, [sp, #100]	@ 0x64
 800a104:	7862      	ldrb	r2, [r4, #1]
 800a106:	2a2b      	cmp	r2, #43	@ 0x2b
 800a108:	d077      	beq.n	800a1fa <_strtod_l+0x27a>
 800a10a:	2a2d      	cmp	r2, #45	@ 0x2d
 800a10c:	d07b      	beq.n	800a206 <_strtod_l+0x286>
 800a10e:	f04f 0c00 	mov.w	ip, #0
 800a112:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a116:	2909      	cmp	r1, #9
 800a118:	f240 8082 	bls.w	800a220 <_strtod_l+0x2a0>
 800a11c:	9419      	str	r4, [sp, #100]	@ 0x64
 800a11e:	f04f 0800 	mov.w	r8, #0
 800a122:	e0a2      	b.n	800a26a <_strtod_l+0x2ea>
 800a124:	2300      	movs	r3, #0
 800a126:	e7c7      	b.n	800a0b8 <_strtod_l+0x138>
 800a128:	2f08      	cmp	r7, #8
 800a12a:	bfd5      	itete	le
 800a12c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a12e:	9908      	ldrgt	r1, [sp, #32]
 800a130:	fb02 3301 	mlale	r3, r2, r1, r3
 800a134:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a138:	f100 0001 	add.w	r0, r0, #1
 800a13c:	bfd4      	ite	le
 800a13e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a140:	9308      	strgt	r3, [sp, #32]
 800a142:	3701      	adds	r7, #1
 800a144:	9019      	str	r0, [sp, #100]	@ 0x64
 800a146:	e7bf      	b.n	800a0c8 <_strtod_l+0x148>
 800a148:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a14a:	1c5a      	adds	r2, r3, #1
 800a14c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a14e:	785a      	ldrb	r2, [r3, #1]
 800a150:	b37f      	cbz	r7, 800a1b2 <_strtod_l+0x232>
 800a152:	4681      	mov	r9, r0
 800a154:	463d      	mov	r5, r7
 800a156:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a15a:	2b09      	cmp	r3, #9
 800a15c:	d912      	bls.n	800a184 <_strtod_l+0x204>
 800a15e:	2301      	movs	r3, #1
 800a160:	e7c4      	b.n	800a0ec <_strtod_l+0x16c>
 800a162:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a164:	1c5a      	adds	r2, r3, #1
 800a166:	9219      	str	r2, [sp, #100]	@ 0x64
 800a168:	785a      	ldrb	r2, [r3, #1]
 800a16a:	3001      	adds	r0, #1
 800a16c:	2a30      	cmp	r2, #48	@ 0x30
 800a16e:	d0f8      	beq.n	800a162 <_strtod_l+0x1e2>
 800a170:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a174:	2b08      	cmp	r3, #8
 800a176:	f200 84d3 	bhi.w	800ab20 <_strtod_l+0xba0>
 800a17a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a17c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a17e:	4681      	mov	r9, r0
 800a180:	2000      	movs	r0, #0
 800a182:	4605      	mov	r5, r0
 800a184:	3a30      	subs	r2, #48	@ 0x30
 800a186:	f100 0301 	add.w	r3, r0, #1
 800a18a:	d02a      	beq.n	800a1e2 <_strtod_l+0x262>
 800a18c:	4499      	add	r9, r3
 800a18e:	eb00 0c05 	add.w	ip, r0, r5
 800a192:	462b      	mov	r3, r5
 800a194:	210a      	movs	r1, #10
 800a196:	4563      	cmp	r3, ip
 800a198:	d10d      	bne.n	800a1b6 <_strtod_l+0x236>
 800a19a:	1c69      	adds	r1, r5, #1
 800a19c:	4401      	add	r1, r0
 800a19e:	4428      	add	r0, r5
 800a1a0:	2808      	cmp	r0, #8
 800a1a2:	dc16      	bgt.n	800a1d2 <_strtod_l+0x252>
 800a1a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a1a6:	230a      	movs	r3, #10
 800a1a8:	fb03 2300 	mla	r3, r3, r0, r2
 800a1ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	e018      	b.n	800a1e4 <_strtod_l+0x264>
 800a1b2:	4638      	mov	r0, r7
 800a1b4:	e7da      	b.n	800a16c <_strtod_l+0x1ec>
 800a1b6:	2b08      	cmp	r3, #8
 800a1b8:	f103 0301 	add.w	r3, r3, #1
 800a1bc:	dc03      	bgt.n	800a1c6 <_strtod_l+0x246>
 800a1be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a1c0:	434e      	muls	r6, r1
 800a1c2:	960a      	str	r6, [sp, #40]	@ 0x28
 800a1c4:	e7e7      	b.n	800a196 <_strtod_l+0x216>
 800a1c6:	2b10      	cmp	r3, #16
 800a1c8:	bfde      	ittt	le
 800a1ca:	9e08      	ldrle	r6, [sp, #32]
 800a1cc:	434e      	mulle	r6, r1
 800a1ce:	9608      	strle	r6, [sp, #32]
 800a1d0:	e7e1      	b.n	800a196 <_strtod_l+0x216>
 800a1d2:	280f      	cmp	r0, #15
 800a1d4:	dceb      	bgt.n	800a1ae <_strtod_l+0x22e>
 800a1d6:	9808      	ldr	r0, [sp, #32]
 800a1d8:	230a      	movs	r3, #10
 800a1da:	fb03 2300 	mla	r3, r3, r0, r2
 800a1de:	9308      	str	r3, [sp, #32]
 800a1e0:	e7e5      	b.n	800a1ae <_strtod_l+0x22e>
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a1e6:	1c50      	adds	r0, r2, #1
 800a1e8:	9019      	str	r0, [sp, #100]	@ 0x64
 800a1ea:	7852      	ldrb	r2, [r2, #1]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	460d      	mov	r5, r1
 800a1f0:	e7b1      	b.n	800a156 <_strtod_l+0x1d6>
 800a1f2:	f04f 0900 	mov.w	r9, #0
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e77d      	b.n	800a0f6 <_strtod_l+0x176>
 800a1fa:	f04f 0c00 	mov.w	ip, #0
 800a1fe:	1ca2      	adds	r2, r4, #2
 800a200:	9219      	str	r2, [sp, #100]	@ 0x64
 800a202:	78a2      	ldrb	r2, [r4, #2]
 800a204:	e785      	b.n	800a112 <_strtod_l+0x192>
 800a206:	f04f 0c01 	mov.w	ip, #1
 800a20a:	e7f8      	b.n	800a1fe <_strtod_l+0x27e>
 800a20c:	0800dbc8 	.word	0x0800dbc8
 800a210:	0800dbb0 	.word	0x0800dbb0
 800a214:	7ff00000 	.word	0x7ff00000
 800a218:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a21a:	1c51      	adds	r1, r2, #1
 800a21c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a21e:	7852      	ldrb	r2, [r2, #1]
 800a220:	2a30      	cmp	r2, #48	@ 0x30
 800a222:	d0f9      	beq.n	800a218 <_strtod_l+0x298>
 800a224:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a228:	2908      	cmp	r1, #8
 800a22a:	f63f af78 	bhi.w	800a11e <_strtod_l+0x19e>
 800a22e:	3a30      	subs	r2, #48	@ 0x30
 800a230:	920e      	str	r2, [sp, #56]	@ 0x38
 800a232:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a234:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a236:	f04f 080a 	mov.w	r8, #10
 800a23a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a23c:	1c56      	adds	r6, r2, #1
 800a23e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a240:	7852      	ldrb	r2, [r2, #1]
 800a242:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a246:	f1be 0f09 	cmp.w	lr, #9
 800a24a:	d939      	bls.n	800a2c0 <_strtod_l+0x340>
 800a24c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a24e:	1a76      	subs	r6, r6, r1
 800a250:	2e08      	cmp	r6, #8
 800a252:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a256:	dc03      	bgt.n	800a260 <_strtod_l+0x2e0>
 800a258:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a25a:	4588      	cmp	r8, r1
 800a25c:	bfa8      	it	ge
 800a25e:	4688      	movge	r8, r1
 800a260:	f1bc 0f00 	cmp.w	ip, #0
 800a264:	d001      	beq.n	800a26a <_strtod_l+0x2ea>
 800a266:	f1c8 0800 	rsb	r8, r8, #0
 800a26a:	2d00      	cmp	r5, #0
 800a26c:	d14e      	bne.n	800a30c <_strtod_l+0x38c>
 800a26e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a270:	4308      	orrs	r0, r1
 800a272:	f47f aebe 	bne.w	8009ff2 <_strtod_l+0x72>
 800a276:	2b00      	cmp	r3, #0
 800a278:	f47f aed6 	bne.w	800a028 <_strtod_l+0xa8>
 800a27c:	2a69      	cmp	r2, #105	@ 0x69
 800a27e:	d028      	beq.n	800a2d2 <_strtod_l+0x352>
 800a280:	dc25      	bgt.n	800a2ce <_strtod_l+0x34e>
 800a282:	2a49      	cmp	r2, #73	@ 0x49
 800a284:	d025      	beq.n	800a2d2 <_strtod_l+0x352>
 800a286:	2a4e      	cmp	r2, #78	@ 0x4e
 800a288:	f47f aece 	bne.w	800a028 <_strtod_l+0xa8>
 800a28c:	499b      	ldr	r1, [pc, #620]	@ (800a4fc <_strtod_l+0x57c>)
 800a28e:	a819      	add	r0, sp, #100	@ 0x64
 800a290:	f001 f9da 	bl	800b648 <__match>
 800a294:	2800      	cmp	r0, #0
 800a296:	f43f aec7 	beq.w	800a028 <_strtod_l+0xa8>
 800a29a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	2b28      	cmp	r3, #40	@ 0x28
 800a2a0:	d12e      	bne.n	800a300 <_strtod_l+0x380>
 800a2a2:	4997      	ldr	r1, [pc, #604]	@ (800a500 <_strtod_l+0x580>)
 800a2a4:	aa1c      	add	r2, sp, #112	@ 0x70
 800a2a6:	a819      	add	r0, sp, #100	@ 0x64
 800a2a8:	f001 f9e2 	bl	800b670 <__hexnan>
 800a2ac:	2805      	cmp	r0, #5
 800a2ae:	d127      	bne.n	800a300 <_strtod_l+0x380>
 800a2b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a2b2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a2b6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a2ba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a2be:	e698      	b.n	8009ff2 <_strtod_l+0x72>
 800a2c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a2c2:	fb08 2101 	mla	r1, r8, r1, r2
 800a2c6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a2ca:	920e      	str	r2, [sp, #56]	@ 0x38
 800a2cc:	e7b5      	b.n	800a23a <_strtod_l+0x2ba>
 800a2ce:	2a6e      	cmp	r2, #110	@ 0x6e
 800a2d0:	e7da      	b.n	800a288 <_strtod_l+0x308>
 800a2d2:	498c      	ldr	r1, [pc, #560]	@ (800a504 <_strtod_l+0x584>)
 800a2d4:	a819      	add	r0, sp, #100	@ 0x64
 800a2d6:	f001 f9b7 	bl	800b648 <__match>
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	f43f aea4 	beq.w	800a028 <_strtod_l+0xa8>
 800a2e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2e2:	4989      	ldr	r1, [pc, #548]	@ (800a508 <_strtod_l+0x588>)
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	a819      	add	r0, sp, #100	@ 0x64
 800a2e8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a2ea:	f001 f9ad 	bl	800b648 <__match>
 800a2ee:	b910      	cbnz	r0, 800a2f6 <_strtod_l+0x376>
 800a2f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	9319      	str	r3, [sp, #100]	@ 0x64
 800a2f6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a518 <_strtod_l+0x598>
 800a2fa:	f04f 0a00 	mov.w	sl, #0
 800a2fe:	e678      	b.n	8009ff2 <_strtod_l+0x72>
 800a300:	4882      	ldr	r0, [pc, #520]	@ (800a50c <_strtod_l+0x58c>)
 800a302:	f000 fef5 	bl	800b0f0 <nan>
 800a306:	ec5b ab10 	vmov	sl, fp, d0
 800a30a:	e672      	b.n	8009ff2 <_strtod_l+0x72>
 800a30c:	eba8 0309 	sub.w	r3, r8, r9
 800a310:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a312:	9309      	str	r3, [sp, #36]	@ 0x24
 800a314:	2f00      	cmp	r7, #0
 800a316:	bf08      	it	eq
 800a318:	462f      	moveq	r7, r5
 800a31a:	2d10      	cmp	r5, #16
 800a31c:	462c      	mov	r4, r5
 800a31e:	bfa8      	it	ge
 800a320:	2410      	movge	r4, #16
 800a322:	f7f6 f8ff 	bl	8000524 <__aeabi_ui2d>
 800a326:	2d09      	cmp	r5, #9
 800a328:	4682      	mov	sl, r0
 800a32a:	468b      	mov	fp, r1
 800a32c:	dc13      	bgt.n	800a356 <_strtod_l+0x3d6>
 800a32e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a330:	2b00      	cmp	r3, #0
 800a332:	f43f ae5e 	beq.w	8009ff2 <_strtod_l+0x72>
 800a336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a338:	dd78      	ble.n	800a42c <_strtod_l+0x4ac>
 800a33a:	2b16      	cmp	r3, #22
 800a33c:	dc5f      	bgt.n	800a3fe <_strtod_l+0x47e>
 800a33e:	4974      	ldr	r1, [pc, #464]	@ (800a510 <_strtod_l+0x590>)
 800a340:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a344:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a348:	4652      	mov	r2, sl
 800a34a:	465b      	mov	r3, fp
 800a34c:	f7f6 f964 	bl	8000618 <__aeabi_dmul>
 800a350:	4682      	mov	sl, r0
 800a352:	468b      	mov	fp, r1
 800a354:	e64d      	b.n	8009ff2 <_strtod_l+0x72>
 800a356:	4b6e      	ldr	r3, [pc, #440]	@ (800a510 <_strtod_l+0x590>)
 800a358:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a35c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a360:	f7f6 f95a 	bl	8000618 <__aeabi_dmul>
 800a364:	4682      	mov	sl, r0
 800a366:	9808      	ldr	r0, [sp, #32]
 800a368:	468b      	mov	fp, r1
 800a36a:	f7f6 f8db 	bl	8000524 <__aeabi_ui2d>
 800a36e:	4602      	mov	r2, r0
 800a370:	460b      	mov	r3, r1
 800a372:	4650      	mov	r0, sl
 800a374:	4659      	mov	r1, fp
 800a376:	f7f5 ff99 	bl	80002ac <__adddf3>
 800a37a:	2d0f      	cmp	r5, #15
 800a37c:	4682      	mov	sl, r0
 800a37e:	468b      	mov	fp, r1
 800a380:	ddd5      	ble.n	800a32e <_strtod_l+0x3ae>
 800a382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a384:	1b2c      	subs	r4, r5, r4
 800a386:	441c      	add	r4, r3
 800a388:	2c00      	cmp	r4, #0
 800a38a:	f340 8096 	ble.w	800a4ba <_strtod_l+0x53a>
 800a38e:	f014 030f 	ands.w	r3, r4, #15
 800a392:	d00a      	beq.n	800a3aa <_strtod_l+0x42a>
 800a394:	495e      	ldr	r1, [pc, #376]	@ (800a510 <_strtod_l+0x590>)
 800a396:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a39a:	4652      	mov	r2, sl
 800a39c:	465b      	mov	r3, fp
 800a39e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3a2:	f7f6 f939 	bl	8000618 <__aeabi_dmul>
 800a3a6:	4682      	mov	sl, r0
 800a3a8:	468b      	mov	fp, r1
 800a3aa:	f034 040f 	bics.w	r4, r4, #15
 800a3ae:	d073      	beq.n	800a498 <_strtod_l+0x518>
 800a3b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a3b4:	dd48      	ble.n	800a448 <_strtod_l+0x4c8>
 800a3b6:	2400      	movs	r4, #0
 800a3b8:	46a0      	mov	r8, r4
 800a3ba:	940a      	str	r4, [sp, #40]	@ 0x28
 800a3bc:	46a1      	mov	r9, r4
 800a3be:	9a05      	ldr	r2, [sp, #20]
 800a3c0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a518 <_strtod_l+0x598>
 800a3c4:	2322      	movs	r3, #34	@ 0x22
 800a3c6:	6013      	str	r3, [r2, #0]
 800a3c8:	f04f 0a00 	mov.w	sl, #0
 800a3cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f43f ae0f 	beq.w	8009ff2 <_strtod_l+0x72>
 800a3d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3d6:	9805      	ldr	r0, [sp, #20]
 800a3d8:	f7ff f942 	bl	8009660 <_Bfree>
 800a3dc:	9805      	ldr	r0, [sp, #20]
 800a3de:	4649      	mov	r1, r9
 800a3e0:	f7ff f93e 	bl	8009660 <_Bfree>
 800a3e4:	9805      	ldr	r0, [sp, #20]
 800a3e6:	4641      	mov	r1, r8
 800a3e8:	f7ff f93a 	bl	8009660 <_Bfree>
 800a3ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a3ee:	9805      	ldr	r0, [sp, #20]
 800a3f0:	f7ff f936 	bl	8009660 <_Bfree>
 800a3f4:	9805      	ldr	r0, [sp, #20]
 800a3f6:	4621      	mov	r1, r4
 800a3f8:	f7ff f932 	bl	8009660 <_Bfree>
 800a3fc:	e5f9      	b.n	8009ff2 <_strtod_l+0x72>
 800a3fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a400:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a404:	4293      	cmp	r3, r2
 800a406:	dbbc      	blt.n	800a382 <_strtod_l+0x402>
 800a408:	4c41      	ldr	r4, [pc, #260]	@ (800a510 <_strtod_l+0x590>)
 800a40a:	f1c5 050f 	rsb	r5, r5, #15
 800a40e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a412:	4652      	mov	r2, sl
 800a414:	465b      	mov	r3, fp
 800a416:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a41a:	f7f6 f8fd 	bl	8000618 <__aeabi_dmul>
 800a41e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a420:	1b5d      	subs	r5, r3, r5
 800a422:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a426:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a42a:	e78f      	b.n	800a34c <_strtod_l+0x3cc>
 800a42c:	3316      	adds	r3, #22
 800a42e:	dba8      	blt.n	800a382 <_strtod_l+0x402>
 800a430:	4b37      	ldr	r3, [pc, #220]	@ (800a510 <_strtod_l+0x590>)
 800a432:	eba9 0808 	sub.w	r8, r9, r8
 800a436:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a43a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a43e:	4650      	mov	r0, sl
 800a440:	4659      	mov	r1, fp
 800a442:	f7f6 fa13 	bl	800086c <__aeabi_ddiv>
 800a446:	e783      	b.n	800a350 <_strtod_l+0x3d0>
 800a448:	4b32      	ldr	r3, [pc, #200]	@ (800a514 <_strtod_l+0x594>)
 800a44a:	9308      	str	r3, [sp, #32]
 800a44c:	2300      	movs	r3, #0
 800a44e:	1124      	asrs	r4, r4, #4
 800a450:	4650      	mov	r0, sl
 800a452:	4659      	mov	r1, fp
 800a454:	461e      	mov	r6, r3
 800a456:	2c01      	cmp	r4, #1
 800a458:	dc21      	bgt.n	800a49e <_strtod_l+0x51e>
 800a45a:	b10b      	cbz	r3, 800a460 <_strtod_l+0x4e0>
 800a45c:	4682      	mov	sl, r0
 800a45e:	468b      	mov	fp, r1
 800a460:	492c      	ldr	r1, [pc, #176]	@ (800a514 <_strtod_l+0x594>)
 800a462:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a466:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a46a:	4652      	mov	r2, sl
 800a46c:	465b      	mov	r3, fp
 800a46e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a472:	f7f6 f8d1 	bl	8000618 <__aeabi_dmul>
 800a476:	4b28      	ldr	r3, [pc, #160]	@ (800a518 <_strtod_l+0x598>)
 800a478:	460a      	mov	r2, r1
 800a47a:	400b      	ands	r3, r1
 800a47c:	4927      	ldr	r1, [pc, #156]	@ (800a51c <_strtod_l+0x59c>)
 800a47e:	428b      	cmp	r3, r1
 800a480:	4682      	mov	sl, r0
 800a482:	d898      	bhi.n	800a3b6 <_strtod_l+0x436>
 800a484:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a488:	428b      	cmp	r3, r1
 800a48a:	bf86      	itte	hi
 800a48c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a520 <_strtod_l+0x5a0>
 800a490:	f04f 3aff 	movhi.w	sl, #4294967295
 800a494:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a498:	2300      	movs	r3, #0
 800a49a:	9308      	str	r3, [sp, #32]
 800a49c:	e07a      	b.n	800a594 <_strtod_l+0x614>
 800a49e:	07e2      	lsls	r2, r4, #31
 800a4a0:	d505      	bpl.n	800a4ae <_strtod_l+0x52e>
 800a4a2:	9b08      	ldr	r3, [sp, #32]
 800a4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a8:	f7f6 f8b6 	bl	8000618 <__aeabi_dmul>
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	9a08      	ldr	r2, [sp, #32]
 800a4b0:	3208      	adds	r2, #8
 800a4b2:	3601      	adds	r6, #1
 800a4b4:	1064      	asrs	r4, r4, #1
 800a4b6:	9208      	str	r2, [sp, #32]
 800a4b8:	e7cd      	b.n	800a456 <_strtod_l+0x4d6>
 800a4ba:	d0ed      	beq.n	800a498 <_strtod_l+0x518>
 800a4bc:	4264      	negs	r4, r4
 800a4be:	f014 020f 	ands.w	r2, r4, #15
 800a4c2:	d00a      	beq.n	800a4da <_strtod_l+0x55a>
 800a4c4:	4b12      	ldr	r3, [pc, #72]	@ (800a510 <_strtod_l+0x590>)
 800a4c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4ca:	4650      	mov	r0, sl
 800a4cc:	4659      	mov	r1, fp
 800a4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d2:	f7f6 f9cb 	bl	800086c <__aeabi_ddiv>
 800a4d6:	4682      	mov	sl, r0
 800a4d8:	468b      	mov	fp, r1
 800a4da:	1124      	asrs	r4, r4, #4
 800a4dc:	d0dc      	beq.n	800a498 <_strtod_l+0x518>
 800a4de:	2c1f      	cmp	r4, #31
 800a4e0:	dd20      	ble.n	800a524 <_strtod_l+0x5a4>
 800a4e2:	2400      	movs	r4, #0
 800a4e4:	46a0      	mov	r8, r4
 800a4e6:	940a      	str	r4, [sp, #40]	@ 0x28
 800a4e8:	46a1      	mov	r9, r4
 800a4ea:	9a05      	ldr	r2, [sp, #20]
 800a4ec:	2322      	movs	r3, #34	@ 0x22
 800a4ee:	f04f 0a00 	mov.w	sl, #0
 800a4f2:	f04f 0b00 	mov.w	fp, #0
 800a4f6:	6013      	str	r3, [r2, #0]
 800a4f8:	e768      	b.n	800a3cc <_strtod_l+0x44c>
 800a4fa:	bf00      	nop
 800a4fc:	0800d97c 	.word	0x0800d97c
 800a500:	0800dbb4 	.word	0x0800dbb4
 800a504:	0800d974 	.word	0x0800d974
 800a508:	0800d9e7 	.word	0x0800d9e7
 800a50c:	0800d9e3 	.word	0x0800d9e3
 800a510:	0800dae8 	.word	0x0800dae8
 800a514:	0800dac0 	.word	0x0800dac0
 800a518:	7ff00000 	.word	0x7ff00000
 800a51c:	7ca00000 	.word	0x7ca00000
 800a520:	7fefffff 	.word	0x7fefffff
 800a524:	f014 0310 	ands.w	r3, r4, #16
 800a528:	bf18      	it	ne
 800a52a:	236a      	movne	r3, #106	@ 0x6a
 800a52c:	4ea9      	ldr	r6, [pc, #676]	@ (800a7d4 <_strtod_l+0x854>)
 800a52e:	9308      	str	r3, [sp, #32]
 800a530:	4650      	mov	r0, sl
 800a532:	4659      	mov	r1, fp
 800a534:	2300      	movs	r3, #0
 800a536:	07e2      	lsls	r2, r4, #31
 800a538:	d504      	bpl.n	800a544 <_strtod_l+0x5c4>
 800a53a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a53e:	f7f6 f86b 	bl	8000618 <__aeabi_dmul>
 800a542:	2301      	movs	r3, #1
 800a544:	1064      	asrs	r4, r4, #1
 800a546:	f106 0608 	add.w	r6, r6, #8
 800a54a:	d1f4      	bne.n	800a536 <_strtod_l+0x5b6>
 800a54c:	b10b      	cbz	r3, 800a552 <_strtod_l+0x5d2>
 800a54e:	4682      	mov	sl, r0
 800a550:	468b      	mov	fp, r1
 800a552:	9b08      	ldr	r3, [sp, #32]
 800a554:	b1b3      	cbz	r3, 800a584 <_strtod_l+0x604>
 800a556:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a55a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a55e:	2b00      	cmp	r3, #0
 800a560:	4659      	mov	r1, fp
 800a562:	dd0f      	ble.n	800a584 <_strtod_l+0x604>
 800a564:	2b1f      	cmp	r3, #31
 800a566:	dd55      	ble.n	800a614 <_strtod_l+0x694>
 800a568:	2b34      	cmp	r3, #52	@ 0x34
 800a56a:	bfde      	ittt	le
 800a56c:	f04f 33ff 	movle.w	r3, #4294967295
 800a570:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a574:	4093      	lslle	r3, r2
 800a576:	f04f 0a00 	mov.w	sl, #0
 800a57a:	bfcc      	ite	gt
 800a57c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a580:	ea03 0b01 	andle.w	fp, r3, r1
 800a584:	2200      	movs	r2, #0
 800a586:	2300      	movs	r3, #0
 800a588:	4650      	mov	r0, sl
 800a58a:	4659      	mov	r1, fp
 800a58c:	f7f6 faac 	bl	8000ae8 <__aeabi_dcmpeq>
 800a590:	2800      	cmp	r0, #0
 800a592:	d1a6      	bne.n	800a4e2 <_strtod_l+0x562>
 800a594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a596:	9300      	str	r3, [sp, #0]
 800a598:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a59a:	9805      	ldr	r0, [sp, #20]
 800a59c:	462b      	mov	r3, r5
 800a59e:	463a      	mov	r2, r7
 800a5a0:	f7ff f8c6 	bl	8009730 <__s2b>
 800a5a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	f43f af05 	beq.w	800a3b6 <_strtod_l+0x436>
 800a5ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5ae:	2a00      	cmp	r2, #0
 800a5b0:	eba9 0308 	sub.w	r3, r9, r8
 800a5b4:	bfa8      	it	ge
 800a5b6:	2300      	movge	r3, #0
 800a5b8:	9312      	str	r3, [sp, #72]	@ 0x48
 800a5ba:	2400      	movs	r4, #0
 800a5bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a5c0:	9316      	str	r3, [sp, #88]	@ 0x58
 800a5c2:	46a0      	mov	r8, r4
 800a5c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5c6:	9805      	ldr	r0, [sp, #20]
 800a5c8:	6859      	ldr	r1, [r3, #4]
 800a5ca:	f7ff f809 	bl	80095e0 <_Balloc>
 800a5ce:	4681      	mov	r9, r0
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	f43f aef4 	beq.w	800a3be <_strtod_l+0x43e>
 800a5d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5d8:	691a      	ldr	r2, [r3, #16]
 800a5da:	3202      	adds	r2, #2
 800a5dc:	f103 010c 	add.w	r1, r3, #12
 800a5e0:	0092      	lsls	r2, r2, #2
 800a5e2:	300c      	adds	r0, #12
 800a5e4:	f7fe f87b 	bl	80086de <memcpy>
 800a5e8:	ec4b ab10 	vmov	d0, sl, fp
 800a5ec:	9805      	ldr	r0, [sp, #20]
 800a5ee:	aa1c      	add	r2, sp, #112	@ 0x70
 800a5f0:	a91b      	add	r1, sp, #108	@ 0x6c
 800a5f2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a5f6:	f7ff fbd7 	bl	8009da8 <__d2b>
 800a5fa:	901a      	str	r0, [sp, #104]	@ 0x68
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	f43f aede 	beq.w	800a3be <_strtod_l+0x43e>
 800a602:	9805      	ldr	r0, [sp, #20]
 800a604:	2101      	movs	r1, #1
 800a606:	f7ff f929 	bl	800985c <__i2b>
 800a60a:	4680      	mov	r8, r0
 800a60c:	b948      	cbnz	r0, 800a622 <_strtod_l+0x6a2>
 800a60e:	f04f 0800 	mov.w	r8, #0
 800a612:	e6d4      	b.n	800a3be <_strtod_l+0x43e>
 800a614:	f04f 32ff 	mov.w	r2, #4294967295
 800a618:	fa02 f303 	lsl.w	r3, r2, r3
 800a61c:	ea03 0a0a 	and.w	sl, r3, sl
 800a620:	e7b0      	b.n	800a584 <_strtod_l+0x604>
 800a622:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a624:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a626:	2d00      	cmp	r5, #0
 800a628:	bfab      	itete	ge
 800a62a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a62c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a62e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a630:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a632:	bfac      	ite	ge
 800a634:	18ef      	addge	r7, r5, r3
 800a636:	1b5e      	sublt	r6, r3, r5
 800a638:	9b08      	ldr	r3, [sp, #32]
 800a63a:	1aed      	subs	r5, r5, r3
 800a63c:	4415      	add	r5, r2
 800a63e:	4b66      	ldr	r3, [pc, #408]	@ (800a7d8 <_strtod_l+0x858>)
 800a640:	3d01      	subs	r5, #1
 800a642:	429d      	cmp	r5, r3
 800a644:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a648:	da50      	bge.n	800a6ec <_strtod_l+0x76c>
 800a64a:	1b5b      	subs	r3, r3, r5
 800a64c:	2b1f      	cmp	r3, #31
 800a64e:	eba2 0203 	sub.w	r2, r2, r3
 800a652:	f04f 0101 	mov.w	r1, #1
 800a656:	dc3d      	bgt.n	800a6d4 <_strtod_l+0x754>
 800a658:	fa01 f303 	lsl.w	r3, r1, r3
 800a65c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a65e:	2300      	movs	r3, #0
 800a660:	9310      	str	r3, [sp, #64]	@ 0x40
 800a662:	18bd      	adds	r5, r7, r2
 800a664:	9b08      	ldr	r3, [sp, #32]
 800a666:	42af      	cmp	r7, r5
 800a668:	4416      	add	r6, r2
 800a66a:	441e      	add	r6, r3
 800a66c:	463b      	mov	r3, r7
 800a66e:	bfa8      	it	ge
 800a670:	462b      	movge	r3, r5
 800a672:	42b3      	cmp	r3, r6
 800a674:	bfa8      	it	ge
 800a676:	4633      	movge	r3, r6
 800a678:	2b00      	cmp	r3, #0
 800a67a:	bfc2      	ittt	gt
 800a67c:	1aed      	subgt	r5, r5, r3
 800a67e:	1af6      	subgt	r6, r6, r3
 800a680:	1aff      	subgt	r7, r7, r3
 800a682:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a684:	2b00      	cmp	r3, #0
 800a686:	dd16      	ble.n	800a6b6 <_strtod_l+0x736>
 800a688:	4641      	mov	r1, r8
 800a68a:	9805      	ldr	r0, [sp, #20]
 800a68c:	461a      	mov	r2, r3
 800a68e:	f7ff f9a5 	bl	80099dc <__pow5mult>
 800a692:	4680      	mov	r8, r0
 800a694:	2800      	cmp	r0, #0
 800a696:	d0ba      	beq.n	800a60e <_strtod_l+0x68e>
 800a698:	4601      	mov	r1, r0
 800a69a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a69c:	9805      	ldr	r0, [sp, #20]
 800a69e:	f7ff f8f3 	bl	8009888 <__multiply>
 800a6a2:	900e      	str	r0, [sp, #56]	@ 0x38
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	f43f ae8a 	beq.w	800a3be <_strtod_l+0x43e>
 800a6aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6ac:	9805      	ldr	r0, [sp, #20]
 800a6ae:	f7fe ffd7 	bl	8009660 <_Bfree>
 800a6b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a6b6:	2d00      	cmp	r5, #0
 800a6b8:	dc1d      	bgt.n	800a6f6 <_strtod_l+0x776>
 800a6ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	dd23      	ble.n	800a708 <_strtod_l+0x788>
 800a6c0:	4649      	mov	r1, r9
 800a6c2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a6c4:	9805      	ldr	r0, [sp, #20]
 800a6c6:	f7ff f989 	bl	80099dc <__pow5mult>
 800a6ca:	4681      	mov	r9, r0
 800a6cc:	b9e0      	cbnz	r0, 800a708 <_strtod_l+0x788>
 800a6ce:	f04f 0900 	mov.w	r9, #0
 800a6d2:	e674      	b.n	800a3be <_strtod_l+0x43e>
 800a6d4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a6d8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a6dc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a6e0:	35e2      	adds	r5, #226	@ 0xe2
 800a6e2:	fa01 f305 	lsl.w	r3, r1, r5
 800a6e6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a6e8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a6ea:	e7ba      	b.n	800a662 <_strtod_l+0x6e2>
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	9310      	str	r3, [sp, #64]	@ 0x40
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a6f4:	e7b5      	b.n	800a662 <_strtod_l+0x6e2>
 800a6f6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6f8:	9805      	ldr	r0, [sp, #20]
 800a6fa:	462a      	mov	r2, r5
 800a6fc:	f7ff f9c8 	bl	8009a90 <__lshift>
 800a700:	901a      	str	r0, [sp, #104]	@ 0x68
 800a702:	2800      	cmp	r0, #0
 800a704:	d1d9      	bne.n	800a6ba <_strtod_l+0x73a>
 800a706:	e65a      	b.n	800a3be <_strtod_l+0x43e>
 800a708:	2e00      	cmp	r6, #0
 800a70a:	dd07      	ble.n	800a71c <_strtod_l+0x79c>
 800a70c:	4649      	mov	r1, r9
 800a70e:	9805      	ldr	r0, [sp, #20]
 800a710:	4632      	mov	r2, r6
 800a712:	f7ff f9bd 	bl	8009a90 <__lshift>
 800a716:	4681      	mov	r9, r0
 800a718:	2800      	cmp	r0, #0
 800a71a:	d0d8      	beq.n	800a6ce <_strtod_l+0x74e>
 800a71c:	2f00      	cmp	r7, #0
 800a71e:	dd08      	ble.n	800a732 <_strtod_l+0x7b2>
 800a720:	4641      	mov	r1, r8
 800a722:	9805      	ldr	r0, [sp, #20]
 800a724:	463a      	mov	r2, r7
 800a726:	f7ff f9b3 	bl	8009a90 <__lshift>
 800a72a:	4680      	mov	r8, r0
 800a72c:	2800      	cmp	r0, #0
 800a72e:	f43f ae46 	beq.w	800a3be <_strtod_l+0x43e>
 800a732:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a734:	9805      	ldr	r0, [sp, #20]
 800a736:	464a      	mov	r2, r9
 800a738:	f7ff fa32 	bl	8009ba0 <__mdiff>
 800a73c:	4604      	mov	r4, r0
 800a73e:	2800      	cmp	r0, #0
 800a740:	f43f ae3d 	beq.w	800a3be <_strtod_l+0x43e>
 800a744:	68c3      	ldr	r3, [r0, #12]
 800a746:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a748:	2300      	movs	r3, #0
 800a74a:	60c3      	str	r3, [r0, #12]
 800a74c:	4641      	mov	r1, r8
 800a74e:	f7ff fa0b 	bl	8009b68 <__mcmp>
 800a752:	2800      	cmp	r0, #0
 800a754:	da46      	bge.n	800a7e4 <_strtod_l+0x864>
 800a756:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a758:	ea53 030a 	orrs.w	r3, r3, sl
 800a75c:	d16c      	bne.n	800a838 <_strtod_l+0x8b8>
 800a75e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a762:	2b00      	cmp	r3, #0
 800a764:	d168      	bne.n	800a838 <_strtod_l+0x8b8>
 800a766:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a76a:	0d1b      	lsrs	r3, r3, #20
 800a76c:	051b      	lsls	r3, r3, #20
 800a76e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a772:	d961      	bls.n	800a838 <_strtod_l+0x8b8>
 800a774:	6963      	ldr	r3, [r4, #20]
 800a776:	b913      	cbnz	r3, 800a77e <_strtod_l+0x7fe>
 800a778:	6923      	ldr	r3, [r4, #16]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	dd5c      	ble.n	800a838 <_strtod_l+0x8b8>
 800a77e:	4621      	mov	r1, r4
 800a780:	2201      	movs	r2, #1
 800a782:	9805      	ldr	r0, [sp, #20]
 800a784:	f7ff f984 	bl	8009a90 <__lshift>
 800a788:	4641      	mov	r1, r8
 800a78a:	4604      	mov	r4, r0
 800a78c:	f7ff f9ec 	bl	8009b68 <__mcmp>
 800a790:	2800      	cmp	r0, #0
 800a792:	dd51      	ble.n	800a838 <_strtod_l+0x8b8>
 800a794:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a798:	9a08      	ldr	r2, [sp, #32]
 800a79a:	0d1b      	lsrs	r3, r3, #20
 800a79c:	051b      	lsls	r3, r3, #20
 800a79e:	2a00      	cmp	r2, #0
 800a7a0:	d06b      	beq.n	800a87a <_strtod_l+0x8fa>
 800a7a2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a7a6:	d868      	bhi.n	800a87a <_strtod_l+0x8fa>
 800a7a8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a7ac:	f67f ae9d 	bls.w	800a4ea <_strtod_l+0x56a>
 800a7b0:	4b0a      	ldr	r3, [pc, #40]	@ (800a7dc <_strtod_l+0x85c>)
 800a7b2:	4650      	mov	r0, sl
 800a7b4:	4659      	mov	r1, fp
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f7f5 ff2e 	bl	8000618 <__aeabi_dmul>
 800a7bc:	4b08      	ldr	r3, [pc, #32]	@ (800a7e0 <_strtod_l+0x860>)
 800a7be:	400b      	ands	r3, r1
 800a7c0:	4682      	mov	sl, r0
 800a7c2:	468b      	mov	fp, r1
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f47f ae05 	bne.w	800a3d4 <_strtod_l+0x454>
 800a7ca:	9a05      	ldr	r2, [sp, #20]
 800a7cc:	2322      	movs	r3, #34	@ 0x22
 800a7ce:	6013      	str	r3, [r2, #0]
 800a7d0:	e600      	b.n	800a3d4 <_strtod_l+0x454>
 800a7d2:	bf00      	nop
 800a7d4:	0800dbe0 	.word	0x0800dbe0
 800a7d8:	fffffc02 	.word	0xfffffc02
 800a7dc:	39500000 	.word	0x39500000
 800a7e0:	7ff00000 	.word	0x7ff00000
 800a7e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a7e8:	d165      	bne.n	800a8b6 <_strtod_l+0x936>
 800a7ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a7ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7f0:	b35a      	cbz	r2, 800a84a <_strtod_l+0x8ca>
 800a7f2:	4a9f      	ldr	r2, [pc, #636]	@ (800aa70 <_strtod_l+0xaf0>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d12b      	bne.n	800a850 <_strtod_l+0x8d0>
 800a7f8:	9b08      	ldr	r3, [sp, #32]
 800a7fa:	4651      	mov	r1, sl
 800a7fc:	b303      	cbz	r3, 800a840 <_strtod_l+0x8c0>
 800a7fe:	4b9d      	ldr	r3, [pc, #628]	@ (800aa74 <_strtod_l+0xaf4>)
 800a800:	465a      	mov	r2, fp
 800a802:	4013      	ands	r3, r2
 800a804:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a808:	f04f 32ff 	mov.w	r2, #4294967295
 800a80c:	d81b      	bhi.n	800a846 <_strtod_l+0x8c6>
 800a80e:	0d1b      	lsrs	r3, r3, #20
 800a810:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a814:	fa02 f303 	lsl.w	r3, r2, r3
 800a818:	4299      	cmp	r1, r3
 800a81a:	d119      	bne.n	800a850 <_strtod_l+0x8d0>
 800a81c:	4b96      	ldr	r3, [pc, #600]	@ (800aa78 <_strtod_l+0xaf8>)
 800a81e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a820:	429a      	cmp	r2, r3
 800a822:	d102      	bne.n	800a82a <_strtod_l+0x8aa>
 800a824:	3101      	adds	r1, #1
 800a826:	f43f adca 	beq.w	800a3be <_strtod_l+0x43e>
 800a82a:	4b92      	ldr	r3, [pc, #584]	@ (800aa74 <_strtod_l+0xaf4>)
 800a82c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a82e:	401a      	ands	r2, r3
 800a830:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a834:	f04f 0a00 	mov.w	sl, #0
 800a838:	9b08      	ldr	r3, [sp, #32]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1b8      	bne.n	800a7b0 <_strtod_l+0x830>
 800a83e:	e5c9      	b.n	800a3d4 <_strtod_l+0x454>
 800a840:	f04f 33ff 	mov.w	r3, #4294967295
 800a844:	e7e8      	b.n	800a818 <_strtod_l+0x898>
 800a846:	4613      	mov	r3, r2
 800a848:	e7e6      	b.n	800a818 <_strtod_l+0x898>
 800a84a:	ea53 030a 	orrs.w	r3, r3, sl
 800a84e:	d0a1      	beq.n	800a794 <_strtod_l+0x814>
 800a850:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a852:	b1db      	cbz	r3, 800a88c <_strtod_l+0x90c>
 800a854:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a856:	4213      	tst	r3, r2
 800a858:	d0ee      	beq.n	800a838 <_strtod_l+0x8b8>
 800a85a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a85c:	9a08      	ldr	r2, [sp, #32]
 800a85e:	4650      	mov	r0, sl
 800a860:	4659      	mov	r1, fp
 800a862:	b1bb      	cbz	r3, 800a894 <_strtod_l+0x914>
 800a864:	f7ff fb6e 	bl	8009f44 <sulp>
 800a868:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a86c:	ec53 2b10 	vmov	r2, r3, d0
 800a870:	f7f5 fd1c 	bl	80002ac <__adddf3>
 800a874:	4682      	mov	sl, r0
 800a876:	468b      	mov	fp, r1
 800a878:	e7de      	b.n	800a838 <_strtod_l+0x8b8>
 800a87a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a87e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a882:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a886:	f04f 3aff 	mov.w	sl, #4294967295
 800a88a:	e7d5      	b.n	800a838 <_strtod_l+0x8b8>
 800a88c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a88e:	ea13 0f0a 	tst.w	r3, sl
 800a892:	e7e1      	b.n	800a858 <_strtod_l+0x8d8>
 800a894:	f7ff fb56 	bl	8009f44 <sulp>
 800a898:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a89c:	ec53 2b10 	vmov	r2, r3, d0
 800a8a0:	f7f5 fd02 	bl	80002a8 <__aeabi_dsub>
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	4682      	mov	sl, r0
 800a8aa:	468b      	mov	fp, r1
 800a8ac:	f7f6 f91c 	bl	8000ae8 <__aeabi_dcmpeq>
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	d0c1      	beq.n	800a838 <_strtod_l+0x8b8>
 800a8b4:	e619      	b.n	800a4ea <_strtod_l+0x56a>
 800a8b6:	4641      	mov	r1, r8
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	f7ff facd 	bl	8009e58 <__ratio>
 800a8be:	ec57 6b10 	vmov	r6, r7, d0
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a8c8:	4630      	mov	r0, r6
 800a8ca:	4639      	mov	r1, r7
 800a8cc:	f7f6 f920 	bl	8000b10 <__aeabi_dcmple>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d06f      	beq.n	800a9b4 <_strtod_l+0xa34>
 800a8d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d17a      	bne.n	800a9d0 <_strtod_l+0xa50>
 800a8da:	f1ba 0f00 	cmp.w	sl, #0
 800a8de:	d158      	bne.n	800a992 <_strtod_l+0xa12>
 800a8e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d15a      	bne.n	800a9a0 <_strtod_l+0xa20>
 800a8ea:	4b64      	ldr	r3, [pc, #400]	@ (800aa7c <_strtod_l+0xafc>)
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	4639      	mov	r1, r7
 800a8f2:	f7f6 f903 	bl	8000afc <__aeabi_dcmplt>
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	d159      	bne.n	800a9ae <_strtod_l+0xa2e>
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	4639      	mov	r1, r7
 800a8fe:	4b60      	ldr	r3, [pc, #384]	@ (800aa80 <_strtod_l+0xb00>)
 800a900:	2200      	movs	r2, #0
 800a902:	f7f5 fe89 	bl	8000618 <__aeabi_dmul>
 800a906:	4606      	mov	r6, r0
 800a908:	460f      	mov	r7, r1
 800a90a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a90e:	9606      	str	r6, [sp, #24]
 800a910:	9307      	str	r3, [sp, #28]
 800a912:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a916:	4d57      	ldr	r5, [pc, #348]	@ (800aa74 <_strtod_l+0xaf4>)
 800a918:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a91c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a91e:	401d      	ands	r5, r3
 800a920:	4b58      	ldr	r3, [pc, #352]	@ (800aa84 <_strtod_l+0xb04>)
 800a922:	429d      	cmp	r5, r3
 800a924:	f040 80b2 	bne.w	800aa8c <_strtod_l+0xb0c>
 800a928:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a92a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a92e:	ec4b ab10 	vmov	d0, sl, fp
 800a932:	f7ff f9c9 	bl	8009cc8 <__ulp>
 800a936:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a93a:	ec51 0b10 	vmov	r0, r1, d0
 800a93e:	f7f5 fe6b 	bl	8000618 <__aeabi_dmul>
 800a942:	4652      	mov	r2, sl
 800a944:	465b      	mov	r3, fp
 800a946:	f7f5 fcb1 	bl	80002ac <__adddf3>
 800a94a:	460b      	mov	r3, r1
 800a94c:	4949      	ldr	r1, [pc, #292]	@ (800aa74 <_strtod_l+0xaf4>)
 800a94e:	4a4e      	ldr	r2, [pc, #312]	@ (800aa88 <_strtod_l+0xb08>)
 800a950:	4019      	ands	r1, r3
 800a952:	4291      	cmp	r1, r2
 800a954:	4682      	mov	sl, r0
 800a956:	d942      	bls.n	800a9de <_strtod_l+0xa5e>
 800a958:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a95a:	4b47      	ldr	r3, [pc, #284]	@ (800aa78 <_strtod_l+0xaf8>)
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d103      	bne.n	800a968 <_strtod_l+0x9e8>
 800a960:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a962:	3301      	adds	r3, #1
 800a964:	f43f ad2b 	beq.w	800a3be <_strtod_l+0x43e>
 800a968:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800aa78 <_strtod_l+0xaf8>
 800a96c:	f04f 3aff 	mov.w	sl, #4294967295
 800a970:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a972:	9805      	ldr	r0, [sp, #20]
 800a974:	f7fe fe74 	bl	8009660 <_Bfree>
 800a978:	9805      	ldr	r0, [sp, #20]
 800a97a:	4649      	mov	r1, r9
 800a97c:	f7fe fe70 	bl	8009660 <_Bfree>
 800a980:	9805      	ldr	r0, [sp, #20]
 800a982:	4641      	mov	r1, r8
 800a984:	f7fe fe6c 	bl	8009660 <_Bfree>
 800a988:	9805      	ldr	r0, [sp, #20]
 800a98a:	4621      	mov	r1, r4
 800a98c:	f7fe fe68 	bl	8009660 <_Bfree>
 800a990:	e618      	b.n	800a5c4 <_strtod_l+0x644>
 800a992:	f1ba 0f01 	cmp.w	sl, #1
 800a996:	d103      	bne.n	800a9a0 <_strtod_l+0xa20>
 800a998:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f43f ada5 	beq.w	800a4ea <_strtod_l+0x56a>
 800a9a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800aa50 <_strtod_l+0xad0>
 800a9a4:	4f35      	ldr	r7, [pc, #212]	@ (800aa7c <_strtod_l+0xafc>)
 800a9a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a9aa:	2600      	movs	r6, #0
 800a9ac:	e7b1      	b.n	800a912 <_strtod_l+0x992>
 800a9ae:	4f34      	ldr	r7, [pc, #208]	@ (800aa80 <_strtod_l+0xb00>)
 800a9b0:	2600      	movs	r6, #0
 800a9b2:	e7aa      	b.n	800a90a <_strtod_l+0x98a>
 800a9b4:	4b32      	ldr	r3, [pc, #200]	@ (800aa80 <_strtod_l+0xb00>)
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	4639      	mov	r1, r7
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f7f5 fe2c 	bl	8000618 <__aeabi_dmul>
 800a9c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9c2:	4606      	mov	r6, r0
 800a9c4:	460f      	mov	r7, r1
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d09f      	beq.n	800a90a <_strtod_l+0x98a>
 800a9ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a9ce:	e7a0      	b.n	800a912 <_strtod_l+0x992>
 800a9d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800aa58 <_strtod_l+0xad8>
 800a9d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a9d8:	ec57 6b17 	vmov	r6, r7, d7
 800a9dc:	e799      	b.n	800a912 <_strtod_l+0x992>
 800a9de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a9e2:	9b08      	ldr	r3, [sp, #32]
 800a9e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d1c1      	bne.n	800a970 <_strtod_l+0x9f0>
 800a9ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a9f0:	0d1b      	lsrs	r3, r3, #20
 800a9f2:	051b      	lsls	r3, r3, #20
 800a9f4:	429d      	cmp	r5, r3
 800a9f6:	d1bb      	bne.n	800a970 <_strtod_l+0x9f0>
 800a9f8:	4630      	mov	r0, r6
 800a9fa:	4639      	mov	r1, r7
 800a9fc:	f7f6 f96c 	bl	8000cd8 <__aeabi_d2lz>
 800aa00:	f7f5 fddc 	bl	80005bc <__aeabi_l2d>
 800aa04:	4602      	mov	r2, r0
 800aa06:	460b      	mov	r3, r1
 800aa08:	4630      	mov	r0, r6
 800aa0a:	4639      	mov	r1, r7
 800aa0c:	f7f5 fc4c 	bl	80002a8 <__aeabi_dsub>
 800aa10:	460b      	mov	r3, r1
 800aa12:	4602      	mov	r2, r0
 800aa14:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800aa18:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800aa1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa1e:	ea46 060a 	orr.w	r6, r6, sl
 800aa22:	431e      	orrs	r6, r3
 800aa24:	d06f      	beq.n	800ab06 <_strtod_l+0xb86>
 800aa26:	a30e      	add	r3, pc, #56	@ (adr r3, 800aa60 <_strtod_l+0xae0>)
 800aa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2c:	f7f6 f866 	bl	8000afc <__aeabi_dcmplt>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	f47f accf 	bne.w	800a3d4 <_strtod_l+0x454>
 800aa36:	a30c      	add	r3, pc, #48	@ (adr r3, 800aa68 <_strtod_l+0xae8>)
 800aa38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa40:	f7f6 f87a 	bl	8000b38 <__aeabi_dcmpgt>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	d093      	beq.n	800a970 <_strtod_l+0x9f0>
 800aa48:	e4c4      	b.n	800a3d4 <_strtod_l+0x454>
 800aa4a:	bf00      	nop
 800aa4c:	f3af 8000 	nop.w
 800aa50:	00000000 	.word	0x00000000
 800aa54:	bff00000 	.word	0xbff00000
 800aa58:	00000000 	.word	0x00000000
 800aa5c:	3ff00000 	.word	0x3ff00000
 800aa60:	94a03595 	.word	0x94a03595
 800aa64:	3fdfffff 	.word	0x3fdfffff
 800aa68:	35afe535 	.word	0x35afe535
 800aa6c:	3fe00000 	.word	0x3fe00000
 800aa70:	000fffff 	.word	0x000fffff
 800aa74:	7ff00000 	.word	0x7ff00000
 800aa78:	7fefffff 	.word	0x7fefffff
 800aa7c:	3ff00000 	.word	0x3ff00000
 800aa80:	3fe00000 	.word	0x3fe00000
 800aa84:	7fe00000 	.word	0x7fe00000
 800aa88:	7c9fffff 	.word	0x7c9fffff
 800aa8c:	9b08      	ldr	r3, [sp, #32]
 800aa8e:	b323      	cbz	r3, 800aada <_strtod_l+0xb5a>
 800aa90:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800aa94:	d821      	bhi.n	800aada <_strtod_l+0xb5a>
 800aa96:	a328      	add	r3, pc, #160	@ (adr r3, 800ab38 <_strtod_l+0xbb8>)
 800aa98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	4639      	mov	r1, r7
 800aaa0:	f7f6 f836 	bl	8000b10 <__aeabi_dcmple>
 800aaa4:	b1a0      	cbz	r0, 800aad0 <_strtod_l+0xb50>
 800aaa6:	4639      	mov	r1, r7
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	f7f6 f88d 	bl	8000bc8 <__aeabi_d2uiz>
 800aaae:	2801      	cmp	r0, #1
 800aab0:	bf38      	it	cc
 800aab2:	2001      	movcc	r0, #1
 800aab4:	f7f5 fd36 	bl	8000524 <__aeabi_ui2d>
 800aab8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aaba:	4606      	mov	r6, r0
 800aabc:	460f      	mov	r7, r1
 800aabe:	b9fb      	cbnz	r3, 800ab00 <_strtod_l+0xb80>
 800aac0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aac4:	9014      	str	r0, [sp, #80]	@ 0x50
 800aac6:	9315      	str	r3, [sp, #84]	@ 0x54
 800aac8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800aacc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aad0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aad2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800aad6:	1b5b      	subs	r3, r3, r5
 800aad8:	9311      	str	r3, [sp, #68]	@ 0x44
 800aada:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aade:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800aae2:	f7ff f8f1 	bl	8009cc8 <__ulp>
 800aae6:	4650      	mov	r0, sl
 800aae8:	ec53 2b10 	vmov	r2, r3, d0
 800aaec:	4659      	mov	r1, fp
 800aaee:	f7f5 fd93 	bl	8000618 <__aeabi_dmul>
 800aaf2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800aaf6:	f7f5 fbd9 	bl	80002ac <__adddf3>
 800aafa:	4682      	mov	sl, r0
 800aafc:	468b      	mov	fp, r1
 800aafe:	e770      	b.n	800a9e2 <_strtod_l+0xa62>
 800ab00:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ab04:	e7e0      	b.n	800aac8 <_strtod_l+0xb48>
 800ab06:	a30e      	add	r3, pc, #56	@ (adr r3, 800ab40 <_strtod_l+0xbc0>)
 800ab08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0c:	f7f5 fff6 	bl	8000afc <__aeabi_dcmplt>
 800ab10:	e798      	b.n	800aa44 <_strtod_l+0xac4>
 800ab12:	2300      	movs	r3, #0
 800ab14:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab16:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ab18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab1a:	6013      	str	r3, [r2, #0]
 800ab1c:	f7ff ba6d 	b.w	8009ffa <_strtod_l+0x7a>
 800ab20:	2a65      	cmp	r2, #101	@ 0x65
 800ab22:	f43f ab66 	beq.w	800a1f2 <_strtod_l+0x272>
 800ab26:	2a45      	cmp	r2, #69	@ 0x45
 800ab28:	f43f ab63 	beq.w	800a1f2 <_strtod_l+0x272>
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	f7ff bb9e 	b.w	800a26e <_strtod_l+0x2ee>
 800ab32:	bf00      	nop
 800ab34:	f3af 8000 	nop.w
 800ab38:	ffc00000 	.word	0xffc00000
 800ab3c:	41dfffff 	.word	0x41dfffff
 800ab40:	94a03595 	.word	0x94a03595
 800ab44:	3fcfffff 	.word	0x3fcfffff

0800ab48 <_strtod_r>:
 800ab48:	4b01      	ldr	r3, [pc, #4]	@ (800ab50 <_strtod_r+0x8>)
 800ab4a:	f7ff ba19 	b.w	8009f80 <_strtod_l>
 800ab4e:	bf00      	nop
 800ab50:	200000b4 	.word	0x200000b4

0800ab54 <_strtol_l.constprop.0>:
 800ab54:	2b24      	cmp	r3, #36	@ 0x24
 800ab56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab5a:	4686      	mov	lr, r0
 800ab5c:	4690      	mov	r8, r2
 800ab5e:	d801      	bhi.n	800ab64 <_strtol_l.constprop.0+0x10>
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d106      	bne.n	800ab72 <_strtol_l.constprop.0+0x1e>
 800ab64:	f7fd fd8e 	bl	8008684 <__errno>
 800ab68:	2316      	movs	r3, #22
 800ab6a:	6003      	str	r3, [r0, #0]
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab72:	4834      	ldr	r0, [pc, #208]	@ (800ac44 <_strtol_l.constprop.0+0xf0>)
 800ab74:	460d      	mov	r5, r1
 800ab76:	462a      	mov	r2, r5
 800ab78:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab7c:	5d06      	ldrb	r6, [r0, r4]
 800ab7e:	f016 0608 	ands.w	r6, r6, #8
 800ab82:	d1f8      	bne.n	800ab76 <_strtol_l.constprop.0+0x22>
 800ab84:	2c2d      	cmp	r4, #45	@ 0x2d
 800ab86:	d12d      	bne.n	800abe4 <_strtol_l.constprop.0+0x90>
 800ab88:	782c      	ldrb	r4, [r5, #0]
 800ab8a:	2601      	movs	r6, #1
 800ab8c:	1c95      	adds	r5, r2, #2
 800ab8e:	f033 0210 	bics.w	r2, r3, #16
 800ab92:	d109      	bne.n	800aba8 <_strtol_l.constprop.0+0x54>
 800ab94:	2c30      	cmp	r4, #48	@ 0x30
 800ab96:	d12a      	bne.n	800abee <_strtol_l.constprop.0+0x9a>
 800ab98:	782a      	ldrb	r2, [r5, #0]
 800ab9a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ab9e:	2a58      	cmp	r2, #88	@ 0x58
 800aba0:	d125      	bne.n	800abee <_strtol_l.constprop.0+0x9a>
 800aba2:	786c      	ldrb	r4, [r5, #1]
 800aba4:	2310      	movs	r3, #16
 800aba6:	3502      	adds	r5, #2
 800aba8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800abac:	f10c 3cff 	add.w	ip, ip, #4294967295
 800abb0:	2200      	movs	r2, #0
 800abb2:	fbbc f9f3 	udiv	r9, ip, r3
 800abb6:	4610      	mov	r0, r2
 800abb8:	fb03 ca19 	mls	sl, r3, r9, ip
 800abbc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800abc0:	2f09      	cmp	r7, #9
 800abc2:	d81b      	bhi.n	800abfc <_strtol_l.constprop.0+0xa8>
 800abc4:	463c      	mov	r4, r7
 800abc6:	42a3      	cmp	r3, r4
 800abc8:	dd27      	ble.n	800ac1a <_strtol_l.constprop.0+0xc6>
 800abca:	1c57      	adds	r7, r2, #1
 800abcc:	d007      	beq.n	800abde <_strtol_l.constprop.0+0x8a>
 800abce:	4581      	cmp	r9, r0
 800abd0:	d320      	bcc.n	800ac14 <_strtol_l.constprop.0+0xc0>
 800abd2:	d101      	bne.n	800abd8 <_strtol_l.constprop.0+0x84>
 800abd4:	45a2      	cmp	sl, r4
 800abd6:	db1d      	blt.n	800ac14 <_strtol_l.constprop.0+0xc0>
 800abd8:	fb00 4003 	mla	r0, r0, r3, r4
 800abdc:	2201      	movs	r2, #1
 800abde:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abe2:	e7eb      	b.n	800abbc <_strtol_l.constprop.0+0x68>
 800abe4:	2c2b      	cmp	r4, #43	@ 0x2b
 800abe6:	bf04      	itt	eq
 800abe8:	782c      	ldrbeq	r4, [r5, #0]
 800abea:	1c95      	addeq	r5, r2, #2
 800abec:	e7cf      	b.n	800ab8e <_strtol_l.constprop.0+0x3a>
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1da      	bne.n	800aba8 <_strtol_l.constprop.0+0x54>
 800abf2:	2c30      	cmp	r4, #48	@ 0x30
 800abf4:	bf0c      	ite	eq
 800abf6:	2308      	moveq	r3, #8
 800abf8:	230a      	movne	r3, #10
 800abfa:	e7d5      	b.n	800aba8 <_strtol_l.constprop.0+0x54>
 800abfc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ac00:	2f19      	cmp	r7, #25
 800ac02:	d801      	bhi.n	800ac08 <_strtol_l.constprop.0+0xb4>
 800ac04:	3c37      	subs	r4, #55	@ 0x37
 800ac06:	e7de      	b.n	800abc6 <_strtol_l.constprop.0+0x72>
 800ac08:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ac0c:	2f19      	cmp	r7, #25
 800ac0e:	d804      	bhi.n	800ac1a <_strtol_l.constprop.0+0xc6>
 800ac10:	3c57      	subs	r4, #87	@ 0x57
 800ac12:	e7d8      	b.n	800abc6 <_strtol_l.constprop.0+0x72>
 800ac14:	f04f 32ff 	mov.w	r2, #4294967295
 800ac18:	e7e1      	b.n	800abde <_strtol_l.constprop.0+0x8a>
 800ac1a:	1c53      	adds	r3, r2, #1
 800ac1c:	d108      	bne.n	800ac30 <_strtol_l.constprop.0+0xdc>
 800ac1e:	2322      	movs	r3, #34	@ 0x22
 800ac20:	f8ce 3000 	str.w	r3, [lr]
 800ac24:	4660      	mov	r0, ip
 800ac26:	f1b8 0f00 	cmp.w	r8, #0
 800ac2a:	d0a0      	beq.n	800ab6e <_strtol_l.constprop.0+0x1a>
 800ac2c:	1e69      	subs	r1, r5, #1
 800ac2e:	e006      	b.n	800ac3e <_strtol_l.constprop.0+0xea>
 800ac30:	b106      	cbz	r6, 800ac34 <_strtol_l.constprop.0+0xe0>
 800ac32:	4240      	negs	r0, r0
 800ac34:	f1b8 0f00 	cmp.w	r8, #0
 800ac38:	d099      	beq.n	800ab6e <_strtol_l.constprop.0+0x1a>
 800ac3a:	2a00      	cmp	r2, #0
 800ac3c:	d1f6      	bne.n	800ac2c <_strtol_l.constprop.0+0xd8>
 800ac3e:	f8c8 1000 	str.w	r1, [r8]
 800ac42:	e794      	b.n	800ab6e <_strtol_l.constprop.0+0x1a>
 800ac44:	0800dc09 	.word	0x0800dc09

0800ac48 <_strtol_r>:
 800ac48:	f7ff bf84 	b.w	800ab54 <_strtol_l.constprop.0>

0800ac4c <__ssputs_r>:
 800ac4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac50:	688e      	ldr	r6, [r1, #8]
 800ac52:	461f      	mov	r7, r3
 800ac54:	42be      	cmp	r6, r7
 800ac56:	680b      	ldr	r3, [r1, #0]
 800ac58:	4682      	mov	sl, r0
 800ac5a:	460c      	mov	r4, r1
 800ac5c:	4690      	mov	r8, r2
 800ac5e:	d82d      	bhi.n	800acbc <__ssputs_r+0x70>
 800ac60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ac68:	d026      	beq.n	800acb8 <__ssputs_r+0x6c>
 800ac6a:	6965      	ldr	r5, [r4, #20]
 800ac6c:	6909      	ldr	r1, [r1, #16]
 800ac6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac72:	eba3 0901 	sub.w	r9, r3, r1
 800ac76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac7a:	1c7b      	adds	r3, r7, #1
 800ac7c:	444b      	add	r3, r9
 800ac7e:	106d      	asrs	r5, r5, #1
 800ac80:	429d      	cmp	r5, r3
 800ac82:	bf38      	it	cc
 800ac84:	461d      	movcc	r5, r3
 800ac86:	0553      	lsls	r3, r2, #21
 800ac88:	d527      	bpl.n	800acda <__ssputs_r+0x8e>
 800ac8a:	4629      	mov	r1, r5
 800ac8c:	f7fe fc1c 	bl	80094c8 <_malloc_r>
 800ac90:	4606      	mov	r6, r0
 800ac92:	b360      	cbz	r0, 800acee <__ssputs_r+0xa2>
 800ac94:	6921      	ldr	r1, [r4, #16]
 800ac96:	464a      	mov	r2, r9
 800ac98:	f7fd fd21 	bl	80086de <memcpy>
 800ac9c:	89a3      	ldrh	r3, [r4, #12]
 800ac9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aca6:	81a3      	strh	r3, [r4, #12]
 800aca8:	6126      	str	r6, [r4, #16]
 800acaa:	6165      	str	r5, [r4, #20]
 800acac:	444e      	add	r6, r9
 800acae:	eba5 0509 	sub.w	r5, r5, r9
 800acb2:	6026      	str	r6, [r4, #0]
 800acb4:	60a5      	str	r5, [r4, #8]
 800acb6:	463e      	mov	r6, r7
 800acb8:	42be      	cmp	r6, r7
 800acba:	d900      	bls.n	800acbe <__ssputs_r+0x72>
 800acbc:	463e      	mov	r6, r7
 800acbe:	6820      	ldr	r0, [r4, #0]
 800acc0:	4632      	mov	r2, r6
 800acc2:	4641      	mov	r1, r8
 800acc4:	f000 f9d8 	bl	800b078 <memmove>
 800acc8:	68a3      	ldr	r3, [r4, #8]
 800acca:	1b9b      	subs	r3, r3, r6
 800accc:	60a3      	str	r3, [r4, #8]
 800acce:	6823      	ldr	r3, [r4, #0]
 800acd0:	4433      	add	r3, r6
 800acd2:	6023      	str	r3, [r4, #0]
 800acd4:	2000      	movs	r0, #0
 800acd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acda:	462a      	mov	r2, r5
 800acdc:	f000 fd75 	bl	800b7ca <_realloc_r>
 800ace0:	4606      	mov	r6, r0
 800ace2:	2800      	cmp	r0, #0
 800ace4:	d1e0      	bne.n	800aca8 <__ssputs_r+0x5c>
 800ace6:	6921      	ldr	r1, [r4, #16]
 800ace8:	4650      	mov	r0, sl
 800acea:	f7fe fb79 	bl	80093e0 <_free_r>
 800acee:	230c      	movs	r3, #12
 800acf0:	f8ca 3000 	str.w	r3, [sl]
 800acf4:	89a3      	ldrh	r3, [r4, #12]
 800acf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acfa:	81a3      	strh	r3, [r4, #12]
 800acfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ad00:	e7e9      	b.n	800acd6 <__ssputs_r+0x8a>
	...

0800ad04 <_svfiprintf_r>:
 800ad04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad08:	4698      	mov	r8, r3
 800ad0a:	898b      	ldrh	r3, [r1, #12]
 800ad0c:	061b      	lsls	r3, r3, #24
 800ad0e:	b09d      	sub	sp, #116	@ 0x74
 800ad10:	4607      	mov	r7, r0
 800ad12:	460d      	mov	r5, r1
 800ad14:	4614      	mov	r4, r2
 800ad16:	d510      	bpl.n	800ad3a <_svfiprintf_r+0x36>
 800ad18:	690b      	ldr	r3, [r1, #16]
 800ad1a:	b973      	cbnz	r3, 800ad3a <_svfiprintf_r+0x36>
 800ad1c:	2140      	movs	r1, #64	@ 0x40
 800ad1e:	f7fe fbd3 	bl	80094c8 <_malloc_r>
 800ad22:	6028      	str	r0, [r5, #0]
 800ad24:	6128      	str	r0, [r5, #16]
 800ad26:	b930      	cbnz	r0, 800ad36 <_svfiprintf_r+0x32>
 800ad28:	230c      	movs	r3, #12
 800ad2a:	603b      	str	r3, [r7, #0]
 800ad2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad30:	b01d      	add	sp, #116	@ 0x74
 800ad32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad36:	2340      	movs	r3, #64	@ 0x40
 800ad38:	616b      	str	r3, [r5, #20]
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad3e:	2320      	movs	r3, #32
 800ad40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad44:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad48:	2330      	movs	r3, #48	@ 0x30
 800ad4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aee8 <_svfiprintf_r+0x1e4>
 800ad4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad52:	f04f 0901 	mov.w	r9, #1
 800ad56:	4623      	mov	r3, r4
 800ad58:	469a      	mov	sl, r3
 800ad5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad5e:	b10a      	cbz	r2, 800ad64 <_svfiprintf_r+0x60>
 800ad60:	2a25      	cmp	r2, #37	@ 0x25
 800ad62:	d1f9      	bne.n	800ad58 <_svfiprintf_r+0x54>
 800ad64:	ebba 0b04 	subs.w	fp, sl, r4
 800ad68:	d00b      	beq.n	800ad82 <_svfiprintf_r+0x7e>
 800ad6a:	465b      	mov	r3, fp
 800ad6c:	4622      	mov	r2, r4
 800ad6e:	4629      	mov	r1, r5
 800ad70:	4638      	mov	r0, r7
 800ad72:	f7ff ff6b 	bl	800ac4c <__ssputs_r>
 800ad76:	3001      	adds	r0, #1
 800ad78:	f000 80a7 	beq.w	800aeca <_svfiprintf_r+0x1c6>
 800ad7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad7e:	445a      	add	r2, fp
 800ad80:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad82:	f89a 3000 	ldrb.w	r3, [sl]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	f000 809f 	beq.w	800aeca <_svfiprintf_r+0x1c6>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad96:	f10a 0a01 	add.w	sl, sl, #1
 800ad9a:	9304      	str	r3, [sp, #16]
 800ad9c:	9307      	str	r3, [sp, #28]
 800ad9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ada2:	931a      	str	r3, [sp, #104]	@ 0x68
 800ada4:	4654      	mov	r4, sl
 800ada6:	2205      	movs	r2, #5
 800ada8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adac:	484e      	ldr	r0, [pc, #312]	@ (800aee8 <_svfiprintf_r+0x1e4>)
 800adae:	f7f5 fa1f 	bl	80001f0 <memchr>
 800adb2:	9a04      	ldr	r2, [sp, #16]
 800adb4:	b9d8      	cbnz	r0, 800adee <_svfiprintf_r+0xea>
 800adb6:	06d0      	lsls	r0, r2, #27
 800adb8:	bf44      	itt	mi
 800adba:	2320      	movmi	r3, #32
 800adbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adc0:	0711      	lsls	r1, r2, #28
 800adc2:	bf44      	itt	mi
 800adc4:	232b      	movmi	r3, #43	@ 0x2b
 800adc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adca:	f89a 3000 	ldrb.w	r3, [sl]
 800adce:	2b2a      	cmp	r3, #42	@ 0x2a
 800add0:	d015      	beq.n	800adfe <_svfiprintf_r+0xfa>
 800add2:	9a07      	ldr	r2, [sp, #28]
 800add4:	4654      	mov	r4, sl
 800add6:	2000      	movs	r0, #0
 800add8:	f04f 0c0a 	mov.w	ip, #10
 800addc:	4621      	mov	r1, r4
 800adde:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ade2:	3b30      	subs	r3, #48	@ 0x30
 800ade4:	2b09      	cmp	r3, #9
 800ade6:	d94b      	bls.n	800ae80 <_svfiprintf_r+0x17c>
 800ade8:	b1b0      	cbz	r0, 800ae18 <_svfiprintf_r+0x114>
 800adea:	9207      	str	r2, [sp, #28]
 800adec:	e014      	b.n	800ae18 <_svfiprintf_r+0x114>
 800adee:	eba0 0308 	sub.w	r3, r0, r8
 800adf2:	fa09 f303 	lsl.w	r3, r9, r3
 800adf6:	4313      	orrs	r3, r2
 800adf8:	9304      	str	r3, [sp, #16]
 800adfa:	46a2      	mov	sl, r4
 800adfc:	e7d2      	b.n	800ada4 <_svfiprintf_r+0xa0>
 800adfe:	9b03      	ldr	r3, [sp, #12]
 800ae00:	1d19      	adds	r1, r3, #4
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	9103      	str	r1, [sp, #12]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	bfbb      	ittet	lt
 800ae0a:	425b      	neglt	r3, r3
 800ae0c:	f042 0202 	orrlt.w	r2, r2, #2
 800ae10:	9307      	strge	r3, [sp, #28]
 800ae12:	9307      	strlt	r3, [sp, #28]
 800ae14:	bfb8      	it	lt
 800ae16:	9204      	strlt	r2, [sp, #16]
 800ae18:	7823      	ldrb	r3, [r4, #0]
 800ae1a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae1c:	d10a      	bne.n	800ae34 <_svfiprintf_r+0x130>
 800ae1e:	7863      	ldrb	r3, [r4, #1]
 800ae20:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae22:	d132      	bne.n	800ae8a <_svfiprintf_r+0x186>
 800ae24:	9b03      	ldr	r3, [sp, #12]
 800ae26:	1d1a      	adds	r2, r3, #4
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	9203      	str	r2, [sp, #12]
 800ae2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae30:	3402      	adds	r4, #2
 800ae32:	9305      	str	r3, [sp, #20]
 800ae34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aef8 <_svfiprintf_r+0x1f4>
 800ae38:	7821      	ldrb	r1, [r4, #0]
 800ae3a:	2203      	movs	r2, #3
 800ae3c:	4650      	mov	r0, sl
 800ae3e:	f7f5 f9d7 	bl	80001f0 <memchr>
 800ae42:	b138      	cbz	r0, 800ae54 <_svfiprintf_r+0x150>
 800ae44:	9b04      	ldr	r3, [sp, #16]
 800ae46:	eba0 000a 	sub.w	r0, r0, sl
 800ae4a:	2240      	movs	r2, #64	@ 0x40
 800ae4c:	4082      	lsls	r2, r0
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	3401      	adds	r4, #1
 800ae52:	9304      	str	r3, [sp, #16]
 800ae54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae58:	4824      	ldr	r0, [pc, #144]	@ (800aeec <_svfiprintf_r+0x1e8>)
 800ae5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae5e:	2206      	movs	r2, #6
 800ae60:	f7f5 f9c6 	bl	80001f0 <memchr>
 800ae64:	2800      	cmp	r0, #0
 800ae66:	d036      	beq.n	800aed6 <_svfiprintf_r+0x1d2>
 800ae68:	4b21      	ldr	r3, [pc, #132]	@ (800aef0 <_svfiprintf_r+0x1ec>)
 800ae6a:	bb1b      	cbnz	r3, 800aeb4 <_svfiprintf_r+0x1b0>
 800ae6c:	9b03      	ldr	r3, [sp, #12]
 800ae6e:	3307      	adds	r3, #7
 800ae70:	f023 0307 	bic.w	r3, r3, #7
 800ae74:	3308      	adds	r3, #8
 800ae76:	9303      	str	r3, [sp, #12]
 800ae78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae7a:	4433      	add	r3, r6
 800ae7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae7e:	e76a      	b.n	800ad56 <_svfiprintf_r+0x52>
 800ae80:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae84:	460c      	mov	r4, r1
 800ae86:	2001      	movs	r0, #1
 800ae88:	e7a8      	b.n	800addc <_svfiprintf_r+0xd8>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	3401      	adds	r4, #1
 800ae8e:	9305      	str	r3, [sp, #20]
 800ae90:	4619      	mov	r1, r3
 800ae92:	f04f 0c0a 	mov.w	ip, #10
 800ae96:	4620      	mov	r0, r4
 800ae98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae9c:	3a30      	subs	r2, #48	@ 0x30
 800ae9e:	2a09      	cmp	r2, #9
 800aea0:	d903      	bls.n	800aeaa <_svfiprintf_r+0x1a6>
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d0c6      	beq.n	800ae34 <_svfiprintf_r+0x130>
 800aea6:	9105      	str	r1, [sp, #20]
 800aea8:	e7c4      	b.n	800ae34 <_svfiprintf_r+0x130>
 800aeaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800aeae:	4604      	mov	r4, r0
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	e7f0      	b.n	800ae96 <_svfiprintf_r+0x192>
 800aeb4:	ab03      	add	r3, sp, #12
 800aeb6:	9300      	str	r3, [sp, #0]
 800aeb8:	462a      	mov	r2, r5
 800aeba:	4b0e      	ldr	r3, [pc, #56]	@ (800aef4 <_svfiprintf_r+0x1f0>)
 800aebc:	a904      	add	r1, sp, #16
 800aebe:	4638      	mov	r0, r7
 800aec0:	f7fc fc9c 	bl	80077fc <_printf_float>
 800aec4:	1c42      	adds	r2, r0, #1
 800aec6:	4606      	mov	r6, r0
 800aec8:	d1d6      	bne.n	800ae78 <_svfiprintf_r+0x174>
 800aeca:	89ab      	ldrh	r3, [r5, #12]
 800aecc:	065b      	lsls	r3, r3, #25
 800aece:	f53f af2d 	bmi.w	800ad2c <_svfiprintf_r+0x28>
 800aed2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aed4:	e72c      	b.n	800ad30 <_svfiprintf_r+0x2c>
 800aed6:	ab03      	add	r3, sp, #12
 800aed8:	9300      	str	r3, [sp, #0]
 800aeda:	462a      	mov	r2, r5
 800aedc:	4b05      	ldr	r3, [pc, #20]	@ (800aef4 <_svfiprintf_r+0x1f0>)
 800aede:	a904      	add	r1, sp, #16
 800aee0:	4638      	mov	r0, r7
 800aee2:	f7fc ff23 	bl	8007d2c <_printf_i>
 800aee6:	e7ed      	b.n	800aec4 <_svfiprintf_r+0x1c0>
 800aee8:	0800dd09 	.word	0x0800dd09
 800aeec:	0800dd13 	.word	0x0800dd13
 800aef0:	080077fd 	.word	0x080077fd
 800aef4:	0800ac4d 	.word	0x0800ac4d
 800aef8:	0800dd0f 	.word	0x0800dd0f

0800aefc <__sflush_r>:
 800aefc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af04:	0716      	lsls	r6, r2, #28
 800af06:	4605      	mov	r5, r0
 800af08:	460c      	mov	r4, r1
 800af0a:	d454      	bmi.n	800afb6 <__sflush_r+0xba>
 800af0c:	684b      	ldr	r3, [r1, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	dc02      	bgt.n	800af18 <__sflush_r+0x1c>
 800af12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800af14:	2b00      	cmp	r3, #0
 800af16:	dd48      	ble.n	800afaa <__sflush_r+0xae>
 800af18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af1a:	2e00      	cmp	r6, #0
 800af1c:	d045      	beq.n	800afaa <__sflush_r+0xae>
 800af1e:	2300      	movs	r3, #0
 800af20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800af24:	682f      	ldr	r7, [r5, #0]
 800af26:	6a21      	ldr	r1, [r4, #32]
 800af28:	602b      	str	r3, [r5, #0]
 800af2a:	d030      	beq.n	800af8e <__sflush_r+0x92>
 800af2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800af2e:	89a3      	ldrh	r3, [r4, #12]
 800af30:	0759      	lsls	r1, r3, #29
 800af32:	d505      	bpl.n	800af40 <__sflush_r+0x44>
 800af34:	6863      	ldr	r3, [r4, #4]
 800af36:	1ad2      	subs	r2, r2, r3
 800af38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800af3a:	b10b      	cbz	r3, 800af40 <__sflush_r+0x44>
 800af3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af3e:	1ad2      	subs	r2, r2, r3
 800af40:	2300      	movs	r3, #0
 800af42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af44:	6a21      	ldr	r1, [r4, #32]
 800af46:	4628      	mov	r0, r5
 800af48:	47b0      	blx	r6
 800af4a:	1c43      	adds	r3, r0, #1
 800af4c:	89a3      	ldrh	r3, [r4, #12]
 800af4e:	d106      	bne.n	800af5e <__sflush_r+0x62>
 800af50:	6829      	ldr	r1, [r5, #0]
 800af52:	291d      	cmp	r1, #29
 800af54:	d82b      	bhi.n	800afae <__sflush_r+0xb2>
 800af56:	4a2a      	ldr	r2, [pc, #168]	@ (800b000 <__sflush_r+0x104>)
 800af58:	410a      	asrs	r2, r1
 800af5a:	07d6      	lsls	r6, r2, #31
 800af5c:	d427      	bmi.n	800afae <__sflush_r+0xb2>
 800af5e:	2200      	movs	r2, #0
 800af60:	6062      	str	r2, [r4, #4]
 800af62:	04d9      	lsls	r1, r3, #19
 800af64:	6922      	ldr	r2, [r4, #16]
 800af66:	6022      	str	r2, [r4, #0]
 800af68:	d504      	bpl.n	800af74 <__sflush_r+0x78>
 800af6a:	1c42      	adds	r2, r0, #1
 800af6c:	d101      	bne.n	800af72 <__sflush_r+0x76>
 800af6e:	682b      	ldr	r3, [r5, #0]
 800af70:	b903      	cbnz	r3, 800af74 <__sflush_r+0x78>
 800af72:	6560      	str	r0, [r4, #84]	@ 0x54
 800af74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af76:	602f      	str	r7, [r5, #0]
 800af78:	b1b9      	cbz	r1, 800afaa <__sflush_r+0xae>
 800af7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af7e:	4299      	cmp	r1, r3
 800af80:	d002      	beq.n	800af88 <__sflush_r+0x8c>
 800af82:	4628      	mov	r0, r5
 800af84:	f7fe fa2c 	bl	80093e0 <_free_r>
 800af88:	2300      	movs	r3, #0
 800af8a:	6363      	str	r3, [r4, #52]	@ 0x34
 800af8c:	e00d      	b.n	800afaa <__sflush_r+0xae>
 800af8e:	2301      	movs	r3, #1
 800af90:	4628      	mov	r0, r5
 800af92:	47b0      	blx	r6
 800af94:	4602      	mov	r2, r0
 800af96:	1c50      	adds	r0, r2, #1
 800af98:	d1c9      	bne.n	800af2e <__sflush_r+0x32>
 800af9a:	682b      	ldr	r3, [r5, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d0c6      	beq.n	800af2e <__sflush_r+0x32>
 800afa0:	2b1d      	cmp	r3, #29
 800afa2:	d001      	beq.n	800afa8 <__sflush_r+0xac>
 800afa4:	2b16      	cmp	r3, #22
 800afa6:	d11e      	bne.n	800afe6 <__sflush_r+0xea>
 800afa8:	602f      	str	r7, [r5, #0]
 800afaa:	2000      	movs	r0, #0
 800afac:	e022      	b.n	800aff4 <__sflush_r+0xf8>
 800afae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afb2:	b21b      	sxth	r3, r3
 800afb4:	e01b      	b.n	800afee <__sflush_r+0xf2>
 800afb6:	690f      	ldr	r7, [r1, #16]
 800afb8:	2f00      	cmp	r7, #0
 800afba:	d0f6      	beq.n	800afaa <__sflush_r+0xae>
 800afbc:	0793      	lsls	r3, r2, #30
 800afbe:	680e      	ldr	r6, [r1, #0]
 800afc0:	bf08      	it	eq
 800afc2:	694b      	ldreq	r3, [r1, #20]
 800afc4:	600f      	str	r7, [r1, #0]
 800afc6:	bf18      	it	ne
 800afc8:	2300      	movne	r3, #0
 800afca:	eba6 0807 	sub.w	r8, r6, r7
 800afce:	608b      	str	r3, [r1, #8]
 800afd0:	f1b8 0f00 	cmp.w	r8, #0
 800afd4:	dde9      	ble.n	800afaa <__sflush_r+0xae>
 800afd6:	6a21      	ldr	r1, [r4, #32]
 800afd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800afda:	4643      	mov	r3, r8
 800afdc:	463a      	mov	r2, r7
 800afde:	4628      	mov	r0, r5
 800afe0:	47b0      	blx	r6
 800afe2:	2800      	cmp	r0, #0
 800afe4:	dc08      	bgt.n	800aff8 <__sflush_r+0xfc>
 800afe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afee:	81a3      	strh	r3, [r4, #12]
 800aff0:	f04f 30ff 	mov.w	r0, #4294967295
 800aff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aff8:	4407      	add	r7, r0
 800affa:	eba8 0800 	sub.w	r8, r8, r0
 800affe:	e7e7      	b.n	800afd0 <__sflush_r+0xd4>
 800b000:	dfbffffe 	.word	0xdfbffffe

0800b004 <_fflush_r>:
 800b004:	b538      	push	{r3, r4, r5, lr}
 800b006:	690b      	ldr	r3, [r1, #16]
 800b008:	4605      	mov	r5, r0
 800b00a:	460c      	mov	r4, r1
 800b00c:	b913      	cbnz	r3, 800b014 <_fflush_r+0x10>
 800b00e:	2500      	movs	r5, #0
 800b010:	4628      	mov	r0, r5
 800b012:	bd38      	pop	{r3, r4, r5, pc}
 800b014:	b118      	cbz	r0, 800b01e <_fflush_r+0x1a>
 800b016:	6a03      	ldr	r3, [r0, #32]
 800b018:	b90b      	cbnz	r3, 800b01e <_fflush_r+0x1a>
 800b01a:	f7fd fa47 	bl	80084ac <__sinit>
 800b01e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d0f3      	beq.n	800b00e <_fflush_r+0xa>
 800b026:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b028:	07d0      	lsls	r0, r2, #31
 800b02a:	d404      	bmi.n	800b036 <_fflush_r+0x32>
 800b02c:	0599      	lsls	r1, r3, #22
 800b02e:	d402      	bmi.n	800b036 <_fflush_r+0x32>
 800b030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b032:	f7fd fb52 	bl	80086da <__retarget_lock_acquire_recursive>
 800b036:	4628      	mov	r0, r5
 800b038:	4621      	mov	r1, r4
 800b03a:	f7ff ff5f 	bl	800aefc <__sflush_r>
 800b03e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b040:	07da      	lsls	r2, r3, #31
 800b042:	4605      	mov	r5, r0
 800b044:	d4e4      	bmi.n	800b010 <_fflush_r+0xc>
 800b046:	89a3      	ldrh	r3, [r4, #12]
 800b048:	059b      	lsls	r3, r3, #22
 800b04a:	d4e1      	bmi.n	800b010 <_fflush_r+0xc>
 800b04c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b04e:	f7fd fb45 	bl	80086dc <__retarget_lock_release_recursive>
 800b052:	e7dd      	b.n	800b010 <_fflush_r+0xc>

0800b054 <fiprintf>:
 800b054:	b40e      	push	{r1, r2, r3}
 800b056:	b503      	push	{r0, r1, lr}
 800b058:	4601      	mov	r1, r0
 800b05a:	ab03      	add	r3, sp, #12
 800b05c:	4805      	ldr	r0, [pc, #20]	@ (800b074 <fiprintf+0x20>)
 800b05e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b062:	6800      	ldr	r0, [r0, #0]
 800b064:	9301      	str	r3, [sp, #4]
 800b066:	f000 fc15 	bl	800b894 <_vfiprintf_r>
 800b06a:	b002      	add	sp, #8
 800b06c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b070:	b003      	add	sp, #12
 800b072:	4770      	bx	lr
 800b074:	20000064 	.word	0x20000064

0800b078 <memmove>:
 800b078:	4288      	cmp	r0, r1
 800b07a:	b510      	push	{r4, lr}
 800b07c:	eb01 0402 	add.w	r4, r1, r2
 800b080:	d902      	bls.n	800b088 <memmove+0x10>
 800b082:	4284      	cmp	r4, r0
 800b084:	4623      	mov	r3, r4
 800b086:	d807      	bhi.n	800b098 <memmove+0x20>
 800b088:	1e43      	subs	r3, r0, #1
 800b08a:	42a1      	cmp	r1, r4
 800b08c:	d008      	beq.n	800b0a0 <memmove+0x28>
 800b08e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b092:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b096:	e7f8      	b.n	800b08a <memmove+0x12>
 800b098:	4402      	add	r2, r0
 800b09a:	4601      	mov	r1, r0
 800b09c:	428a      	cmp	r2, r1
 800b09e:	d100      	bne.n	800b0a2 <memmove+0x2a>
 800b0a0:	bd10      	pop	{r4, pc}
 800b0a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0aa:	e7f7      	b.n	800b09c <memmove+0x24>

0800b0ac <strncmp>:
 800b0ac:	b510      	push	{r4, lr}
 800b0ae:	b16a      	cbz	r2, 800b0cc <strncmp+0x20>
 800b0b0:	3901      	subs	r1, #1
 800b0b2:	1884      	adds	r4, r0, r2
 800b0b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d103      	bne.n	800b0c8 <strncmp+0x1c>
 800b0c0:	42a0      	cmp	r0, r4
 800b0c2:	d001      	beq.n	800b0c8 <strncmp+0x1c>
 800b0c4:	2a00      	cmp	r2, #0
 800b0c6:	d1f5      	bne.n	800b0b4 <strncmp+0x8>
 800b0c8:	1ad0      	subs	r0, r2, r3
 800b0ca:	bd10      	pop	{r4, pc}
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	e7fc      	b.n	800b0ca <strncmp+0x1e>

0800b0d0 <_sbrk_r>:
 800b0d0:	b538      	push	{r3, r4, r5, lr}
 800b0d2:	4d06      	ldr	r5, [pc, #24]	@ (800b0ec <_sbrk_r+0x1c>)
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	4608      	mov	r0, r1
 800b0da:	602b      	str	r3, [r5, #0]
 800b0dc:	f7f7 fc96 	bl	8002a0c <_sbrk>
 800b0e0:	1c43      	adds	r3, r0, #1
 800b0e2:	d102      	bne.n	800b0ea <_sbrk_r+0x1a>
 800b0e4:	682b      	ldr	r3, [r5, #0]
 800b0e6:	b103      	cbz	r3, 800b0ea <_sbrk_r+0x1a>
 800b0e8:	6023      	str	r3, [r4, #0]
 800b0ea:	bd38      	pop	{r3, r4, r5, pc}
 800b0ec:	200009a0 	.word	0x200009a0

0800b0f0 <nan>:
 800b0f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b0f8 <nan+0x8>
 800b0f4:	4770      	bx	lr
 800b0f6:	bf00      	nop
 800b0f8:	00000000 	.word	0x00000000
 800b0fc:	7ff80000 	.word	0x7ff80000

0800b100 <abort>:
 800b100:	b508      	push	{r3, lr}
 800b102:	2006      	movs	r0, #6
 800b104:	f000 fd9a 	bl	800bc3c <raise>
 800b108:	2001      	movs	r0, #1
 800b10a:	f7f7 fc06 	bl	800291a <_exit>

0800b10e <_calloc_r>:
 800b10e:	b570      	push	{r4, r5, r6, lr}
 800b110:	fba1 5402 	umull	r5, r4, r1, r2
 800b114:	b93c      	cbnz	r4, 800b126 <_calloc_r+0x18>
 800b116:	4629      	mov	r1, r5
 800b118:	f7fe f9d6 	bl	80094c8 <_malloc_r>
 800b11c:	4606      	mov	r6, r0
 800b11e:	b928      	cbnz	r0, 800b12c <_calloc_r+0x1e>
 800b120:	2600      	movs	r6, #0
 800b122:	4630      	mov	r0, r6
 800b124:	bd70      	pop	{r4, r5, r6, pc}
 800b126:	220c      	movs	r2, #12
 800b128:	6002      	str	r2, [r0, #0]
 800b12a:	e7f9      	b.n	800b120 <_calloc_r+0x12>
 800b12c:	462a      	mov	r2, r5
 800b12e:	4621      	mov	r1, r4
 800b130:	f7fd fa55 	bl	80085de <memset>
 800b134:	e7f5      	b.n	800b122 <_calloc_r+0x14>

0800b136 <rshift>:
 800b136:	6903      	ldr	r3, [r0, #16]
 800b138:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b13c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b140:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b144:	f100 0414 	add.w	r4, r0, #20
 800b148:	dd45      	ble.n	800b1d6 <rshift+0xa0>
 800b14a:	f011 011f 	ands.w	r1, r1, #31
 800b14e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b152:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b156:	d10c      	bne.n	800b172 <rshift+0x3c>
 800b158:	f100 0710 	add.w	r7, r0, #16
 800b15c:	4629      	mov	r1, r5
 800b15e:	42b1      	cmp	r1, r6
 800b160:	d334      	bcc.n	800b1cc <rshift+0x96>
 800b162:	1a9b      	subs	r3, r3, r2
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	1eea      	subs	r2, r5, #3
 800b168:	4296      	cmp	r6, r2
 800b16a:	bf38      	it	cc
 800b16c:	2300      	movcc	r3, #0
 800b16e:	4423      	add	r3, r4
 800b170:	e015      	b.n	800b19e <rshift+0x68>
 800b172:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b176:	f1c1 0820 	rsb	r8, r1, #32
 800b17a:	40cf      	lsrs	r7, r1
 800b17c:	f105 0e04 	add.w	lr, r5, #4
 800b180:	46a1      	mov	r9, r4
 800b182:	4576      	cmp	r6, lr
 800b184:	46f4      	mov	ip, lr
 800b186:	d815      	bhi.n	800b1b4 <rshift+0x7e>
 800b188:	1a9a      	subs	r2, r3, r2
 800b18a:	0092      	lsls	r2, r2, #2
 800b18c:	3a04      	subs	r2, #4
 800b18e:	3501      	adds	r5, #1
 800b190:	42ae      	cmp	r6, r5
 800b192:	bf38      	it	cc
 800b194:	2200      	movcc	r2, #0
 800b196:	18a3      	adds	r3, r4, r2
 800b198:	50a7      	str	r7, [r4, r2]
 800b19a:	b107      	cbz	r7, 800b19e <rshift+0x68>
 800b19c:	3304      	adds	r3, #4
 800b19e:	1b1a      	subs	r2, r3, r4
 800b1a0:	42a3      	cmp	r3, r4
 800b1a2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b1a6:	bf08      	it	eq
 800b1a8:	2300      	moveq	r3, #0
 800b1aa:	6102      	str	r2, [r0, #16]
 800b1ac:	bf08      	it	eq
 800b1ae:	6143      	streq	r3, [r0, #20]
 800b1b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1b4:	f8dc c000 	ldr.w	ip, [ip]
 800b1b8:	fa0c fc08 	lsl.w	ip, ip, r8
 800b1bc:	ea4c 0707 	orr.w	r7, ip, r7
 800b1c0:	f849 7b04 	str.w	r7, [r9], #4
 800b1c4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b1c8:	40cf      	lsrs	r7, r1
 800b1ca:	e7da      	b.n	800b182 <rshift+0x4c>
 800b1cc:	f851 cb04 	ldr.w	ip, [r1], #4
 800b1d0:	f847 cf04 	str.w	ip, [r7, #4]!
 800b1d4:	e7c3      	b.n	800b15e <rshift+0x28>
 800b1d6:	4623      	mov	r3, r4
 800b1d8:	e7e1      	b.n	800b19e <rshift+0x68>

0800b1da <__hexdig_fun>:
 800b1da:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b1de:	2b09      	cmp	r3, #9
 800b1e0:	d802      	bhi.n	800b1e8 <__hexdig_fun+0xe>
 800b1e2:	3820      	subs	r0, #32
 800b1e4:	b2c0      	uxtb	r0, r0
 800b1e6:	4770      	bx	lr
 800b1e8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b1ec:	2b05      	cmp	r3, #5
 800b1ee:	d801      	bhi.n	800b1f4 <__hexdig_fun+0x1a>
 800b1f0:	3847      	subs	r0, #71	@ 0x47
 800b1f2:	e7f7      	b.n	800b1e4 <__hexdig_fun+0xa>
 800b1f4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b1f8:	2b05      	cmp	r3, #5
 800b1fa:	d801      	bhi.n	800b200 <__hexdig_fun+0x26>
 800b1fc:	3827      	subs	r0, #39	@ 0x27
 800b1fe:	e7f1      	b.n	800b1e4 <__hexdig_fun+0xa>
 800b200:	2000      	movs	r0, #0
 800b202:	4770      	bx	lr

0800b204 <__gethex>:
 800b204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b208:	b085      	sub	sp, #20
 800b20a:	468a      	mov	sl, r1
 800b20c:	9302      	str	r3, [sp, #8]
 800b20e:	680b      	ldr	r3, [r1, #0]
 800b210:	9001      	str	r0, [sp, #4]
 800b212:	4690      	mov	r8, r2
 800b214:	1c9c      	adds	r4, r3, #2
 800b216:	46a1      	mov	r9, r4
 800b218:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b21c:	2830      	cmp	r0, #48	@ 0x30
 800b21e:	d0fa      	beq.n	800b216 <__gethex+0x12>
 800b220:	eba9 0303 	sub.w	r3, r9, r3
 800b224:	f1a3 0b02 	sub.w	fp, r3, #2
 800b228:	f7ff ffd7 	bl	800b1da <__hexdig_fun>
 800b22c:	4605      	mov	r5, r0
 800b22e:	2800      	cmp	r0, #0
 800b230:	d168      	bne.n	800b304 <__gethex+0x100>
 800b232:	49a0      	ldr	r1, [pc, #640]	@ (800b4b4 <__gethex+0x2b0>)
 800b234:	2201      	movs	r2, #1
 800b236:	4648      	mov	r0, r9
 800b238:	f7ff ff38 	bl	800b0ac <strncmp>
 800b23c:	4607      	mov	r7, r0
 800b23e:	2800      	cmp	r0, #0
 800b240:	d167      	bne.n	800b312 <__gethex+0x10e>
 800b242:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b246:	4626      	mov	r6, r4
 800b248:	f7ff ffc7 	bl	800b1da <__hexdig_fun>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	d062      	beq.n	800b316 <__gethex+0x112>
 800b250:	4623      	mov	r3, r4
 800b252:	7818      	ldrb	r0, [r3, #0]
 800b254:	2830      	cmp	r0, #48	@ 0x30
 800b256:	4699      	mov	r9, r3
 800b258:	f103 0301 	add.w	r3, r3, #1
 800b25c:	d0f9      	beq.n	800b252 <__gethex+0x4e>
 800b25e:	f7ff ffbc 	bl	800b1da <__hexdig_fun>
 800b262:	fab0 f580 	clz	r5, r0
 800b266:	096d      	lsrs	r5, r5, #5
 800b268:	f04f 0b01 	mov.w	fp, #1
 800b26c:	464a      	mov	r2, r9
 800b26e:	4616      	mov	r6, r2
 800b270:	3201      	adds	r2, #1
 800b272:	7830      	ldrb	r0, [r6, #0]
 800b274:	f7ff ffb1 	bl	800b1da <__hexdig_fun>
 800b278:	2800      	cmp	r0, #0
 800b27a:	d1f8      	bne.n	800b26e <__gethex+0x6a>
 800b27c:	498d      	ldr	r1, [pc, #564]	@ (800b4b4 <__gethex+0x2b0>)
 800b27e:	2201      	movs	r2, #1
 800b280:	4630      	mov	r0, r6
 800b282:	f7ff ff13 	bl	800b0ac <strncmp>
 800b286:	2800      	cmp	r0, #0
 800b288:	d13f      	bne.n	800b30a <__gethex+0x106>
 800b28a:	b944      	cbnz	r4, 800b29e <__gethex+0x9a>
 800b28c:	1c74      	adds	r4, r6, #1
 800b28e:	4622      	mov	r2, r4
 800b290:	4616      	mov	r6, r2
 800b292:	3201      	adds	r2, #1
 800b294:	7830      	ldrb	r0, [r6, #0]
 800b296:	f7ff ffa0 	bl	800b1da <__hexdig_fun>
 800b29a:	2800      	cmp	r0, #0
 800b29c:	d1f8      	bne.n	800b290 <__gethex+0x8c>
 800b29e:	1ba4      	subs	r4, r4, r6
 800b2a0:	00a7      	lsls	r7, r4, #2
 800b2a2:	7833      	ldrb	r3, [r6, #0]
 800b2a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b2a8:	2b50      	cmp	r3, #80	@ 0x50
 800b2aa:	d13e      	bne.n	800b32a <__gethex+0x126>
 800b2ac:	7873      	ldrb	r3, [r6, #1]
 800b2ae:	2b2b      	cmp	r3, #43	@ 0x2b
 800b2b0:	d033      	beq.n	800b31a <__gethex+0x116>
 800b2b2:	2b2d      	cmp	r3, #45	@ 0x2d
 800b2b4:	d034      	beq.n	800b320 <__gethex+0x11c>
 800b2b6:	1c71      	adds	r1, r6, #1
 800b2b8:	2400      	movs	r4, #0
 800b2ba:	7808      	ldrb	r0, [r1, #0]
 800b2bc:	f7ff ff8d 	bl	800b1da <__hexdig_fun>
 800b2c0:	1e43      	subs	r3, r0, #1
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	2b18      	cmp	r3, #24
 800b2c6:	d830      	bhi.n	800b32a <__gethex+0x126>
 800b2c8:	f1a0 0210 	sub.w	r2, r0, #16
 800b2cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b2d0:	f7ff ff83 	bl	800b1da <__hexdig_fun>
 800b2d4:	f100 3cff 	add.w	ip, r0, #4294967295
 800b2d8:	fa5f fc8c 	uxtb.w	ip, ip
 800b2dc:	f1bc 0f18 	cmp.w	ip, #24
 800b2e0:	f04f 030a 	mov.w	r3, #10
 800b2e4:	d91e      	bls.n	800b324 <__gethex+0x120>
 800b2e6:	b104      	cbz	r4, 800b2ea <__gethex+0xe6>
 800b2e8:	4252      	negs	r2, r2
 800b2ea:	4417      	add	r7, r2
 800b2ec:	f8ca 1000 	str.w	r1, [sl]
 800b2f0:	b1ed      	cbz	r5, 800b32e <__gethex+0x12a>
 800b2f2:	f1bb 0f00 	cmp.w	fp, #0
 800b2f6:	bf0c      	ite	eq
 800b2f8:	2506      	moveq	r5, #6
 800b2fa:	2500      	movne	r5, #0
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	b005      	add	sp, #20
 800b300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b304:	2500      	movs	r5, #0
 800b306:	462c      	mov	r4, r5
 800b308:	e7b0      	b.n	800b26c <__gethex+0x68>
 800b30a:	2c00      	cmp	r4, #0
 800b30c:	d1c7      	bne.n	800b29e <__gethex+0x9a>
 800b30e:	4627      	mov	r7, r4
 800b310:	e7c7      	b.n	800b2a2 <__gethex+0x9e>
 800b312:	464e      	mov	r6, r9
 800b314:	462f      	mov	r7, r5
 800b316:	2501      	movs	r5, #1
 800b318:	e7c3      	b.n	800b2a2 <__gethex+0x9e>
 800b31a:	2400      	movs	r4, #0
 800b31c:	1cb1      	adds	r1, r6, #2
 800b31e:	e7cc      	b.n	800b2ba <__gethex+0xb6>
 800b320:	2401      	movs	r4, #1
 800b322:	e7fb      	b.n	800b31c <__gethex+0x118>
 800b324:	fb03 0002 	mla	r0, r3, r2, r0
 800b328:	e7ce      	b.n	800b2c8 <__gethex+0xc4>
 800b32a:	4631      	mov	r1, r6
 800b32c:	e7de      	b.n	800b2ec <__gethex+0xe8>
 800b32e:	eba6 0309 	sub.w	r3, r6, r9
 800b332:	3b01      	subs	r3, #1
 800b334:	4629      	mov	r1, r5
 800b336:	2b07      	cmp	r3, #7
 800b338:	dc0a      	bgt.n	800b350 <__gethex+0x14c>
 800b33a:	9801      	ldr	r0, [sp, #4]
 800b33c:	f7fe f950 	bl	80095e0 <_Balloc>
 800b340:	4604      	mov	r4, r0
 800b342:	b940      	cbnz	r0, 800b356 <__gethex+0x152>
 800b344:	4b5c      	ldr	r3, [pc, #368]	@ (800b4b8 <__gethex+0x2b4>)
 800b346:	4602      	mov	r2, r0
 800b348:	21e4      	movs	r1, #228	@ 0xe4
 800b34a:	485c      	ldr	r0, [pc, #368]	@ (800b4bc <__gethex+0x2b8>)
 800b34c:	f7fd f9dc 	bl	8008708 <__assert_func>
 800b350:	3101      	adds	r1, #1
 800b352:	105b      	asrs	r3, r3, #1
 800b354:	e7ef      	b.n	800b336 <__gethex+0x132>
 800b356:	f100 0a14 	add.w	sl, r0, #20
 800b35a:	2300      	movs	r3, #0
 800b35c:	4655      	mov	r5, sl
 800b35e:	469b      	mov	fp, r3
 800b360:	45b1      	cmp	r9, r6
 800b362:	d337      	bcc.n	800b3d4 <__gethex+0x1d0>
 800b364:	f845 bb04 	str.w	fp, [r5], #4
 800b368:	eba5 050a 	sub.w	r5, r5, sl
 800b36c:	10ad      	asrs	r5, r5, #2
 800b36e:	6125      	str	r5, [r4, #16]
 800b370:	4658      	mov	r0, fp
 800b372:	f7fe fa27 	bl	80097c4 <__hi0bits>
 800b376:	016d      	lsls	r5, r5, #5
 800b378:	f8d8 6000 	ldr.w	r6, [r8]
 800b37c:	1a2d      	subs	r5, r5, r0
 800b37e:	42b5      	cmp	r5, r6
 800b380:	dd54      	ble.n	800b42c <__gethex+0x228>
 800b382:	1bad      	subs	r5, r5, r6
 800b384:	4629      	mov	r1, r5
 800b386:	4620      	mov	r0, r4
 800b388:	f7fe fdbb 	bl	8009f02 <__any_on>
 800b38c:	4681      	mov	r9, r0
 800b38e:	b178      	cbz	r0, 800b3b0 <__gethex+0x1ac>
 800b390:	1e6b      	subs	r3, r5, #1
 800b392:	1159      	asrs	r1, r3, #5
 800b394:	f003 021f 	and.w	r2, r3, #31
 800b398:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b39c:	f04f 0901 	mov.w	r9, #1
 800b3a0:	fa09 f202 	lsl.w	r2, r9, r2
 800b3a4:	420a      	tst	r2, r1
 800b3a6:	d003      	beq.n	800b3b0 <__gethex+0x1ac>
 800b3a8:	454b      	cmp	r3, r9
 800b3aa:	dc36      	bgt.n	800b41a <__gethex+0x216>
 800b3ac:	f04f 0902 	mov.w	r9, #2
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	f7ff febf 	bl	800b136 <rshift>
 800b3b8:	442f      	add	r7, r5
 800b3ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3be:	42bb      	cmp	r3, r7
 800b3c0:	da42      	bge.n	800b448 <__gethex+0x244>
 800b3c2:	9801      	ldr	r0, [sp, #4]
 800b3c4:	4621      	mov	r1, r4
 800b3c6:	f7fe f94b 	bl	8009660 <_Bfree>
 800b3ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	6013      	str	r3, [r2, #0]
 800b3d0:	25a3      	movs	r5, #163	@ 0xa3
 800b3d2:	e793      	b.n	800b2fc <__gethex+0xf8>
 800b3d4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b3d8:	2a2e      	cmp	r2, #46	@ 0x2e
 800b3da:	d012      	beq.n	800b402 <__gethex+0x1fe>
 800b3dc:	2b20      	cmp	r3, #32
 800b3de:	d104      	bne.n	800b3ea <__gethex+0x1e6>
 800b3e0:	f845 bb04 	str.w	fp, [r5], #4
 800b3e4:	f04f 0b00 	mov.w	fp, #0
 800b3e8:	465b      	mov	r3, fp
 800b3ea:	7830      	ldrb	r0, [r6, #0]
 800b3ec:	9303      	str	r3, [sp, #12]
 800b3ee:	f7ff fef4 	bl	800b1da <__hexdig_fun>
 800b3f2:	9b03      	ldr	r3, [sp, #12]
 800b3f4:	f000 000f 	and.w	r0, r0, #15
 800b3f8:	4098      	lsls	r0, r3
 800b3fa:	ea4b 0b00 	orr.w	fp, fp, r0
 800b3fe:	3304      	adds	r3, #4
 800b400:	e7ae      	b.n	800b360 <__gethex+0x15c>
 800b402:	45b1      	cmp	r9, r6
 800b404:	d8ea      	bhi.n	800b3dc <__gethex+0x1d8>
 800b406:	492b      	ldr	r1, [pc, #172]	@ (800b4b4 <__gethex+0x2b0>)
 800b408:	9303      	str	r3, [sp, #12]
 800b40a:	2201      	movs	r2, #1
 800b40c:	4630      	mov	r0, r6
 800b40e:	f7ff fe4d 	bl	800b0ac <strncmp>
 800b412:	9b03      	ldr	r3, [sp, #12]
 800b414:	2800      	cmp	r0, #0
 800b416:	d1e1      	bne.n	800b3dc <__gethex+0x1d8>
 800b418:	e7a2      	b.n	800b360 <__gethex+0x15c>
 800b41a:	1ea9      	subs	r1, r5, #2
 800b41c:	4620      	mov	r0, r4
 800b41e:	f7fe fd70 	bl	8009f02 <__any_on>
 800b422:	2800      	cmp	r0, #0
 800b424:	d0c2      	beq.n	800b3ac <__gethex+0x1a8>
 800b426:	f04f 0903 	mov.w	r9, #3
 800b42a:	e7c1      	b.n	800b3b0 <__gethex+0x1ac>
 800b42c:	da09      	bge.n	800b442 <__gethex+0x23e>
 800b42e:	1b75      	subs	r5, r6, r5
 800b430:	4621      	mov	r1, r4
 800b432:	9801      	ldr	r0, [sp, #4]
 800b434:	462a      	mov	r2, r5
 800b436:	f7fe fb2b 	bl	8009a90 <__lshift>
 800b43a:	1b7f      	subs	r7, r7, r5
 800b43c:	4604      	mov	r4, r0
 800b43e:	f100 0a14 	add.w	sl, r0, #20
 800b442:	f04f 0900 	mov.w	r9, #0
 800b446:	e7b8      	b.n	800b3ba <__gethex+0x1b6>
 800b448:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b44c:	42bd      	cmp	r5, r7
 800b44e:	dd6f      	ble.n	800b530 <__gethex+0x32c>
 800b450:	1bed      	subs	r5, r5, r7
 800b452:	42ae      	cmp	r6, r5
 800b454:	dc34      	bgt.n	800b4c0 <__gethex+0x2bc>
 800b456:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b45a:	2b02      	cmp	r3, #2
 800b45c:	d022      	beq.n	800b4a4 <__gethex+0x2a0>
 800b45e:	2b03      	cmp	r3, #3
 800b460:	d024      	beq.n	800b4ac <__gethex+0x2a8>
 800b462:	2b01      	cmp	r3, #1
 800b464:	d115      	bne.n	800b492 <__gethex+0x28e>
 800b466:	42ae      	cmp	r6, r5
 800b468:	d113      	bne.n	800b492 <__gethex+0x28e>
 800b46a:	2e01      	cmp	r6, #1
 800b46c:	d10b      	bne.n	800b486 <__gethex+0x282>
 800b46e:	9a02      	ldr	r2, [sp, #8]
 800b470:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b474:	6013      	str	r3, [r2, #0]
 800b476:	2301      	movs	r3, #1
 800b478:	6123      	str	r3, [r4, #16]
 800b47a:	f8ca 3000 	str.w	r3, [sl]
 800b47e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b480:	2562      	movs	r5, #98	@ 0x62
 800b482:	601c      	str	r4, [r3, #0]
 800b484:	e73a      	b.n	800b2fc <__gethex+0xf8>
 800b486:	1e71      	subs	r1, r6, #1
 800b488:	4620      	mov	r0, r4
 800b48a:	f7fe fd3a 	bl	8009f02 <__any_on>
 800b48e:	2800      	cmp	r0, #0
 800b490:	d1ed      	bne.n	800b46e <__gethex+0x26a>
 800b492:	9801      	ldr	r0, [sp, #4]
 800b494:	4621      	mov	r1, r4
 800b496:	f7fe f8e3 	bl	8009660 <_Bfree>
 800b49a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b49c:	2300      	movs	r3, #0
 800b49e:	6013      	str	r3, [r2, #0]
 800b4a0:	2550      	movs	r5, #80	@ 0x50
 800b4a2:	e72b      	b.n	800b2fc <__gethex+0xf8>
 800b4a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d1f3      	bne.n	800b492 <__gethex+0x28e>
 800b4aa:	e7e0      	b.n	800b46e <__gethex+0x26a>
 800b4ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d1dd      	bne.n	800b46e <__gethex+0x26a>
 800b4b2:	e7ee      	b.n	800b492 <__gethex+0x28e>
 800b4b4:	0800dbb0 	.word	0x0800dbb0
 800b4b8:	0800da49 	.word	0x0800da49
 800b4bc:	0800dd22 	.word	0x0800dd22
 800b4c0:	1e6f      	subs	r7, r5, #1
 800b4c2:	f1b9 0f00 	cmp.w	r9, #0
 800b4c6:	d130      	bne.n	800b52a <__gethex+0x326>
 800b4c8:	b127      	cbz	r7, 800b4d4 <__gethex+0x2d0>
 800b4ca:	4639      	mov	r1, r7
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	f7fe fd18 	bl	8009f02 <__any_on>
 800b4d2:	4681      	mov	r9, r0
 800b4d4:	117a      	asrs	r2, r7, #5
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b4dc:	f007 071f 	and.w	r7, r7, #31
 800b4e0:	40bb      	lsls	r3, r7
 800b4e2:	4213      	tst	r3, r2
 800b4e4:	4629      	mov	r1, r5
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	bf18      	it	ne
 800b4ea:	f049 0902 	orrne.w	r9, r9, #2
 800b4ee:	f7ff fe22 	bl	800b136 <rshift>
 800b4f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b4f6:	1b76      	subs	r6, r6, r5
 800b4f8:	2502      	movs	r5, #2
 800b4fa:	f1b9 0f00 	cmp.w	r9, #0
 800b4fe:	d047      	beq.n	800b590 <__gethex+0x38c>
 800b500:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b504:	2b02      	cmp	r3, #2
 800b506:	d015      	beq.n	800b534 <__gethex+0x330>
 800b508:	2b03      	cmp	r3, #3
 800b50a:	d017      	beq.n	800b53c <__gethex+0x338>
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d109      	bne.n	800b524 <__gethex+0x320>
 800b510:	f019 0f02 	tst.w	r9, #2
 800b514:	d006      	beq.n	800b524 <__gethex+0x320>
 800b516:	f8da 3000 	ldr.w	r3, [sl]
 800b51a:	ea49 0903 	orr.w	r9, r9, r3
 800b51e:	f019 0f01 	tst.w	r9, #1
 800b522:	d10e      	bne.n	800b542 <__gethex+0x33e>
 800b524:	f045 0510 	orr.w	r5, r5, #16
 800b528:	e032      	b.n	800b590 <__gethex+0x38c>
 800b52a:	f04f 0901 	mov.w	r9, #1
 800b52e:	e7d1      	b.n	800b4d4 <__gethex+0x2d0>
 800b530:	2501      	movs	r5, #1
 800b532:	e7e2      	b.n	800b4fa <__gethex+0x2f6>
 800b534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b536:	f1c3 0301 	rsb	r3, r3, #1
 800b53a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b53c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d0f0      	beq.n	800b524 <__gethex+0x320>
 800b542:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b546:	f104 0314 	add.w	r3, r4, #20
 800b54a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b54e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b552:	f04f 0c00 	mov.w	ip, #0
 800b556:	4618      	mov	r0, r3
 800b558:	f853 2b04 	ldr.w	r2, [r3], #4
 800b55c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b560:	d01b      	beq.n	800b59a <__gethex+0x396>
 800b562:	3201      	adds	r2, #1
 800b564:	6002      	str	r2, [r0, #0]
 800b566:	2d02      	cmp	r5, #2
 800b568:	f104 0314 	add.w	r3, r4, #20
 800b56c:	d13c      	bne.n	800b5e8 <__gethex+0x3e4>
 800b56e:	f8d8 2000 	ldr.w	r2, [r8]
 800b572:	3a01      	subs	r2, #1
 800b574:	42b2      	cmp	r2, r6
 800b576:	d109      	bne.n	800b58c <__gethex+0x388>
 800b578:	1171      	asrs	r1, r6, #5
 800b57a:	2201      	movs	r2, #1
 800b57c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b580:	f006 061f 	and.w	r6, r6, #31
 800b584:	fa02 f606 	lsl.w	r6, r2, r6
 800b588:	421e      	tst	r6, r3
 800b58a:	d13a      	bne.n	800b602 <__gethex+0x3fe>
 800b58c:	f045 0520 	orr.w	r5, r5, #32
 800b590:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b592:	601c      	str	r4, [r3, #0]
 800b594:	9b02      	ldr	r3, [sp, #8]
 800b596:	601f      	str	r7, [r3, #0]
 800b598:	e6b0      	b.n	800b2fc <__gethex+0xf8>
 800b59a:	4299      	cmp	r1, r3
 800b59c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b5a0:	d8d9      	bhi.n	800b556 <__gethex+0x352>
 800b5a2:	68a3      	ldr	r3, [r4, #8]
 800b5a4:	459b      	cmp	fp, r3
 800b5a6:	db17      	blt.n	800b5d8 <__gethex+0x3d4>
 800b5a8:	6861      	ldr	r1, [r4, #4]
 800b5aa:	9801      	ldr	r0, [sp, #4]
 800b5ac:	3101      	adds	r1, #1
 800b5ae:	f7fe f817 	bl	80095e0 <_Balloc>
 800b5b2:	4681      	mov	r9, r0
 800b5b4:	b918      	cbnz	r0, 800b5be <__gethex+0x3ba>
 800b5b6:	4b1a      	ldr	r3, [pc, #104]	@ (800b620 <__gethex+0x41c>)
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	2184      	movs	r1, #132	@ 0x84
 800b5bc:	e6c5      	b.n	800b34a <__gethex+0x146>
 800b5be:	6922      	ldr	r2, [r4, #16]
 800b5c0:	3202      	adds	r2, #2
 800b5c2:	f104 010c 	add.w	r1, r4, #12
 800b5c6:	0092      	lsls	r2, r2, #2
 800b5c8:	300c      	adds	r0, #12
 800b5ca:	f7fd f888 	bl	80086de <memcpy>
 800b5ce:	4621      	mov	r1, r4
 800b5d0:	9801      	ldr	r0, [sp, #4]
 800b5d2:	f7fe f845 	bl	8009660 <_Bfree>
 800b5d6:	464c      	mov	r4, r9
 800b5d8:	6923      	ldr	r3, [r4, #16]
 800b5da:	1c5a      	adds	r2, r3, #1
 800b5dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b5e0:	6122      	str	r2, [r4, #16]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	615a      	str	r2, [r3, #20]
 800b5e6:	e7be      	b.n	800b566 <__gethex+0x362>
 800b5e8:	6922      	ldr	r2, [r4, #16]
 800b5ea:	455a      	cmp	r2, fp
 800b5ec:	dd0b      	ble.n	800b606 <__gethex+0x402>
 800b5ee:	2101      	movs	r1, #1
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	f7ff fda0 	bl	800b136 <rshift>
 800b5f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5fa:	3701      	adds	r7, #1
 800b5fc:	42bb      	cmp	r3, r7
 800b5fe:	f6ff aee0 	blt.w	800b3c2 <__gethex+0x1be>
 800b602:	2501      	movs	r5, #1
 800b604:	e7c2      	b.n	800b58c <__gethex+0x388>
 800b606:	f016 061f 	ands.w	r6, r6, #31
 800b60a:	d0fa      	beq.n	800b602 <__gethex+0x3fe>
 800b60c:	4453      	add	r3, sl
 800b60e:	f1c6 0620 	rsb	r6, r6, #32
 800b612:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b616:	f7fe f8d5 	bl	80097c4 <__hi0bits>
 800b61a:	42b0      	cmp	r0, r6
 800b61c:	dbe7      	blt.n	800b5ee <__gethex+0x3ea>
 800b61e:	e7f0      	b.n	800b602 <__gethex+0x3fe>
 800b620:	0800da49 	.word	0x0800da49

0800b624 <L_shift>:
 800b624:	f1c2 0208 	rsb	r2, r2, #8
 800b628:	0092      	lsls	r2, r2, #2
 800b62a:	b570      	push	{r4, r5, r6, lr}
 800b62c:	f1c2 0620 	rsb	r6, r2, #32
 800b630:	6843      	ldr	r3, [r0, #4]
 800b632:	6804      	ldr	r4, [r0, #0]
 800b634:	fa03 f506 	lsl.w	r5, r3, r6
 800b638:	432c      	orrs	r4, r5
 800b63a:	40d3      	lsrs	r3, r2
 800b63c:	6004      	str	r4, [r0, #0]
 800b63e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b642:	4288      	cmp	r0, r1
 800b644:	d3f4      	bcc.n	800b630 <L_shift+0xc>
 800b646:	bd70      	pop	{r4, r5, r6, pc}

0800b648 <__match>:
 800b648:	b530      	push	{r4, r5, lr}
 800b64a:	6803      	ldr	r3, [r0, #0]
 800b64c:	3301      	adds	r3, #1
 800b64e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b652:	b914      	cbnz	r4, 800b65a <__match+0x12>
 800b654:	6003      	str	r3, [r0, #0]
 800b656:	2001      	movs	r0, #1
 800b658:	bd30      	pop	{r4, r5, pc}
 800b65a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b65e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b662:	2d19      	cmp	r5, #25
 800b664:	bf98      	it	ls
 800b666:	3220      	addls	r2, #32
 800b668:	42a2      	cmp	r2, r4
 800b66a:	d0f0      	beq.n	800b64e <__match+0x6>
 800b66c:	2000      	movs	r0, #0
 800b66e:	e7f3      	b.n	800b658 <__match+0x10>

0800b670 <__hexnan>:
 800b670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b674:	680b      	ldr	r3, [r1, #0]
 800b676:	6801      	ldr	r1, [r0, #0]
 800b678:	115e      	asrs	r6, r3, #5
 800b67a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b67e:	f013 031f 	ands.w	r3, r3, #31
 800b682:	b087      	sub	sp, #28
 800b684:	bf18      	it	ne
 800b686:	3604      	addne	r6, #4
 800b688:	2500      	movs	r5, #0
 800b68a:	1f37      	subs	r7, r6, #4
 800b68c:	4682      	mov	sl, r0
 800b68e:	4690      	mov	r8, r2
 800b690:	9301      	str	r3, [sp, #4]
 800b692:	f846 5c04 	str.w	r5, [r6, #-4]
 800b696:	46b9      	mov	r9, r7
 800b698:	463c      	mov	r4, r7
 800b69a:	9502      	str	r5, [sp, #8]
 800b69c:	46ab      	mov	fp, r5
 800b69e:	784a      	ldrb	r2, [r1, #1]
 800b6a0:	1c4b      	adds	r3, r1, #1
 800b6a2:	9303      	str	r3, [sp, #12]
 800b6a4:	b342      	cbz	r2, 800b6f8 <__hexnan+0x88>
 800b6a6:	4610      	mov	r0, r2
 800b6a8:	9105      	str	r1, [sp, #20]
 800b6aa:	9204      	str	r2, [sp, #16]
 800b6ac:	f7ff fd95 	bl	800b1da <__hexdig_fun>
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	d151      	bne.n	800b758 <__hexnan+0xe8>
 800b6b4:	9a04      	ldr	r2, [sp, #16]
 800b6b6:	9905      	ldr	r1, [sp, #20]
 800b6b8:	2a20      	cmp	r2, #32
 800b6ba:	d818      	bhi.n	800b6ee <__hexnan+0x7e>
 800b6bc:	9b02      	ldr	r3, [sp, #8]
 800b6be:	459b      	cmp	fp, r3
 800b6c0:	dd13      	ble.n	800b6ea <__hexnan+0x7a>
 800b6c2:	454c      	cmp	r4, r9
 800b6c4:	d206      	bcs.n	800b6d4 <__hexnan+0x64>
 800b6c6:	2d07      	cmp	r5, #7
 800b6c8:	dc04      	bgt.n	800b6d4 <__hexnan+0x64>
 800b6ca:	462a      	mov	r2, r5
 800b6cc:	4649      	mov	r1, r9
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	f7ff ffa8 	bl	800b624 <L_shift>
 800b6d4:	4544      	cmp	r4, r8
 800b6d6:	d952      	bls.n	800b77e <__hexnan+0x10e>
 800b6d8:	2300      	movs	r3, #0
 800b6da:	f1a4 0904 	sub.w	r9, r4, #4
 800b6de:	f844 3c04 	str.w	r3, [r4, #-4]
 800b6e2:	f8cd b008 	str.w	fp, [sp, #8]
 800b6e6:	464c      	mov	r4, r9
 800b6e8:	461d      	mov	r5, r3
 800b6ea:	9903      	ldr	r1, [sp, #12]
 800b6ec:	e7d7      	b.n	800b69e <__hexnan+0x2e>
 800b6ee:	2a29      	cmp	r2, #41	@ 0x29
 800b6f0:	d157      	bne.n	800b7a2 <__hexnan+0x132>
 800b6f2:	3102      	adds	r1, #2
 800b6f4:	f8ca 1000 	str.w	r1, [sl]
 800b6f8:	f1bb 0f00 	cmp.w	fp, #0
 800b6fc:	d051      	beq.n	800b7a2 <__hexnan+0x132>
 800b6fe:	454c      	cmp	r4, r9
 800b700:	d206      	bcs.n	800b710 <__hexnan+0xa0>
 800b702:	2d07      	cmp	r5, #7
 800b704:	dc04      	bgt.n	800b710 <__hexnan+0xa0>
 800b706:	462a      	mov	r2, r5
 800b708:	4649      	mov	r1, r9
 800b70a:	4620      	mov	r0, r4
 800b70c:	f7ff ff8a 	bl	800b624 <L_shift>
 800b710:	4544      	cmp	r4, r8
 800b712:	d936      	bls.n	800b782 <__hexnan+0x112>
 800b714:	f1a8 0204 	sub.w	r2, r8, #4
 800b718:	4623      	mov	r3, r4
 800b71a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b71e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b722:	429f      	cmp	r7, r3
 800b724:	d2f9      	bcs.n	800b71a <__hexnan+0xaa>
 800b726:	1b3b      	subs	r3, r7, r4
 800b728:	f023 0303 	bic.w	r3, r3, #3
 800b72c:	3304      	adds	r3, #4
 800b72e:	3401      	adds	r4, #1
 800b730:	3e03      	subs	r6, #3
 800b732:	42b4      	cmp	r4, r6
 800b734:	bf88      	it	hi
 800b736:	2304      	movhi	r3, #4
 800b738:	4443      	add	r3, r8
 800b73a:	2200      	movs	r2, #0
 800b73c:	f843 2b04 	str.w	r2, [r3], #4
 800b740:	429f      	cmp	r7, r3
 800b742:	d2fb      	bcs.n	800b73c <__hexnan+0xcc>
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	b91b      	cbnz	r3, 800b750 <__hexnan+0xe0>
 800b748:	4547      	cmp	r7, r8
 800b74a:	d128      	bne.n	800b79e <__hexnan+0x12e>
 800b74c:	2301      	movs	r3, #1
 800b74e:	603b      	str	r3, [r7, #0]
 800b750:	2005      	movs	r0, #5
 800b752:	b007      	add	sp, #28
 800b754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b758:	3501      	adds	r5, #1
 800b75a:	2d08      	cmp	r5, #8
 800b75c:	f10b 0b01 	add.w	fp, fp, #1
 800b760:	dd06      	ble.n	800b770 <__hexnan+0x100>
 800b762:	4544      	cmp	r4, r8
 800b764:	d9c1      	bls.n	800b6ea <__hexnan+0x7a>
 800b766:	2300      	movs	r3, #0
 800b768:	f844 3c04 	str.w	r3, [r4, #-4]
 800b76c:	2501      	movs	r5, #1
 800b76e:	3c04      	subs	r4, #4
 800b770:	6822      	ldr	r2, [r4, #0]
 800b772:	f000 000f 	and.w	r0, r0, #15
 800b776:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b77a:	6020      	str	r0, [r4, #0]
 800b77c:	e7b5      	b.n	800b6ea <__hexnan+0x7a>
 800b77e:	2508      	movs	r5, #8
 800b780:	e7b3      	b.n	800b6ea <__hexnan+0x7a>
 800b782:	9b01      	ldr	r3, [sp, #4]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d0dd      	beq.n	800b744 <__hexnan+0xd4>
 800b788:	f1c3 0320 	rsb	r3, r3, #32
 800b78c:	f04f 32ff 	mov.w	r2, #4294967295
 800b790:	40da      	lsrs	r2, r3
 800b792:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b796:	4013      	ands	r3, r2
 800b798:	f846 3c04 	str.w	r3, [r6, #-4]
 800b79c:	e7d2      	b.n	800b744 <__hexnan+0xd4>
 800b79e:	3f04      	subs	r7, #4
 800b7a0:	e7d0      	b.n	800b744 <__hexnan+0xd4>
 800b7a2:	2004      	movs	r0, #4
 800b7a4:	e7d5      	b.n	800b752 <__hexnan+0xe2>

0800b7a6 <__ascii_mbtowc>:
 800b7a6:	b082      	sub	sp, #8
 800b7a8:	b901      	cbnz	r1, 800b7ac <__ascii_mbtowc+0x6>
 800b7aa:	a901      	add	r1, sp, #4
 800b7ac:	b142      	cbz	r2, 800b7c0 <__ascii_mbtowc+0x1a>
 800b7ae:	b14b      	cbz	r3, 800b7c4 <__ascii_mbtowc+0x1e>
 800b7b0:	7813      	ldrb	r3, [r2, #0]
 800b7b2:	600b      	str	r3, [r1, #0]
 800b7b4:	7812      	ldrb	r2, [r2, #0]
 800b7b6:	1e10      	subs	r0, r2, #0
 800b7b8:	bf18      	it	ne
 800b7ba:	2001      	movne	r0, #1
 800b7bc:	b002      	add	sp, #8
 800b7be:	4770      	bx	lr
 800b7c0:	4610      	mov	r0, r2
 800b7c2:	e7fb      	b.n	800b7bc <__ascii_mbtowc+0x16>
 800b7c4:	f06f 0001 	mvn.w	r0, #1
 800b7c8:	e7f8      	b.n	800b7bc <__ascii_mbtowc+0x16>

0800b7ca <_realloc_r>:
 800b7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ce:	4680      	mov	r8, r0
 800b7d0:	4615      	mov	r5, r2
 800b7d2:	460c      	mov	r4, r1
 800b7d4:	b921      	cbnz	r1, 800b7e0 <_realloc_r+0x16>
 800b7d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7da:	4611      	mov	r1, r2
 800b7dc:	f7fd be74 	b.w	80094c8 <_malloc_r>
 800b7e0:	b92a      	cbnz	r2, 800b7ee <_realloc_r+0x24>
 800b7e2:	f7fd fdfd 	bl	80093e0 <_free_r>
 800b7e6:	2400      	movs	r4, #0
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7ee:	f000 fa41 	bl	800bc74 <_malloc_usable_size_r>
 800b7f2:	4285      	cmp	r5, r0
 800b7f4:	4606      	mov	r6, r0
 800b7f6:	d802      	bhi.n	800b7fe <_realloc_r+0x34>
 800b7f8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b7fc:	d8f4      	bhi.n	800b7e8 <_realloc_r+0x1e>
 800b7fe:	4629      	mov	r1, r5
 800b800:	4640      	mov	r0, r8
 800b802:	f7fd fe61 	bl	80094c8 <_malloc_r>
 800b806:	4607      	mov	r7, r0
 800b808:	2800      	cmp	r0, #0
 800b80a:	d0ec      	beq.n	800b7e6 <_realloc_r+0x1c>
 800b80c:	42b5      	cmp	r5, r6
 800b80e:	462a      	mov	r2, r5
 800b810:	4621      	mov	r1, r4
 800b812:	bf28      	it	cs
 800b814:	4632      	movcs	r2, r6
 800b816:	f7fc ff62 	bl	80086de <memcpy>
 800b81a:	4621      	mov	r1, r4
 800b81c:	4640      	mov	r0, r8
 800b81e:	f7fd fddf 	bl	80093e0 <_free_r>
 800b822:	463c      	mov	r4, r7
 800b824:	e7e0      	b.n	800b7e8 <_realloc_r+0x1e>

0800b826 <__ascii_wctomb>:
 800b826:	4603      	mov	r3, r0
 800b828:	4608      	mov	r0, r1
 800b82a:	b141      	cbz	r1, 800b83e <__ascii_wctomb+0x18>
 800b82c:	2aff      	cmp	r2, #255	@ 0xff
 800b82e:	d904      	bls.n	800b83a <__ascii_wctomb+0x14>
 800b830:	228a      	movs	r2, #138	@ 0x8a
 800b832:	601a      	str	r2, [r3, #0]
 800b834:	f04f 30ff 	mov.w	r0, #4294967295
 800b838:	4770      	bx	lr
 800b83a:	700a      	strb	r2, [r1, #0]
 800b83c:	2001      	movs	r0, #1
 800b83e:	4770      	bx	lr

0800b840 <__sfputc_r>:
 800b840:	6893      	ldr	r3, [r2, #8]
 800b842:	3b01      	subs	r3, #1
 800b844:	2b00      	cmp	r3, #0
 800b846:	b410      	push	{r4}
 800b848:	6093      	str	r3, [r2, #8]
 800b84a:	da08      	bge.n	800b85e <__sfputc_r+0x1e>
 800b84c:	6994      	ldr	r4, [r2, #24]
 800b84e:	42a3      	cmp	r3, r4
 800b850:	db01      	blt.n	800b856 <__sfputc_r+0x16>
 800b852:	290a      	cmp	r1, #10
 800b854:	d103      	bne.n	800b85e <__sfputc_r+0x1e>
 800b856:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b85a:	f000 b933 	b.w	800bac4 <__swbuf_r>
 800b85e:	6813      	ldr	r3, [r2, #0]
 800b860:	1c58      	adds	r0, r3, #1
 800b862:	6010      	str	r0, [r2, #0]
 800b864:	7019      	strb	r1, [r3, #0]
 800b866:	4608      	mov	r0, r1
 800b868:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b86c:	4770      	bx	lr

0800b86e <__sfputs_r>:
 800b86e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b870:	4606      	mov	r6, r0
 800b872:	460f      	mov	r7, r1
 800b874:	4614      	mov	r4, r2
 800b876:	18d5      	adds	r5, r2, r3
 800b878:	42ac      	cmp	r4, r5
 800b87a:	d101      	bne.n	800b880 <__sfputs_r+0x12>
 800b87c:	2000      	movs	r0, #0
 800b87e:	e007      	b.n	800b890 <__sfputs_r+0x22>
 800b880:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b884:	463a      	mov	r2, r7
 800b886:	4630      	mov	r0, r6
 800b888:	f7ff ffda 	bl	800b840 <__sfputc_r>
 800b88c:	1c43      	adds	r3, r0, #1
 800b88e:	d1f3      	bne.n	800b878 <__sfputs_r+0xa>
 800b890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b894 <_vfiprintf_r>:
 800b894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b898:	460d      	mov	r5, r1
 800b89a:	b09d      	sub	sp, #116	@ 0x74
 800b89c:	4614      	mov	r4, r2
 800b89e:	4698      	mov	r8, r3
 800b8a0:	4606      	mov	r6, r0
 800b8a2:	b118      	cbz	r0, 800b8ac <_vfiprintf_r+0x18>
 800b8a4:	6a03      	ldr	r3, [r0, #32]
 800b8a6:	b90b      	cbnz	r3, 800b8ac <_vfiprintf_r+0x18>
 800b8a8:	f7fc fe00 	bl	80084ac <__sinit>
 800b8ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8ae:	07d9      	lsls	r1, r3, #31
 800b8b0:	d405      	bmi.n	800b8be <_vfiprintf_r+0x2a>
 800b8b2:	89ab      	ldrh	r3, [r5, #12]
 800b8b4:	059a      	lsls	r2, r3, #22
 800b8b6:	d402      	bmi.n	800b8be <_vfiprintf_r+0x2a>
 800b8b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8ba:	f7fc ff0e 	bl	80086da <__retarget_lock_acquire_recursive>
 800b8be:	89ab      	ldrh	r3, [r5, #12]
 800b8c0:	071b      	lsls	r3, r3, #28
 800b8c2:	d501      	bpl.n	800b8c8 <_vfiprintf_r+0x34>
 800b8c4:	692b      	ldr	r3, [r5, #16]
 800b8c6:	b99b      	cbnz	r3, 800b8f0 <_vfiprintf_r+0x5c>
 800b8c8:	4629      	mov	r1, r5
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	f000 f938 	bl	800bb40 <__swsetup_r>
 800b8d0:	b170      	cbz	r0, 800b8f0 <_vfiprintf_r+0x5c>
 800b8d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8d4:	07dc      	lsls	r4, r3, #31
 800b8d6:	d504      	bpl.n	800b8e2 <_vfiprintf_r+0x4e>
 800b8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8dc:	b01d      	add	sp, #116	@ 0x74
 800b8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8e2:	89ab      	ldrh	r3, [r5, #12]
 800b8e4:	0598      	lsls	r0, r3, #22
 800b8e6:	d4f7      	bmi.n	800b8d8 <_vfiprintf_r+0x44>
 800b8e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8ea:	f7fc fef7 	bl	80086dc <__retarget_lock_release_recursive>
 800b8ee:	e7f3      	b.n	800b8d8 <_vfiprintf_r+0x44>
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8f4:	2320      	movs	r3, #32
 800b8f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b8fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8fe:	2330      	movs	r3, #48	@ 0x30
 800b900:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bab0 <_vfiprintf_r+0x21c>
 800b904:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b908:	f04f 0901 	mov.w	r9, #1
 800b90c:	4623      	mov	r3, r4
 800b90e:	469a      	mov	sl, r3
 800b910:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b914:	b10a      	cbz	r2, 800b91a <_vfiprintf_r+0x86>
 800b916:	2a25      	cmp	r2, #37	@ 0x25
 800b918:	d1f9      	bne.n	800b90e <_vfiprintf_r+0x7a>
 800b91a:	ebba 0b04 	subs.w	fp, sl, r4
 800b91e:	d00b      	beq.n	800b938 <_vfiprintf_r+0xa4>
 800b920:	465b      	mov	r3, fp
 800b922:	4622      	mov	r2, r4
 800b924:	4629      	mov	r1, r5
 800b926:	4630      	mov	r0, r6
 800b928:	f7ff ffa1 	bl	800b86e <__sfputs_r>
 800b92c:	3001      	adds	r0, #1
 800b92e:	f000 80a7 	beq.w	800ba80 <_vfiprintf_r+0x1ec>
 800b932:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b934:	445a      	add	r2, fp
 800b936:	9209      	str	r2, [sp, #36]	@ 0x24
 800b938:	f89a 3000 	ldrb.w	r3, [sl]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	f000 809f 	beq.w	800ba80 <_vfiprintf_r+0x1ec>
 800b942:	2300      	movs	r3, #0
 800b944:	f04f 32ff 	mov.w	r2, #4294967295
 800b948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b94c:	f10a 0a01 	add.w	sl, sl, #1
 800b950:	9304      	str	r3, [sp, #16]
 800b952:	9307      	str	r3, [sp, #28]
 800b954:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b958:	931a      	str	r3, [sp, #104]	@ 0x68
 800b95a:	4654      	mov	r4, sl
 800b95c:	2205      	movs	r2, #5
 800b95e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b962:	4853      	ldr	r0, [pc, #332]	@ (800bab0 <_vfiprintf_r+0x21c>)
 800b964:	f7f4 fc44 	bl	80001f0 <memchr>
 800b968:	9a04      	ldr	r2, [sp, #16]
 800b96a:	b9d8      	cbnz	r0, 800b9a4 <_vfiprintf_r+0x110>
 800b96c:	06d1      	lsls	r1, r2, #27
 800b96e:	bf44      	itt	mi
 800b970:	2320      	movmi	r3, #32
 800b972:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b976:	0713      	lsls	r3, r2, #28
 800b978:	bf44      	itt	mi
 800b97a:	232b      	movmi	r3, #43	@ 0x2b
 800b97c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b980:	f89a 3000 	ldrb.w	r3, [sl]
 800b984:	2b2a      	cmp	r3, #42	@ 0x2a
 800b986:	d015      	beq.n	800b9b4 <_vfiprintf_r+0x120>
 800b988:	9a07      	ldr	r2, [sp, #28]
 800b98a:	4654      	mov	r4, sl
 800b98c:	2000      	movs	r0, #0
 800b98e:	f04f 0c0a 	mov.w	ip, #10
 800b992:	4621      	mov	r1, r4
 800b994:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b998:	3b30      	subs	r3, #48	@ 0x30
 800b99a:	2b09      	cmp	r3, #9
 800b99c:	d94b      	bls.n	800ba36 <_vfiprintf_r+0x1a2>
 800b99e:	b1b0      	cbz	r0, 800b9ce <_vfiprintf_r+0x13a>
 800b9a0:	9207      	str	r2, [sp, #28]
 800b9a2:	e014      	b.n	800b9ce <_vfiprintf_r+0x13a>
 800b9a4:	eba0 0308 	sub.w	r3, r0, r8
 800b9a8:	fa09 f303 	lsl.w	r3, r9, r3
 800b9ac:	4313      	orrs	r3, r2
 800b9ae:	9304      	str	r3, [sp, #16]
 800b9b0:	46a2      	mov	sl, r4
 800b9b2:	e7d2      	b.n	800b95a <_vfiprintf_r+0xc6>
 800b9b4:	9b03      	ldr	r3, [sp, #12]
 800b9b6:	1d19      	adds	r1, r3, #4
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	9103      	str	r1, [sp, #12]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	bfbb      	ittet	lt
 800b9c0:	425b      	neglt	r3, r3
 800b9c2:	f042 0202 	orrlt.w	r2, r2, #2
 800b9c6:	9307      	strge	r3, [sp, #28]
 800b9c8:	9307      	strlt	r3, [sp, #28]
 800b9ca:	bfb8      	it	lt
 800b9cc:	9204      	strlt	r2, [sp, #16]
 800b9ce:	7823      	ldrb	r3, [r4, #0]
 800b9d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9d2:	d10a      	bne.n	800b9ea <_vfiprintf_r+0x156>
 800b9d4:	7863      	ldrb	r3, [r4, #1]
 800b9d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9d8:	d132      	bne.n	800ba40 <_vfiprintf_r+0x1ac>
 800b9da:	9b03      	ldr	r3, [sp, #12]
 800b9dc:	1d1a      	adds	r2, r3, #4
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	9203      	str	r2, [sp, #12]
 800b9e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b9e6:	3402      	adds	r4, #2
 800b9e8:	9305      	str	r3, [sp, #20]
 800b9ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bac0 <_vfiprintf_r+0x22c>
 800b9ee:	7821      	ldrb	r1, [r4, #0]
 800b9f0:	2203      	movs	r2, #3
 800b9f2:	4650      	mov	r0, sl
 800b9f4:	f7f4 fbfc 	bl	80001f0 <memchr>
 800b9f8:	b138      	cbz	r0, 800ba0a <_vfiprintf_r+0x176>
 800b9fa:	9b04      	ldr	r3, [sp, #16]
 800b9fc:	eba0 000a 	sub.w	r0, r0, sl
 800ba00:	2240      	movs	r2, #64	@ 0x40
 800ba02:	4082      	lsls	r2, r0
 800ba04:	4313      	orrs	r3, r2
 800ba06:	3401      	adds	r4, #1
 800ba08:	9304      	str	r3, [sp, #16]
 800ba0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba0e:	4829      	ldr	r0, [pc, #164]	@ (800bab4 <_vfiprintf_r+0x220>)
 800ba10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba14:	2206      	movs	r2, #6
 800ba16:	f7f4 fbeb 	bl	80001f0 <memchr>
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	d03f      	beq.n	800ba9e <_vfiprintf_r+0x20a>
 800ba1e:	4b26      	ldr	r3, [pc, #152]	@ (800bab8 <_vfiprintf_r+0x224>)
 800ba20:	bb1b      	cbnz	r3, 800ba6a <_vfiprintf_r+0x1d6>
 800ba22:	9b03      	ldr	r3, [sp, #12]
 800ba24:	3307      	adds	r3, #7
 800ba26:	f023 0307 	bic.w	r3, r3, #7
 800ba2a:	3308      	adds	r3, #8
 800ba2c:	9303      	str	r3, [sp, #12]
 800ba2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba30:	443b      	add	r3, r7
 800ba32:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba34:	e76a      	b.n	800b90c <_vfiprintf_r+0x78>
 800ba36:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba3a:	460c      	mov	r4, r1
 800ba3c:	2001      	movs	r0, #1
 800ba3e:	e7a8      	b.n	800b992 <_vfiprintf_r+0xfe>
 800ba40:	2300      	movs	r3, #0
 800ba42:	3401      	adds	r4, #1
 800ba44:	9305      	str	r3, [sp, #20]
 800ba46:	4619      	mov	r1, r3
 800ba48:	f04f 0c0a 	mov.w	ip, #10
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba52:	3a30      	subs	r2, #48	@ 0x30
 800ba54:	2a09      	cmp	r2, #9
 800ba56:	d903      	bls.n	800ba60 <_vfiprintf_r+0x1cc>
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d0c6      	beq.n	800b9ea <_vfiprintf_r+0x156>
 800ba5c:	9105      	str	r1, [sp, #20]
 800ba5e:	e7c4      	b.n	800b9ea <_vfiprintf_r+0x156>
 800ba60:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba64:	4604      	mov	r4, r0
 800ba66:	2301      	movs	r3, #1
 800ba68:	e7f0      	b.n	800ba4c <_vfiprintf_r+0x1b8>
 800ba6a:	ab03      	add	r3, sp, #12
 800ba6c:	9300      	str	r3, [sp, #0]
 800ba6e:	462a      	mov	r2, r5
 800ba70:	4b12      	ldr	r3, [pc, #72]	@ (800babc <_vfiprintf_r+0x228>)
 800ba72:	a904      	add	r1, sp, #16
 800ba74:	4630      	mov	r0, r6
 800ba76:	f7fb fec1 	bl	80077fc <_printf_float>
 800ba7a:	4607      	mov	r7, r0
 800ba7c:	1c78      	adds	r0, r7, #1
 800ba7e:	d1d6      	bne.n	800ba2e <_vfiprintf_r+0x19a>
 800ba80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba82:	07d9      	lsls	r1, r3, #31
 800ba84:	d405      	bmi.n	800ba92 <_vfiprintf_r+0x1fe>
 800ba86:	89ab      	ldrh	r3, [r5, #12]
 800ba88:	059a      	lsls	r2, r3, #22
 800ba8a:	d402      	bmi.n	800ba92 <_vfiprintf_r+0x1fe>
 800ba8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba8e:	f7fc fe25 	bl	80086dc <__retarget_lock_release_recursive>
 800ba92:	89ab      	ldrh	r3, [r5, #12]
 800ba94:	065b      	lsls	r3, r3, #25
 800ba96:	f53f af1f 	bmi.w	800b8d8 <_vfiprintf_r+0x44>
 800ba9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba9c:	e71e      	b.n	800b8dc <_vfiprintf_r+0x48>
 800ba9e:	ab03      	add	r3, sp, #12
 800baa0:	9300      	str	r3, [sp, #0]
 800baa2:	462a      	mov	r2, r5
 800baa4:	4b05      	ldr	r3, [pc, #20]	@ (800babc <_vfiprintf_r+0x228>)
 800baa6:	a904      	add	r1, sp, #16
 800baa8:	4630      	mov	r0, r6
 800baaa:	f7fc f93f 	bl	8007d2c <_printf_i>
 800baae:	e7e4      	b.n	800ba7a <_vfiprintf_r+0x1e6>
 800bab0:	0800dd09 	.word	0x0800dd09
 800bab4:	0800dd13 	.word	0x0800dd13
 800bab8:	080077fd 	.word	0x080077fd
 800babc:	0800b86f 	.word	0x0800b86f
 800bac0:	0800dd0f 	.word	0x0800dd0f

0800bac4 <__swbuf_r>:
 800bac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac6:	460e      	mov	r6, r1
 800bac8:	4614      	mov	r4, r2
 800baca:	4605      	mov	r5, r0
 800bacc:	b118      	cbz	r0, 800bad6 <__swbuf_r+0x12>
 800bace:	6a03      	ldr	r3, [r0, #32]
 800bad0:	b90b      	cbnz	r3, 800bad6 <__swbuf_r+0x12>
 800bad2:	f7fc fceb 	bl	80084ac <__sinit>
 800bad6:	69a3      	ldr	r3, [r4, #24]
 800bad8:	60a3      	str	r3, [r4, #8]
 800bada:	89a3      	ldrh	r3, [r4, #12]
 800badc:	071a      	lsls	r2, r3, #28
 800bade:	d501      	bpl.n	800bae4 <__swbuf_r+0x20>
 800bae0:	6923      	ldr	r3, [r4, #16]
 800bae2:	b943      	cbnz	r3, 800baf6 <__swbuf_r+0x32>
 800bae4:	4621      	mov	r1, r4
 800bae6:	4628      	mov	r0, r5
 800bae8:	f000 f82a 	bl	800bb40 <__swsetup_r>
 800baec:	b118      	cbz	r0, 800baf6 <__swbuf_r+0x32>
 800baee:	f04f 37ff 	mov.w	r7, #4294967295
 800baf2:	4638      	mov	r0, r7
 800baf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800baf6:	6823      	ldr	r3, [r4, #0]
 800baf8:	6922      	ldr	r2, [r4, #16]
 800bafa:	1a98      	subs	r0, r3, r2
 800bafc:	6963      	ldr	r3, [r4, #20]
 800bafe:	b2f6      	uxtb	r6, r6
 800bb00:	4283      	cmp	r3, r0
 800bb02:	4637      	mov	r7, r6
 800bb04:	dc05      	bgt.n	800bb12 <__swbuf_r+0x4e>
 800bb06:	4621      	mov	r1, r4
 800bb08:	4628      	mov	r0, r5
 800bb0a:	f7ff fa7b 	bl	800b004 <_fflush_r>
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	d1ed      	bne.n	800baee <__swbuf_r+0x2a>
 800bb12:	68a3      	ldr	r3, [r4, #8]
 800bb14:	3b01      	subs	r3, #1
 800bb16:	60a3      	str	r3, [r4, #8]
 800bb18:	6823      	ldr	r3, [r4, #0]
 800bb1a:	1c5a      	adds	r2, r3, #1
 800bb1c:	6022      	str	r2, [r4, #0]
 800bb1e:	701e      	strb	r6, [r3, #0]
 800bb20:	6962      	ldr	r2, [r4, #20]
 800bb22:	1c43      	adds	r3, r0, #1
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d004      	beq.n	800bb32 <__swbuf_r+0x6e>
 800bb28:	89a3      	ldrh	r3, [r4, #12]
 800bb2a:	07db      	lsls	r3, r3, #31
 800bb2c:	d5e1      	bpl.n	800baf2 <__swbuf_r+0x2e>
 800bb2e:	2e0a      	cmp	r6, #10
 800bb30:	d1df      	bne.n	800baf2 <__swbuf_r+0x2e>
 800bb32:	4621      	mov	r1, r4
 800bb34:	4628      	mov	r0, r5
 800bb36:	f7ff fa65 	bl	800b004 <_fflush_r>
 800bb3a:	2800      	cmp	r0, #0
 800bb3c:	d0d9      	beq.n	800baf2 <__swbuf_r+0x2e>
 800bb3e:	e7d6      	b.n	800baee <__swbuf_r+0x2a>

0800bb40 <__swsetup_r>:
 800bb40:	b538      	push	{r3, r4, r5, lr}
 800bb42:	4b29      	ldr	r3, [pc, #164]	@ (800bbe8 <__swsetup_r+0xa8>)
 800bb44:	4605      	mov	r5, r0
 800bb46:	6818      	ldr	r0, [r3, #0]
 800bb48:	460c      	mov	r4, r1
 800bb4a:	b118      	cbz	r0, 800bb54 <__swsetup_r+0x14>
 800bb4c:	6a03      	ldr	r3, [r0, #32]
 800bb4e:	b90b      	cbnz	r3, 800bb54 <__swsetup_r+0x14>
 800bb50:	f7fc fcac 	bl	80084ac <__sinit>
 800bb54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb58:	0719      	lsls	r1, r3, #28
 800bb5a:	d422      	bmi.n	800bba2 <__swsetup_r+0x62>
 800bb5c:	06da      	lsls	r2, r3, #27
 800bb5e:	d407      	bmi.n	800bb70 <__swsetup_r+0x30>
 800bb60:	2209      	movs	r2, #9
 800bb62:	602a      	str	r2, [r5, #0]
 800bb64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb68:	81a3      	strh	r3, [r4, #12]
 800bb6a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb6e:	e033      	b.n	800bbd8 <__swsetup_r+0x98>
 800bb70:	0758      	lsls	r0, r3, #29
 800bb72:	d512      	bpl.n	800bb9a <__swsetup_r+0x5a>
 800bb74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb76:	b141      	cbz	r1, 800bb8a <__swsetup_r+0x4a>
 800bb78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb7c:	4299      	cmp	r1, r3
 800bb7e:	d002      	beq.n	800bb86 <__swsetup_r+0x46>
 800bb80:	4628      	mov	r0, r5
 800bb82:	f7fd fc2d 	bl	80093e0 <_free_r>
 800bb86:	2300      	movs	r3, #0
 800bb88:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb8a:	89a3      	ldrh	r3, [r4, #12]
 800bb8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bb90:	81a3      	strh	r3, [r4, #12]
 800bb92:	2300      	movs	r3, #0
 800bb94:	6063      	str	r3, [r4, #4]
 800bb96:	6923      	ldr	r3, [r4, #16]
 800bb98:	6023      	str	r3, [r4, #0]
 800bb9a:	89a3      	ldrh	r3, [r4, #12]
 800bb9c:	f043 0308 	orr.w	r3, r3, #8
 800bba0:	81a3      	strh	r3, [r4, #12]
 800bba2:	6923      	ldr	r3, [r4, #16]
 800bba4:	b94b      	cbnz	r3, 800bbba <__swsetup_r+0x7a>
 800bba6:	89a3      	ldrh	r3, [r4, #12]
 800bba8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bbac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bbb0:	d003      	beq.n	800bbba <__swsetup_r+0x7a>
 800bbb2:	4621      	mov	r1, r4
 800bbb4:	4628      	mov	r0, r5
 800bbb6:	f000 f88b 	bl	800bcd0 <__smakebuf_r>
 800bbba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbbe:	f013 0201 	ands.w	r2, r3, #1
 800bbc2:	d00a      	beq.n	800bbda <__swsetup_r+0x9a>
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	60a2      	str	r2, [r4, #8]
 800bbc8:	6962      	ldr	r2, [r4, #20]
 800bbca:	4252      	negs	r2, r2
 800bbcc:	61a2      	str	r2, [r4, #24]
 800bbce:	6922      	ldr	r2, [r4, #16]
 800bbd0:	b942      	cbnz	r2, 800bbe4 <__swsetup_r+0xa4>
 800bbd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bbd6:	d1c5      	bne.n	800bb64 <__swsetup_r+0x24>
 800bbd8:	bd38      	pop	{r3, r4, r5, pc}
 800bbda:	0799      	lsls	r1, r3, #30
 800bbdc:	bf58      	it	pl
 800bbde:	6962      	ldrpl	r2, [r4, #20]
 800bbe0:	60a2      	str	r2, [r4, #8]
 800bbe2:	e7f4      	b.n	800bbce <__swsetup_r+0x8e>
 800bbe4:	2000      	movs	r0, #0
 800bbe6:	e7f7      	b.n	800bbd8 <__swsetup_r+0x98>
 800bbe8:	20000064 	.word	0x20000064

0800bbec <_raise_r>:
 800bbec:	291f      	cmp	r1, #31
 800bbee:	b538      	push	{r3, r4, r5, lr}
 800bbf0:	4605      	mov	r5, r0
 800bbf2:	460c      	mov	r4, r1
 800bbf4:	d904      	bls.n	800bc00 <_raise_r+0x14>
 800bbf6:	2316      	movs	r3, #22
 800bbf8:	6003      	str	r3, [r0, #0]
 800bbfa:	f04f 30ff 	mov.w	r0, #4294967295
 800bbfe:	bd38      	pop	{r3, r4, r5, pc}
 800bc00:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bc02:	b112      	cbz	r2, 800bc0a <_raise_r+0x1e>
 800bc04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc08:	b94b      	cbnz	r3, 800bc1e <_raise_r+0x32>
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	f000 f830 	bl	800bc70 <_getpid_r>
 800bc10:	4622      	mov	r2, r4
 800bc12:	4601      	mov	r1, r0
 800bc14:	4628      	mov	r0, r5
 800bc16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc1a:	f000 b817 	b.w	800bc4c <_kill_r>
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d00a      	beq.n	800bc38 <_raise_r+0x4c>
 800bc22:	1c59      	adds	r1, r3, #1
 800bc24:	d103      	bne.n	800bc2e <_raise_r+0x42>
 800bc26:	2316      	movs	r3, #22
 800bc28:	6003      	str	r3, [r0, #0]
 800bc2a:	2001      	movs	r0, #1
 800bc2c:	e7e7      	b.n	800bbfe <_raise_r+0x12>
 800bc2e:	2100      	movs	r1, #0
 800bc30:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bc34:	4620      	mov	r0, r4
 800bc36:	4798      	blx	r3
 800bc38:	2000      	movs	r0, #0
 800bc3a:	e7e0      	b.n	800bbfe <_raise_r+0x12>

0800bc3c <raise>:
 800bc3c:	4b02      	ldr	r3, [pc, #8]	@ (800bc48 <raise+0xc>)
 800bc3e:	4601      	mov	r1, r0
 800bc40:	6818      	ldr	r0, [r3, #0]
 800bc42:	f7ff bfd3 	b.w	800bbec <_raise_r>
 800bc46:	bf00      	nop
 800bc48:	20000064 	.word	0x20000064

0800bc4c <_kill_r>:
 800bc4c:	b538      	push	{r3, r4, r5, lr}
 800bc4e:	4d07      	ldr	r5, [pc, #28]	@ (800bc6c <_kill_r+0x20>)
 800bc50:	2300      	movs	r3, #0
 800bc52:	4604      	mov	r4, r0
 800bc54:	4608      	mov	r0, r1
 800bc56:	4611      	mov	r1, r2
 800bc58:	602b      	str	r3, [r5, #0]
 800bc5a:	f7f6 fe4e 	bl	80028fa <_kill>
 800bc5e:	1c43      	adds	r3, r0, #1
 800bc60:	d102      	bne.n	800bc68 <_kill_r+0x1c>
 800bc62:	682b      	ldr	r3, [r5, #0]
 800bc64:	b103      	cbz	r3, 800bc68 <_kill_r+0x1c>
 800bc66:	6023      	str	r3, [r4, #0]
 800bc68:	bd38      	pop	{r3, r4, r5, pc}
 800bc6a:	bf00      	nop
 800bc6c:	200009a0 	.word	0x200009a0

0800bc70 <_getpid_r>:
 800bc70:	f7f6 be3b 	b.w	80028ea <_getpid>

0800bc74 <_malloc_usable_size_r>:
 800bc74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc78:	1f18      	subs	r0, r3, #4
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	bfbc      	itt	lt
 800bc7e:	580b      	ldrlt	r3, [r1, r0]
 800bc80:	18c0      	addlt	r0, r0, r3
 800bc82:	4770      	bx	lr

0800bc84 <__swhatbuf_r>:
 800bc84:	b570      	push	{r4, r5, r6, lr}
 800bc86:	460c      	mov	r4, r1
 800bc88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc8c:	2900      	cmp	r1, #0
 800bc8e:	b096      	sub	sp, #88	@ 0x58
 800bc90:	4615      	mov	r5, r2
 800bc92:	461e      	mov	r6, r3
 800bc94:	da0d      	bge.n	800bcb2 <__swhatbuf_r+0x2e>
 800bc96:	89a3      	ldrh	r3, [r4, #12]
 800bc98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bc9c:	f04f 0100 	mov.w	r1, #0
 800bca0:	bf14      	ite	ne
 800bca2:	2340      	movne	r3, #64	@ 0x40
 800bca4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bca8:	2000      	movs	r0, #0
 800bcaa:	6031      	str	r1, [r6, #0]
 800bcac:	602b      	str	r3, [r5, #0]
 800bcae:	b016      	add	sp, #88	@ 0x58
 800bcb0:	bd70      	pop	{r4, r5, r6, pc}
 800bcb2:	466a      	mov	r2, sp
 800bcb4:	f000 f848 	bl	800bd48 <_fstat_r>
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	dbec      	blt.n	800bc96 <__swhatbuf_r+0x12>
 800bcbc:	9901      	ldr	r1, [sp, #4]
 800bcbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bcc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bcc6:	4259      	negs	r1, r3
 800bcc8:	4159      	adcs	r1, r3
 800bcca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bcce:	e7eb      	b.n	800bca8 <__swhatbuf_r+0x24>

0800bcd0 <__smakebuf_r>:
 800bcd0:	898b      	ldrh	r3, [r1, #12]
 800bcd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcd4:	079d      	lsls	r5, r3, #30
 800bcd6:	4606      	mov	r6, r0
 800bcd8:	460c      	mov	r4, r1
 800bcda:	d507      	bpl.n	800bcec <__smakebuf_r+0x1c>
 800bcdc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bce0:	6023      	str	r3, [r4, #0]
 800bce2:	6123      	str	r3, [r4, #16]
 800bce4:	2301      	movs	r3, #1
 800bce6:	6163      	str	r3, [r4, #20]
 800bce8:	b003      	add	sp, #12
 800bcea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcec:	ab01      	add	r3, sp, #4
 800bcee:	466a      	mov	r2, sp
 800bcf0:	f7ff ffc8 	bl	800bc84 <__swhatbuf_r>
 800bcf4:	9f00      	ldr	r7, [sp, #0]
 800bcf6:	4605      	mov	r5, r0
 800bcf8:	4639      	mov	r1, r7
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	f7fd fbe4 	bl	80094c8 <_malloc_r>
 800bd00:	b948      	cbnz	r0, 800bd16 <__smakebuf_r+0x46>
 800bd02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd06:	059a      	lsls	r2, r3, #22
 800bd08:	d4ee      	bmi.n	800bce8 <__smakebuf_r+0x18>
 800bd0a:	f023 0303 	bic.w	r3, r3, #3
 800bd0e:	f043 0302 	orr.w	r3, r3, #2
 800bd12:	81a3      	strh	r3, [r4, #12]
 800bd14:	e7e2      	b.n	800bcdc <__smakebuf_r+0xc>
 800bd16:	89a3      	ldrh	r3, [r4, #12]
 800bd18:	6020      	str	r0, [r4, #0]
 800bd1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd1e:	81a3      	strh	r3, [r4, #12]
 800bd20:	9b01      	ldr	r3, [sp, #4]
 800bd22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bd26:	b15b      	cbz	r3, 800bd40 <__smakebuf_r+0x70>
 800bd28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	f000 f81d 	bl	800bd6c <_isatty_r>
 800bd32:	b128      	cbz	r0, 800bd40 <__smakebuf_r+0x70>
 800bd34:	89a3      	ldrh	r3, [r4, #12]
 800bd36:	f023 0303 	bic.w	r3, r3, #3
 800bd3a:	f043 0301 	orr.w	r3, r3, #1
 800bd3e:	81a3      	strh	r3, [r4, #12]
 800bd40:	89a3      	ldrh	r3, [r4, #12]
 800bd42:	431d      	orrs	r5, r3
 800bd44:	81a5      	strh	r5, [r4, #12]
 800bd46:	e7cf      	b.n	800bce8 <__smakebuf_r+0x18>

0800bd48 <_fstat_r>:
 800bd48:	b538      	push	{r3, r4, r5, lr}
 800bd4a:	4d07      	ldr	r5, [pc, #28]	@ (800bd68 <_fstat_r+0x20>)
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	4604      	mov	r4, r0
 800bd50:	4608      	mov	r0, r1
 800bd52:	4611      	mov	r1, r2
 800bd54:	602b      	str	r3, [r5, #0]
 800bd56:	f7f6 fe30 	bl	80029ba <_fstat>
 800bd5a:	1c43      	adds	r3, r0, #1
 800bd5c:	d102      	bne.n	800bd64 <_fstat_r+0x1c>
 800bd5e:	682b      	ldr	r3, [r5, #0]
 800bd60:	b103      	cbz	r3, 800bd64 <_fstat_r+0x1c>
 800bd62:	6023      	str	r3, [r4, #0]
 800bd64:	bd38      	pop	{r3, r4, r5, pc}
 800bd66:	bf00      	nop
 800bd68:	200009a0 	.word	0x200009a0

0800bd6c <_isatty_r>:
 800bd6c:	b538      	push	{r3, r4, r5, lr}
 800bd6e:	4d06      	ldr	r5, [pc, #24]	@ (800bd88 <_isatty_r+0x1c>)
 800bd70:	2300      	movs	r3, #0
 800bd72:	4604      	mov	r4, r0
 800bd74:	4608      	mov	r0, r1
 800bd76:	602b      	str	r3, [r5, #0]
 800bd78:	f7f6 fe2f 	bl	80029da <_isatty>
 800bd7c:	1c43      	adds	r3, r0, #1
 800bd7e:	d102      	bne.n	800bd86 <_isatty_r+0x1a>
 800bd80:	682b      	ldr	r3, [r5, #0]
 800bd82:	b103      	cbz	r3, 800bd86 <_isatty_r+0x1a>
 800bd84:	6023      	str	r3, [r4, #0]
 800bd86:	bd38      	pop	{r3, r4, r5, pc}
 800bd88:	200009a0 	.word	0x200009a0

0800bd8c <_init>:
 800bd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd8e:	bf00      	nop
 800bd90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd92:	bc08      	pop	{r3}
 800bd94:	469e      	mov	lr, r3
 800bd96:	4770      	bx	lr

0800bd98 <_fini>:
 800bd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9a:	bf00      	nop
 800bd9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd9e:	bc08      	pop	{r3}
 800bda0:	469e      	mov	lr, r3
 800bda2:	4770      	bx	lr
